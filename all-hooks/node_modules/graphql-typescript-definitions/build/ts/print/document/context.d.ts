import * as t from '@babel/types';
import type { AST, Fragment, Operation } from 'graphql-tool-utilities';
import type { EnumFormat, ExportFormat } from '../../types';
export interface Options {
    schemaTypesPath: string;
    enumFormat?: EnumFormat;
    exportFormat?: ExportFormat;
    addTypename?: boolean;
}
export interface OperationOptions extends Options {
    partial?: boolean;
}
export type NamespaceExportableType = t.TSInterfaceDeclaration;
export declare class FileContext {
    private readonly path;
    private readonly options;
    get schemaImports(): t.ImportDeclaration | null;
    private readonly importedTypes;
    constructor(path: string, options: Options);
    import(type: string): void;
}
export declare class OperationContext {
    operation: Operation | Fragment;
    ast: AST;
    options: OperationOptions;
    file: FileContext;
    get typeName(): string;
    get namespace(): t.TSModuleDeclaration | null;
    get exported(): t.TSInterfaceDeclaration[];
    private readonly exportedTypes;
    constructor(operation: Operation | Fragment, ast: AST, options: OperationOptions, file: FileContext);
    export(type: NamespaceExportableType): t.TSTypeReference;
}
//# sourceMappingURL=context.d.ts.map
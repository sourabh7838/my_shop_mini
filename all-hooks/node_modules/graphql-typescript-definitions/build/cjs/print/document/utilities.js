'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

class ObjectStack {
  get name() {
    const {
      parent,
      field,
      isFragment,
      type
    } = this;
    const fieldName = field ? upperCaseFirst(field.responseName) : '';
    const name = `${parent ? parent.name : ''}${fieldName}`;
    return isFragment ? `${name}${type ? type.name : 'Other'}` : name;
  }
  constructor(type, field, parent, isFragment = false) {
    this.seenFields = new Set();
    this.type = type;
    this.field = field;
    this.parent = parent;
    this.isFragment = isFragment;
  }
  nested(field, type) {
    return new ObjectStack(type, field, this);
  }
  fragment(type) {
    return new ObjectStack(type, this.field, this.parent, true);
  }
  sawField(field) {
    this.seenFields.add(field.responseName);
  }
  hasSeenField(field) {
    return this.seenFields.has(field.responseName);
  }
}
function upperCaseFirst(input) {
  return input.charAt(0).toUpperCase() + input.substr(1);
}

exports.ObjectStack = ObjectStack;
exports.upperCaseFirst = upperCaseFirst;

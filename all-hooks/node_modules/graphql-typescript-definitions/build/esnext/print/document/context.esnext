import { relative, dirname } from 'path';
import * as t from '@babel/types';
import { isOperation } from 'graphql-tool-utilities';
import { upperCaseFirst } from './utilities.esnext';

class FileContext {
  get schemaImports() {
    const {
      path,
      importedTypes,
      options: {
        schemaTypesPath
      }
    } = this;
    return importedTypes.size > 0 ? t.importDeclaration([...importedTypes].map(type => t.importSpecifier(t.identifier(type), t.identifier(type))), t.stringLiteral(importPath(path, schemaTypesPath))) : null;
  }
  constructor(path, options) {
    this.importedTypes = new Set();
    this.path = path;
    this.options = options;
  }
  import(type) {
    this.importedTypes.add(type);
  }
}
class OperationContext {
  get typeName() {
    let typeName;
    if (isOperation(this.operation)) {
      const {
        operationName,
        operationType
      } = this.operation;
      typeName = `${upperCaseFirst(operationName)}${upperCaseFirst(operationType)}Data`;
    } else {
      const {
        fragmentName
      } = this.operation;
      typeName = `${upperCaseFirst(fragmentName)}FragmentData`;
    }
    return this.options.partial ? typeName.replace(/Data$/, 'PartialData') : typeName;
  }
  get namespace() {
    const {
      exported,
      typeName
    } = this;
    return exported.length > 0 ? t.tsModuleDeclaration(t.identifier(typeName), t.tsModuleBlock(exported.map(type => t.exportNamedDeclaration(type, [])))) : null;
  }
  get exported() {
    return this.exportedTypes;
  }
  constructor(operation, ast, options, file) {
    this.exportedTypes = [];
    this.operation = operation;
    this.ast = ast;
    this.options = options;
    this.file = file;
  }
  export(type) {
    this.exportedTypes.push(type);
    return t.tsTypeReference(t.tsQualifiedName(t.identifier(this.typeName), t.identifier(type.id.name)));
  }
}
function importPath(from, to) {
  const relativePath = relative(dirname(from), to);
  const normalizedPath = relativePath.startsWith('..') ? relativePath : `./${relativePath}`;
  return normalizedPath.replace(/\.ts$/, '');
}

export { FileContext, OperationContext };

import { watch } from 'chokidar';
import { getGraphQLProjectIncludedFilePaths, getGraphQLProjects, getIncludesExcludesFromConfig, resolvePathRelativeToConfig, getGraphQLSchemaPaths } from 'graphql-config-utilities';
import { AbstractGraphQLFilesystem } from './graphql-filesystem.mjs';

class DefaultGraphQLFilesystem extends AbstractGraphQLFilesystem {
  constructor(...args) {
    super(...args);
    this.watchers = [];
  }
  async watch(config) {
    this.watchers.push(...this.setupDocumentWatchers(config).concat(this.setupSchemaWatcher(config)));
    await Promise.all(this.watchers.map(watcher => new Promise(resolve => watcher.on('ready', () => resolve()))));
  }
  dispose() {
    this.watchers.forEach(watcher => {
      watcher.close();
    });
    this.watchers.length = 0;
  }
  getGraphQLProjectIncludedFilePaths(projectConfig) {
    return getGraphQLProjectIncludedFilePaths(projectConfig);
  }
  setupDocumentWatchers(config) {
    return getGraphQLProjects(config).filter(projectConfig => {
      const [includes] = getIncludesExcludesFromConfig(projectConfig);
      return includes.length > 0;
    }).map(projectConfig => {
      const [includes, excludes] = getIncludesExcludesFromConfig(projectConfig);
      return watch(includes.map(include => resolvePathRelativeToConfig(projectConfig, include)), {
        ignored: excludes.map(exclude => resolvePathRelativeToConfig(projectConfig, exclude)),
        ignoreInitial: true
      }).on('add', filePath => this.emit('change:document', filePath, projectConfig)).on('change', filePath => this.emit('change:document', filePath, projectConfig)).on('unlink', filePath => this.emit('delete:document', filePath, projectConfig));
    });
  }
  setupSchemaWatcher(config) {
    return watch(getGraphQLSchemaPaths(config), {
      ignoreInitial: true
    }).on('change', schemaPath => this.emit('change:schema', schemaPath));
  }
}

export { DefaultGraphQLFilesystem };

import {execSync} from 'node:child_process'

import {Command} from 'commander'

import {TEMPLATE_VALUES} from '../src/templates-index.js'

const program = new Command()
  .name('test-create-mini-legacy')
  .description('Creates a legacy mini and checks that it is valid')
  .argument('<template name>', 'Name of the template to use')
  .action(async (templateName: string) => {
    if (!TEMPLATE_VALUES.includes(templateName)) {
      console.log(
        `\n${templateName} is not a valid template name. Please use one of ${TEMPLATE_VALUES.join(
          ', '
        )}\n`
      )
      process.exit(1)
    }

    // build the CLI
    execSync('yarn build:cli', {stdio: 'inherit'})

    // set up folder structure
    execSync('mkdir -p ../minis/', {stdio: 'inherit'})
    execSync('rm -rf ../minis/test-template', {stdio: 'inherit'}) // just in case this wasn't deleted before

    // build mini
    execSync(
      `yarn shop-minis create test-template --legacy --template ${templateName} --extension-target shop.store.block.render --extension-type=default-card --output-dir ../minis/`,
      {stdio: 'inherit'}
    )

    // print package.json
    execSync(`cat ../minis/test-template/package.json`, {stdio: 'inherit'})

    // run eslint
    try {
      execSync('cd ../minis/test-template && yarn lint', {stdio: 'inherit'})
    } catch {
      console.log(`\n ⚠️  eslint failed. To reproduce run: 
        $ cd ../minis/test-template
        $ yarn lint
      `)
      process.exit(1)
    }

    // run typescript checks
    try {
      execSync('cd ../minis/test-template && yarn tsc', {stdio: 'inherit'})
    } catch {
      console.log(`\n ⚠️  typescript failed. To reproduce run: 
        $ cd ../minis/test-template
        $ yarn tsc
      `)
      process.exit(1)
    }

    // clean up
    execSync('rm -rf ../minis/test-template', {stdio: 'inherit'})
  })

program.parse()

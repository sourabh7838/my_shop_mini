import { Command } from 'commander';
import { loadCommand as loadCancelSubmissionCommand } from './commands/cancel-submission/index.js';
import { loadCommand as loadCheckSubmissionCommand } from './commands/check-submission/index.js';
import { loadCommand as loadCodemodCommand } from './commands/codemod/index.js';
import { CLI_VERSION } from './commands/config.js';
import { loadCommand as loadCreateExtensionCommand } from './commands/create-extension/index.js';
import { loadCommand as loadCreateMiniCommand } from './commands/create-mini/index.js';
import { loadCommand as loadDevCommand } from './commands/dev/index.js';
import { command as doctorCommand } from './commands/doctor/index.js';
import { command as featuresCommand } from './commands/features/index.js';
import { loadCommand as loadGenerateGraphqlTypesCommand } from './commands/generate-graphql-types/index.js';
import { loadCommand as loadInfoCommand } from './commands/info/index.js';
import { loadCommand as loadSetupCommand } from './commands/setup/index.js';
import { loadCommand as loadSubmitCommand } from './commands/submit/index.js';
import { loadCommand as loadUpgradeCommand } from './commands/upgrade/index.js';
import { loadCommand as loadValidateManifestCommand } from './commands/validate-manifest/index.js';
import { loadCommand as loadSyncUserMetafiledDefinitionsCommand } from './commands/sync-user-metafield-definitions/index.js';
import { loadCommand as loadAppCommand } from './commands/app/index.js';
import { loadCommand as loadSecretsCommand } from './commands/secrets/index.js';
import { loadCommand as loadProxiesCommand } from './commands/proxies/index.js';
import { loadCommand as loadReportsCommand } from './commands/reports/index.js';
export async function loadProgram() {
    const program = new Command();
    program
        .name('shop-minis')
        .description('CLI for Shop Minis development')
        .version(CLI_VERSION);
    loadCreateMiniCommand(program);
    await loadDevCommand(program);
    loadGenerateGraphqlTypesCommand(program);
    loadSubmitCommand(program);
    loadCancelSubmissionCommand(program);
    loadCheckSubmissionCommand(program);
    loadUpgradeCommand(program);
    loadValidateManifestCommand(program);
    loadCodemodCommand(program);
    loadInfoCommand(program);
    loadSetupCommand(program);
    loadCreateExtensionCommand(program);
    loadAppCommand(program);
    loadSyncUserMetafiledDefinitionsCommand(program);
    loadSecretsCommand(program);
    loadProxiesCommand(program);
    loadReportsCommand(program);
    program.addCommand(doctorCommand);
    program.addCommand(featuresCommand);
    return program;
}
//# sourceMappingURL=program.js.map
/** Possible error codes that can be returned by ContentCreateUserError. */
export var ContentCreateUserErrorCode;
(function (ContentCreateUserErrorCode) {
    /** Content with this external ID already exists. */
    ContentCreateUserErrorCode["DuplicateExternalId"] = "DUPLICATE_EXTERNAL_ID";
    /** Some products are not eligible for Shop. */
    ContentCreateUserErrorCode["IneligibleProducts"] = "INELIGIBLE_PRODUCTS";
})(ContentCreateUserErrorCode || (ContentCreateUserErrorCode = {}));
/** ISO currency code. */
export var CurrencyCode;
(function (CurrencyCode) {
    /** United Arab Emirates Dirham. */
    CurrencyCode["Aed"] = "AED";
    /** Afghan Afghani. */
    CurrencyCode["Afn"] = "AFN";
    /** Albanian Lek. */
    CurrencyCode["All"] = "ALL";
    /** Armenian Dram. */
    CurrencyCode["Amd"] = "AMD";
    /** Netherlands Antillean Gulden. */
    CurrencyCode["Ang"] = "ANG";
    /** Angolan Kwanza. */
    CurrencyCode["Aoa"] = "AOA";
    /** Argentine Peso. */
    CurrencyCode["Ars"] = "ARS";
    /** Australian Dollar. */
    CurrencyCode["Aud"] = "AUD";
    /** Aruban Florin. */
    CurrencyCode["Awg"] = "AWG";
    /** Azerbaijani Manat. */
    CurrencyCode["Azn"] = "AZN";
    /** Bosnia and Herzegovina Convertible Mark. */
    CurrencyCode["Bam"] = "BAM";
    /** Barbadian Dollar. */
    CurrencyCode["Bbd"] = "BBD";
    /** Bangladeshi Taka. */
    CurrencyCode["Bdt"] = "BDT";
    /** Bulgarian Lev. */
    CurrencyCode["Bgn"] = "BGN";
    /** Bahraini Dinar. */
    CurrencyCode["Bhd"] = "BHD";
    /** Burundian Franc. */
    CurrencyCode["Bif"] = "BIF";
    /** Bermudian Dollar. */
    CurrencyCode["Bmd"] = "BMD";
    /** Brunei Dollar. */
    CurrencyCode["Bnd"] = "BND";
    /** Bolivian Boliviano. */
    CurrencyCode["Bob"] = "BOB";
    /** Brazilian Real. */
    CurrencyCode["Brl"] = "BRL";
    /** Bahamian Dollar. */
    CurrencyCode["Bsd"] = "BSD";
    /** Bhutanese Ngultrum. */
    CurrencyCode["Btn"] = "BTN";
    /** Botswana Pula. */
    CurrencyCode["Bwp"] = "BWP";
    /** Belarusian Ruble. */
    CurrencyCode["Byn"] = "BYN";
    /** Belarusian Ruble. */
    CurrencyCode["Byr"] = "BYR";
    /** Belize Dollar. */
    CurrencyCode["Bzd"] = "BZD";
    /** Canadian Dollar. */
    CurrencyCode["Cad"] = "CAD";
    /** Congolese Franc. */
    CurrencyCode["Cdf"] = "CDF";
    /** Swiss Franc. */
    CurrencyCode["Chf"] = "CHF";
    /** Unidad de Fomento. */
    CurrencyCode["Clf"] = "CLF";
    /** Chilean Peso. */
    CurrencyCode["Clp"] = "CLP";
    /** Chinese Renminbi Yuan. */
    CurrencyCode["Cny"] = "CNY";
    /** Colombian Peso. */
    CurrencyCode["Cop"] = "COP";
    /** Costa Rican Colón. */
    CurrencyCode["Crc"] = "CRC";
    /** Cuban Convertible Peso. */
    CurrencyCode["Cuc"] = "CUC";
    /** Cuban Peso. */
    CurrencyCode["Cup"] = "CUP";
    /** Cape Verdean Escudo. */
    CurrencyCode["Cve"] = "CVE";
    /** Cypriot pound. */
    CurrencyCode["Cyp"] = "CYP";
    /** Czech Koruna. */
    CurrencyCode["Czk"] = "CZK";
    /** Djiboutian Franc. */
    CurrencyCode["Djf"] = "DJF";
    /** Danish Krone. */
    CurrencyCode["Dkk"] = "DKK";
    /** Dominican Peso. */
    CurrencyCode["Dop"] = "DOP";
    /** Algerian Dinar. */
    CurrencyCode["Dzd"] = "DZD";
    /** Estonian Kroon. */
    CurrencyCode["Eek"] = "EEK";
    /** Egyptian Pound. */
    CurrencyCode["Egp"] = "EGP";
    /** Eritrean Nakfa. */
    CurrencyCode["Ern"] = "ERN";
    /** Ethiopian Birr. */
    CurrencyCode["Etb"] = "ETB";
    /** Euro. */
    CurrencyCode["Eur"] = "EUR";
    /** Fijian Dollar. */
    CurrencyCode["Fjd"] = "FJD";
    /** Falkland Pound. */
    CurrencyCode["Fkp"] = "FKP";
    /** British Pound. */
    CurrencyCode["Gbp"] = "GBP";
    /** British Penny. */
    CurrencyCode["Gbx"] = "GBX";
    /** Georgian Lari. */
    CurrencyCode["Gel"] = "GEL";
    /** Guernsey Pound. */
    CurrencyCode["Ggp"] = "GGP";
    /** Ghanaian Cedi. */
    CurrencyCode["Ghc"] = "GHC";
    /** Ghanaian Cedi. */
    CurrencyCode["Ghs"] = "GHS";
    /** Gibraltar Pound. */
    CurrencyCode["Gip"] = "GIP";
    /** Gambian Dalasi. */
    CurrencyCode["Gmd"] = "GMD";
    /** Guinean Franc. */
    CurrencyCode["Gnf"] = "GNF";
    /** Guatemalan Quetzal. */
    CurrencyCode["Gtq"] = "GTQ";
    /** Guyanese Dollar. */
    CurrencyCode["Gyd"] = "GYD";
    /** Hong Kong Dollar. */
    CurrencyCode["Hkd"] = "HKD";
    /** Honduran Lempira. */
    CurrencyCode["Hnl"] = "HNL";
    /** Croatian Kuna. */
    CurrencyCode["Hrk"] = "HRK";
    /** Haitian Gourde. */
    CurrencyCode["Htg"] = "HTG";
    /** Hungarian Forint. */
    CurrencyCode["Huf"] = "HUF";
    /** Indonesian Rupiah. */
    CurrencyCode["Idr"] = "IDR";
    /** Israeli New Sheqel. */
    CurrencyCode["Ils"] = "ILS";
    /** Isle of Man Pound. */
    CurrencyCode["Imp"] = "IMP";
    /** Indian Rupee. */
    CurrencyCode["Inr"] = "INR";
    /** Iraqi Dinar. */
    CurrencyCode["Iqd"] = "IQD";
    /** Iranian Rial. */
    CurrencyCode["Irr"] = "IRR";
    /** Icelandic Króna. */
    CurrencyCode["Isk"] = "ISK";
    /** Jersey Pound. */
    CurrencyCode["Jep"] = "JEP";
    /** Jamaican Dollar. */
    CurrencyCode["Jmd"] = "JMD";
    /** Jordanian Dinar. */
    CurrencyCode["Jod"] = "JOD";
    /** Japanese Yen. */
    CurrencyCode["Jpy"] = "JPY";
    /** Kenyan Shilling. */
    CurrencyCode["Kes"] = "KES";
    /** Kyrgyzstani Som. */
    CurrencyCode["Kgs"] = "KGS";
    /** Cambodian Riel. */
    CurrencyCode["Khr"] = "KHR";
    /** Kiribati Dollar. */
    CurrencyCode["Kid"] = "KID";
    /** Comorian Franc. */
    CurrencyCode["Kmf"] = "KMF";
    /** North Korean Won. */
    CurrencyCode["Kpw"] = "KPW";
    /** South Korean Won. */
    CurrencyCode["Krw"] = "KRW";
    /** Kuwaiti Dinar. */
    CurrencyCode["Kwd"] = "KWD";
    /** Cayman Islands Dollar. */
    CurrencyCode["Kyd"] = "KYD";
    /** Kazakhstani Tenge. */
    CurrencyCode["Kzt"] = "KZT";
    /** Lao Kip. */
    CurrencyCode["Lak"] = "LAK";
    /** Lebanese Pound. */
    CurrencyCode["Lbp"] = "LBP";
    /** Sri Lankan Rupee. */
    CurrencyCode["Lkr"] = "LKR";
    /** Liberian Dollar. */
    CurrencyCode["Lrd"] = "LRD";
    /** Lesotho Loti. */
    CurrencyCode["Lsl"] = "LSL";
    /** Lithuanian Litas. */
    CurrencyCode["Ltl"] = "LTL";
    /** Latvian Lats. */
    CurrencyCode["Lvl"] = "LVL";
    /** Libyan Dinar. */
    CurrencyCode["Lyd"] = "LYD";
    /** Moroccan Dirham. */
    CurrencyCode["Mad"] = "MAD";
    /** Moldovan Leu. */
    CurrencyCode["Mdl"] = "MDL";
    /** Malagasy Ariary. */
    CurrencyCode["Mga"] = "MGA";
    /** Macedonian Denar. */
    CurrencyCode["Mkd"] = "MKD";
    /** Myanmar Kyat. */
    CurrencyCode["Mmk"] = "MMK";
    /** Mongolian Tögrög. */
    CurrencyCode["Mnt"] = "MNT";
    /** Macanese Pataca. */
    CurrencyCode["Mop"] = "MOP";
    /** Mauritanian Ouguiya. */
    CurrencyCode["Mro"] = "MRO";
    /** Mauritanian New Ouguiya. */
    CurrencyCode["Mru"] = "MRU";
    /** Maltese Lira. */
    CurrencyCode["Mtl"] = "MTL";
    /** Mauritian Rupee. */
    CurrencyCode["Mur"] = "MUR";
    /** Maldivian Rufiyaa. */
    CurrencyCode["Mvr"] = "MVR";
    /** Malawian Kwacha. */
    CurrencyCode["Mwk"] = "MWK";
    /** Mexican Peso. */
    CurrencyCode["Mxn"] = "MXN";
    /** Malaysian Ringgit. */
    CurrencyCode["Myr"] = "MYR";
    /** Mozambican Metical. */
    CurrencyCode["Mzn"] = "MZN";
    /** Namibian Dollar. */
    CurrencyCode["Nad"] = "NAD";
    /** Nigerian Naira. */
    CurrencyCode["Ngn"] = "NGN";
    /** Nicaraguan Córdoba. */
    CurrencyCode["Nio"] = "NIO";
    /** Norwegian Krone. */
    CurrencyCode["Nok"] = "NOK";
    /** Nepalese Rupee. */
    CurrencyCode["Npr"] = "NPR";
    /** New Zealand Dollar. */
    CurrencyCode["Nzd"] = "NZD";
    /** Omani Rial. */
    CurrencyCode["Omr"] = "OMR";
    /** Panamanian Balboa. */
    CurrencyCode["Pab"] = "PAB";
    /** Peruvian Sol. */
    CurrencyCode["Pen"] = "PEN";
    /** Papua New Guinean Kina. */
    CurrencyCode["Pgk"] = "PGK";
    /** Philippine Peso. */
    CurrencyCode["Php"] = "PHP";
    /** Pakistani Rupee. */
    CurrencyCode["Pkr"] = "PKR";
    /** Polish Złoty. */
    CurrencyCode["Pln"] = "PLN";
    /** Paraguayan Guaraní. */
    CurrencyCode["Pyg"] = "PYG";
    /** Qatari Riyal. */
    CurrencyCode["Qar"] = "QAR";
    /** Romanian Leu. */
    CurrencyCode["Ron"] = "RON";
    /** Serbian Dinar. */
    CurrencyCode["Rsd"] = "RSD";
    /** Russian Ruble. */
    CurrencyCode["Rub"] = "RUB";
    /** Rwandan Franc. */
    CurrencyCode["Rwf"] = "RWF";
    /** Saudi Riyal. */
    CurrencyCode["Sar"] = "SAR";
    /** Solomon Islands Dollar. */
    CurrencyCode["Sbd"] = "SBD";
    /** Seychellois Rupee. */
    CurrencyCode["Scr"] = "SCR";
    /** Sudanese Pound. */
    CurrencyCode["Sdg"] = "SDG";
    /** Swedish Krona. */
    CurrencyCode["Sek"] = "SEK";
    /** Singapore Dollar. */
    CurrencyCode["Sgd"] = "SGD";
    /** Saint Helenian Pound. */
    CurrencyCode["Shp"] = "SHP";
    /** Slovak Koruna. */
    CurrencyCode["Skk"] = "SKK";
    /** Sierra Leonean Leone. */
    CurrencyCode["Sll"] = "SLL";
    /** Somali Shilling. */
    CurrencyCode["Sos"] = "SOS";
    /** Surinamese Dollar. */
    CurrencyCode["Srd"] = "SRD";
    /** South Sudanese Pound. */
    CurrencyCode["Ssp"] = "SSP";
    /** São Tomé and Príncipe Dobra. */
    CurrencyCode["Std"] = "STD";
    /** São Tomé and Príncipe Dobra. */
    CurrencyCode["Stn"] = "STN";
    /** Salvadoran Colón. */
    CurrencyCode["Svc"] = "SVC";
    /** Syrian Pound. */
    CurrencyCode["Syp"] = "SYP";
    /** Swazi Lilangeni. */
    CurrencyCode["Szl"] = "SZL";
    /** Thai Baht. */
    CurrencyCode["Thb"] = "THB";
    /** Tajikistani Somoni. */
    CurrencyCode["Tjs"] = "TJS";
    /** Turkmenistani Manat. */
    CurrencyCode["Tmm"] = "TMM";
    /** Turkmenistani Manat. */
    CurrencyCode["Tmt"] = "TMT";
    /** Tunisian Dinar. */
    CurrencyCode["Tnd"] = "TND";
    /** Tongan Paʻanga. */
    CurrencyCode["Top"] = "TOP";
    /** Turkish Lira. */
    CurrencyCode["Try"] = "TRY";
    /** Trinidad and Tobago Dollar. */
    CurrencyCode["Ttd"] = "TTD";
    /** New Taiwan Dollar. */
    CurrencyCode["Twd"] = "TWD";
    /** Tanzanian Shilling. */
    CurrencyCode["Tzs"] = "TZS";
    /** Ukrainian Hryvnia. */
    CurrencyCode["Uah"] = "UAH";
    /** Ugandan Shilling. */
    CurrencyCode["Ugx"] = "UGX";
    /** United States Dollar. */
    CurrencyCode["Usd"] = "USD";
    /** Uruguayan Peso. */
    CurrencyCode["Uyu"] = "UYU";
    /** Uzbekistan Som. */
    CurrencyCode["Uzs"] = "UZS";
    /** Venezuelan Bolívar. */
    CurrencyCode["Veb"] = "VEB";
    /** Venezuelan Bolívar soberano. */
    CurrencyCode["Ved"] = "VED";
    /** Venezuelan Bolívar fuerte. */
    CurrencyCode["Vef"] = "VEF";
    /** Venezuelan Bolívar soberano. */
    CurrencyCode["Ves"] = "VES";
    /** Vietnamese Đồng. */
    CurrencyCode["Vnd"] = "VND";
    /** Vanuatu Vatu. */
    CurrencyCode["Vuv"] = "VUV";
    /** Samoan Tala. */
    CurrencyCode["Wst"] = "WST";
    /** Central African Cfa Franc. */
    CurrencyCode["Xaf"] = "XAF";
    /** Silver (Troy Ounce). */
    CurrencyCode["Xag"] = "XAG";
    /** Gold (Troy Ounce). */
    CurrencyCode["Xau"] = "XAU";
    /** European Composite Unit. */
    CurrencyCode["Xba"] = "XBA";
    /** European Monetary Unit. */
    CurrencyCode["Xbb"] = "XBB";
    /** European Unit of Account 9. */
    CurrencyCode["Xbc"] = "XBC";
    /** European Unit of Account 17. */
    CurrencyCode["Xbd"] = "XBD";
    /** East Caribbean Dollar. */
    CurrencyCode["Xcd"] = "XCD";
    /** Special Drawing Rights. */
    CurrencyCode["Xdr"] = "XDR";
    /** UIC Franc. */
    CurrencyCode["Xfu"] = "XFU";
    /** West African Cfa Franc. */
    CurrencyCode["Xof"] = "XOF";
    /** Palladium. */
    CurrencyCode["Xpd"] = "XPD";
    /** Cfp Franc. */
    CurrencyCode["Xpf"] = "XPF";
    /** Platinum. */
    CurrencyCode["Xpt"] = "XPT";
    /** Codes specifically reserved for testing purposes. */
    CurrencyCode["Xts"] = "XTS";
    /** Yemeni Rial. */
    CurrencyCode["Yer"] = "YER";
    /** South African Rand. */
    CurrencyCode["Zar"] = "ZAR";
    /** Zambian Kwacha. */
    CurrencyCode["Zmk"] = "ZMK";
    /** Zambian Kwacha. */
    CurrencyCode["Zmw"] = "ZMW";
    /** Zimbabwean Dollar. */
    CurrencyCode["Zwd"] = "ZWD";
    /** Zimbabwean Dollar. */
    CurrencyCode["Zwl"] = "ZWL";
    /** Zimbabwean Dollar. */
    CurrencyCode["Zwn"] = "ZWN";
    /** Zimbabwean Dollar. */
    CurrencyCode["Zwr"] = "ZWR";
})(CurrencyCode || (CurrencyCode = {}));
/** Possible error codes that can be returned by EntryPointDeleteAllUserError. */
export var EntryPointDeleteAllUserErrorCode;
(function (EntryPointDeleteAllUserErrorCode) {
    /** Error code when the shop is not found. */
    EntryPointDeleteAllUserErrorCode["ShopNotFound"] = "SHOP_NOT_FOUND";
})(EntryPointDeleteAllUserErrorCode || (EntryPointDeleteAllUserErrorCode = {}));
/** Possible error codes that can be returned by EntryPointDeleteByOwnerUserError. */
export var EntryPointDeleteByOwnerUserErrorCode;
(function (EntryPointDeleteByOwnerUserErrorCode) {
    /** Error code when the entry point definition is not found from the manifest. */
    EntryPointDeleteByOwnerUserErrorCode["DefinitionNotFound"] = "DEFINITION_NOT_FOUND";
    /** Error code when the entry point to be deleted is not found. */
    EntryPointDeleteByOwnerUserErrorCode["EntryPointNotFound"] = "ENTRY_POINT_NOT_FOUND";
})(EntryPointDeleteByOwnerUserErrorCode || (EntryPointDeleteByOwnerUserErrorCode = {}));
/** Possible error codes that can be returned by EntryPointDeleteByRuleUserError. */
export var EntryPointDeleteByRuleUserErrorCode;
(function (EntryPointDeleteByRuleUserErrorCode) {
    /** Error code when the entry point definition is not found from the manifest. */
    EntryPointDeleteByRuleUserErrorCode["DefinitionNotFound"] = "DEFINITION_NOT_FOUND";
    /** Error code when the entry point to be deleted is not found. */
    EntryPointDeleteByRuleUserErrorCode["EntryPointNotFound"] = "ENTRY_POINT_NOT_FOUND";
    /** Error code when the shop is not found. */
    EntryPointDeleteByRuleUserErrorCode["ShopNotFound"] = "SHOP_NOT_FOUND";
})(EntryPointDeleteByRuleUserErrorCode || (EntryPointDeleteByRuleUserErrorCode = {}));
/** The event status enum for an entry point. */
export var EntryPointEventStatus;
(function (EntryPointEventStatus) {
    /** The active status for Mini entry point event type. */
    EntryPointEventStatus["Active"] = "ACTIVE";
    /** The post active status for Mini entry point event type. */
    EntryPointEventStatus["PostActive"] = "POST_ACTIVE";
    /** The pre active status for Mini entry point event type. */
    EntryPointEventStatus["PreActive"] = "PRE_ACTIVE";
})(EntryPointEventStatus || (EntryPointEventStatus = {}));
/** Possible error codes that can be returned by EntryPointEventStatusUpdateUserError. */
export var EntryPointEventStatusUpdateUserErrorCode;
(function (EntryPointEventStatusUpdateUserErrorCode) {
    /** Error code when the product is not found. */
    EntryPointEventStatusUpdateUserErrorCode["ProductNotFound"] = "PRODUCT_NOT_FOUND";
    /** Error code when the shop is not found. */
    EntryPointEventStatusUpdateUserErrorCode["ShopNotFound"] = "SHOP_NOT_FOUND";
})(EntryPointEventStatusUpdateUserErrorCode || (EntryPointEventStatusUpdateUserErrorCode = {}));
/** The entry point location of a Mini. */
export var EntryPointLocation;
(function (EntryPointLocation) {
    /** The Mini should be displayed on the home feed. */
    EntryPointLocation["HomeFeed"] = "HOME_FEED";
    /** The Mini should be displayed on the order confirmation page. */
    EntryPointLocation["OrderConfirmationPage"] = "ORDER_CONFIRMATION_PAGE";
    /** The Mini should be displayed on the order management page. */
    EntryPointLocation["OrderManagementPage"] = "ORDER_MANAGEMENT_PAGE";
    /** The Mini should be displayed on the product page. */
    EntryPointLocation["ProductPage"] = "PRODUCT_PAGE";
    /** The Mini should be displayed on the product details page context menu. */
    EntryPointLocation["ProductPageContextMenu"] = "PRODUCT_PAGE_CONTEXT_MENU";
    /** The Mini should be displayed on the store page. */
    EntryPointLocation["StorePage"] = "STORE_PAGE";
    /** The Mini should be displayed on the store page context menu. */
    EntryPointLocation["StorePageContextMenu"] = "STORE_PAGE_CONTEXT_MENU";
})(EntryPointLocation || (EntryPointLocation = {}));
/** Possible error codes that can be returned by EntryPointSetByOwnerUserError. */
export var EntryPointSetByOwnerUserErrorCode;
(function (EntryPointSetByOwnerUserErrorCode) {
    /** Error code when the entry point definition is not found from the manifest. */
    EntryPointSetByOwnerUserErrorCode["DefinitionNotFound"] = "DEFINITION_NOT_FOUND";
    /** Error code when an item is invalid for the home feed. */
    EntryPointSetByOwnerUserErrorCode["InvalidHomeFeedItem"] = "INVALID_HOME_FEED_ITEM";
    /** Error code when the mini is not eligible for using entry points. */
    EntryPointSetByOwnerUserErrorCode["MiniNotEligible"] = "MINI_NOT_ELIGIBLE";
    /** Error code when all entry point items are invalid. */
    EntryPointSetByOwnerUserErrorCode["NoValidItems"] = "NO_VALID_ITEMS";
    /** Error code when the product is not eligible for Shop Minis. */
    EntryPointSetByOwnerUserErrorCode["ProductNotEligible"] = "PRODUCT_NOT_ELIGIBLE";
    /** Error code when the shop does not have any Shopify App installed for the associated Shop Mini. */
    EntryPointSetByOwnerUserErrorCode["ShopifyAppNotInstalled"] = "SHOPIFY_APP_NOT_INSTALLED";
    /** Error code when the shop domain argument is not provided. */
    EntryPointSetByOwnerUserErrorCode["ShopDomainNotProvided"] = "SHOP_DOMAIN_NOT_PROVIDED";
    /** Error code when the shop is not eligible for Shop Minis. */
    EntryPointSetByOwnerUserErrorCode["ShopNotEligible"] = "SHOP_NOT_ELIGIBLE";
    /** Error code when the shop is not found. */
    EntryPointSetByOwnerUserErrorCode["ShopNotFound"] = "SHOP_NOT_FOUND";
    /** Error code when the entry point owner is not the expected type for the given entry point location. */
    EntryPointSetByOwnerUserErrorCode["UnexpectedOwnerId"] = "UNEXPECTED_OWNER_ID";
})(EntryPointSetByOwnerUserErrorCode || (EntryPointSetByOwnerUserErrorCode = {}));
/** Possible error codes that can be returned by EntryPointSetByRuleUserError. */
export var EntryPointSetByRuleUserErrorCode;
(function (EntryPointSetByRuleUserErrorCode) {
    /** The entry point definition is not found from the manifest. */
    EntryPointSetByRuleUserErrorCode["DefinitionNotFound"] = "DEFINITION_NOT_FOUND";
    /** The visibility rule is invalid. */
    EntryPointSetByRuleUserErrorCode["InvalidVisibilityRule"] = "INVALID_VISIBILITY_RULE";
    /** The mini is not eligible for using entry points. */
    EntryPointSetByRuleUserErrorCode["MiniNotEligible"] = "MINI_NOT_ELIGIBLE";
    /** Error code when the shop does not have any Shopify App installed for the associated Shop Mini. */
    EntryPointSetByRuleUserErrorCode["ShopifyAppNotInstalled"] = "SHOPIFY_APP_NOT_INSTALLED";
    /** Error code when the shop domain argument is not provided. */
    EntryPointSetByRuleUserErrorCode["ShopDomainNotProvided"] = "SHOP_DOMAIN_NOT_PROVIDED";
    /** The shop is not eligible for Shop Minis. */
    EntryPointSetByRuleUserErrorCode["ShopNotEligible"] = "SHOP_NOT_ELIGIBLE";
    /** The shop is not found. */
    EntryPointSetByRuleUserErrorCode["ShopNotFound"] = "SHOP_NOT_FOUND";
})(EntryPointSetByRuleUserErrorCode || (EntryPointSetByRuleUserErrorCode = {}));
/** The entry point type of a Mini. */
export var EntryPointType;
(function (EntryPointType) {
    /** The Mini should be displayed as an action button. */
    EntryPointType["ActionButton"] = "ACTION_BUTTON";
    /** The Mini should be displayed as a card with content. */
    EntryPointType["ContentCard"] = "CONTENT_CARD";
    /** The Mini should be displayed as a card with content. */
    EntryPointType["DefaultCard"] = "DEFAULT_CARD";
    /** The Mini should be displayed as a card with a reminder button. */
    EntryPointType["EventCard"] = "EVENT_CARD";
    /** The Mini should be displayed as a card with a reminder button. */
    EntryPointType["EventCardV2"] = "EVENT_CARD_V2";
    /** The Mini should be displayed as a collection of images. */
    EntryPointType["ImageCollection"] = "IMAGE_COLLECTION";
    /** The Mini should be displayed as a collection of images with related products. */
    EntryPointType["ImageCollectionV2"] = "IMAGE_COLLECTION_V2";
    /** The Mini should be displayed as a link. */
    EntryPointType["Link"] = "LINK";
    /** The Mini should be displayed as a product offer card. */
    EntryPointType["ProductOfferCard"] = "PRODUCT_OFFER_CARD";
    /** The Mini should be displayed as a collection of videos. */
    EntryPointType["VideoCollection"] = "VIDEO_COLLECTION";
    /** The Mini should be displayed as a collection of videos. */
    EntryPointType["VideoCollectionV2"] = "VIDEO_COLLECTION_V2";
})(EntryPointType || (EntryPointType = {}));
/** The error code for an entry point visibility rule error. */
export var EntryPointVisibilityRuleValidityErrorCode;
(function (EntryPointVisibilityRuleValidityErrorCode) {
    /** Rules cannot be applied to all fields. Please specify the field name. */
    EntryPointVisibilityRuleValidityErrorCode["FieldsUnspecified"] = "FIELDS_UNSPECIFIED";
    /** Incompatible comparator found for the given fields. */
    EntryPointVisibilityRuleValidityErrorCode["IncompatibleComparators"] = "INCOMPATIBLE_COMPARATORS";
    /** Incompatible values given to the fields. Please refer to https://shopify.dev/api/usage/search-syntax for more information. */
    EntryPointVisibilityRuleValidityErrorCode["IncompatibleQueryTypes"] = "INCOMPATIBLE_QUERY_TYPES";
    /** Rule is not parseable. Please refer to https://shopify.dev/api/usage/search-syntax for more information. */
    EntryPointVisibilityRuleValidityErrorCode["IncorrectSyntax"] = "INCORRECT_SYNTAX";
    /** Rule is too long. Please refer to https://shopify.dev/api/usage/search-syntax for more information. */
    EntryPointVisibilityRuleValidityErrorCode["MaximumLengthExceeded"] = "MAXIMUM_LENGTH_EXCEEDED";
    /** Unsupported fields given. Please refer to https://github.com/Shopify/shop-minis/blob/main/docs/ENTRY_POINT_VISIBILITY_RULE_FOR_PRODUCT_DETAILS_PAGES.md for more information. */
    EntryPointVisibilityRuleValidityErrorCode["UnsupportedFields"] = "UNSUPPORTED_FIELDS";
})(EntryPointVisibilityRuleValidityErrorCode || (EntryPointVisibilityRuleValidityErrorCode = {}));
/** The validity status of an entry point visibility rule. */
export var EntryPointVisibilityRuleValidityStatus;
(function (EntryPointVisibilityRuleValidityStatus) {
    /** The rule is not valid. */
    EntryPointVisibilityRuleValidityStatus["Invalid"] = "INVALID";
    /** The rule is valid. */
    EntryPointVisibilityRuleValidityStatus["Valid"] = "VALID";
})(EntryPointVisibilityRuleValidityStatus || (EntryPointVisibilityRuleValidityStatus = {}));
/** The event status of the Mini event card entry point. */
export var EventCardV2EntryPointEventStatus;
(function (EventCardV2EntryPointEventStatus) {
    /** The active status for Mini entry point event type. */
    EventCardV2EntryPointEventStatus["Active"] = "ACTIVE";
    /** The post active status for Mini entry point event type. */
    EventCardV2EntryPointEventStatus["PostActive"] = "POST_ACTIVE";
    /** The pre active status for Mini entry point event type. */
    EventCardV2EntryPointEventStatus["PreActive"] = "PRE_ACTIVE";
})(EventCardV2EntryPointEventStatus || (EventCardV2EntryPointEventStatus = {}));
/** An HTTP request method. */
export var HttpRequestMethod;
(function (HttpRequestMethod) {
    /** The DELETE method. */
    HttpRequestMethod["Delete"] = "DELETE";
    /** The GET method. */
    HttpRequestMethod["Get"] = "GET";
    /** The PATCH method. */
    HttpRequestMethod["Patch"] = "PATCH";
    /** The POST method. */
    HttpRequestMethod["Post"] = "POST";
    /** The PUT method. */
    HttpRequestMethod["Put"] = "PUT";
})(HttpRequestMethod || (HttpRequestMethod = {}));
/** The layout of the Mini Image Collection entry point. */
export var ImageCollectionEntryPointLayout;
(function (ImageCollectionEntryPointLayout) {
    /** The layout is a carousel. */
    ImageCollectionEntryPointLayout["Carousel"] = "CAROUSEL";
    /** The layout is a grid. */
    ImageCollectionEntryPointLayout["Grid"] = "GRID";
})(ImageCollectionEntryPointLayout || (ImageCollectionEntryPointLayout = {}));
/** Possible error codes that can be returned by MiniCreateUserError. */
export var MiniCreateUserErrorCode;
(function (MiniCreateUserErrorCode) {
    /** Error code when the handle is not unique. */
    MiniCreateUserErrorCode["HandleNotUnique"] = "HANDLE_NOT_UNIQUE";
    /** Error code when the organization has too many Minis. */
    MiniCreateUserErrorCode["TooManyMinis"] = "TOO_MANY_MINIS";
    /** Error code when verification failed. */
    MiniCreateUserErrorCode["VerificationFailed"] = "VERIFICATION_FAILED";
})(MiniCreateUserErrorCode || (MiniCreateUserErrorCode = {}));
/** Possible error codes that can be returned by MiniLinkAppUserError. */
export var MiniLinkAppUserErrorCode;
(function (MiniLinkAppUserErrorCode) {
    /** Error code when the app is already linked to a Mini. */
    MiniLinkAppUserErrorCode["AppAlreadyLinked"] = "APP_ALREADY_LINKED";
    /** Error code when the primary app is already set. */
    MiniLinkAppUserErrorCode["PrimaryAppAlreadySet"] = "PRIMARY_APP_ALREADY_SET";
    /** Error code when verification failed. */
    MiniLinkAppUserErrorCode["VerificationFailed"] = "VERIFICATION_FAILED";
})(MiniLinkAppUserErrorCode || (MiniLinkAppUserErrorCode = {}));
/** Possible error codes that can be returned by MiniUnlinkAppUserError. */
export var MiniUnlinkAppUserErrorCode;
(function (MiniUnlinkAppUserErrorCode) {
    /** Error code when the app is not linked to the Mini. */
    MiniUnlinkAppUserErrorCode["AppNotLinked"] = "APP_NOT_LINKED";
    /** Error code when the app is used as the production app. */
    MiniUnlinkAppUserErrorCode["CannotUnlinkProductionApp"] = "CANNOT_UNLINK_PRODUCTION_APP";
})(MiniUnlinkAppUserErrorCode || (MiniUnlinkAppUserErrorCode = {}));
/** Possible error codes that can be returned by NotificationTriggerUserError. */
export var NotificationTriggerUserErrorCode;
(function (NotificationTriggerUserErrorCode) {
    /** Error code when the scoped entity is not found. */
    NotificationTriggerUserErrorCode["ScopedEntityNotFound"] = "SCOPED_ENTITY_NOT_FOUND";
    /** Error code when the shop is not found. */
    NotificationTriggerUserErrorCode["ShopNotFound"] = "SHOP_NOT_FOUND";
    /** Error code when the template handle is not found in the Mini's manifest. */
    NotificationTriggerUserErrorCode["TemplateNotFound"] = "TEMPLATE_NOT_FOUND";
    /** Error code when the template's topic_handle is invalid. */
    NotificationTriggerUserErrorCode["TopicNotFound"] = "TOPIC_NOT_FOUND";
    /** Error code when scopedEntityId object does not match topic scope. */
    NotificationTriggerUserErrorCode["TopicScopeNotMatchingEntity"] = "TOPIC_SCOPE_NOT_MATCHING_ENTITY";
})(NotificationTriggerUserErrorCode || (NotificationTriggerUserErrorCode = {}));
/** The eligibility status of a product. */
export var ProductEligibilityStatus;
(function (ProductEligibilityStatus) {
    /** The product is eligible to appear in Shop. */
    ProductEligibilityStatus["Eligible"] = "ELIGIBLE";
    /** The product is ineligible to appear in Shop. */
    ProductEligibilityStatus["Ineligible"] = "INELIGIBLE";
})(ProductEligibilityStatus || (ProductEligibilityStatus = {}));
/** Possible error codes that can be returned by ProxiesSetUserError. */
export var ProxiesSetUserErrorCode;
(function (ProxiesSetUserErrorCode) {
    /** Error code when the proxy configuration is invalid. */
    ProxiesSetUserErrorCode["Invalid"] = "INVALID";
})(ProxiesSetUserErrorCode || (ProxiesSetUserErrorCode = {}));
/** Possible error codes that can be returned by ReportDownloadUserError. */
export var ReportDownloadUserErrorCode;
(function (ReportDownloadUserErrorCode) {
    /** The requested report could not be found. */
    ReportDownloadUserErrorCode["NotFound"] = "NOT_FOUND";
})(ReportDownloadUserErrorCode || (ReportDownloadUserErrorCode = {}));
/** The type of report to retrieve. */
export var ReportTypeEnum;
(function (ReportTypeEnum) {
    /** Content impressions report. */
    ReportTypeEnum["ContentImpressions"] = "CONTENT_IMPRESSIONS";
    /** Product impressions report. */
    ReportTypeEnum["ProductImpressions"] = "PRODUCT_IMPRESSIONS";
    /** Sales report. */
    ReportTypeEnum["Sales"] = "SALES";
    /** Usage statistics report. */
    ReportTypeEnum["UsageStats"] = "USAGE_STATS";
})(ReportTypeEnum || (ReportTypeEnum = {}));
/** Possible error codes that can be returned by SecretDeleteUserError. */
export var SecretDeleteUserErrorCode;
(function (SecretDeleteUserErrorCode) {
    /** Error code when the secret could not be found. */
    SecretDeleteUserErrorCode["NotFound"] = "NOT_FOUND";
})(SecretDeleteUserErrorCode || (SecretDeleteUserErrorCode = {}));
/** The eligibility status of a shop. */
export var ShopEligibilityStatus;
(function (ShopEligibilityStatus) {
    /** The shop is eligible to appear in Shop. */
    ShopEligibilityStatus["Eligible"] = "ELIGIBLE";
    /** The shop is ineligible to appear in Shop. */
    ShopEligibilityStatus["Ineligible"] = "INELIGIBLE";
})(ShopEligibilityStatus || (ShopEligibilityStatus = {}));
/** Possible error codes that can be returned by SubmissionCancelUserError. */
export var SubmissionCancelUserErrorCode;
(function (SubmissionCancelUserErrorCode) {
    /** Error code when the submission is not found. */
    SubmissionCancelUserErrorCode["NotFound"] = "NOT_FOUND";
    /** Error code when the submission does not have a pending status. */
    SubmissionCancelUserErrorCode["NotPending"] = "NOT_PENDING";
})(SubmissionCancelUserErrorCode || (SubmissionCancelUserErrorCode = {}));
/** Possible error codes that can be returned by SubmissionCreateUserError. */
export var SubmissionCreateUserErrorCode;
(function (SubmissionCreateUserErrorCode) {
    /** Error code when there is already a pending submission. */
    SubmissionCreateUserErrorCode["AlreadyPendingSubmission"] = "ALREADY_PENDING_SUBMISSION";
    /** Error code when the file does not exist in the storage service. */
    SubmissionCreateUserErrorCode["FileNotFound"] = "FILE_NOT_FOUND";
    /** Error code when the upload ID is not valid. Either it is does not point to a blob or is not signed correctly. */
    SubmissionCreateUserErrorCode["UploadNotFound"] = "UPLOAD_NOT_FOUND";
})(SubmissionCreateUserErrorCode || (SubmissionCreateUserErrorCode = {}));
/** The status of a submission. */
export var SubmissionStatus;
(function (SubmissionStatus) {
    /** The submission has been approved. */
    SubmissionStatus["Approved"] = "APPROVED";
    /** The submission has been cancelled. */
    SubmissionStatus["Cancelled"] = "CANCELLED";
    /** The submission is pending review. */
    SubmissionStatus["Pending"] = "PENDING";
    /** The submission has been rejected. */
    SubmissionStatus["Rejected"] = "REJECTED";
})(SubmissionStatus || (SubmissionStatus = {}));
/** Possible error codes that can be returned by SubmissionUploadCreateUserError. */
export var SubmissionUploadCreateUserErrorCode;
(function (SubmissionUploadCreateUserErrorCode) {
    /** Error code when an invalid checksum is provided. */
    SubmissionUploadCreateUserErrorCode["InvalidChecksum"] = "INVALID_CHECKSUM";
    /** Error code when the file size is less than 0 or exceeds 5242880 bytes. */
    SubmissionUploadCreateUserErrorCode["InvalidFileSize"] = "INVALID_FILE_SIZE";
    /** Error code when an invalid MIME type is provided. */
    SubmissionUploadCreateUserErrorCode["InvalidMimeType"] = "INVALID_MIME_TYPE";
})(SubmissionUploadCreateUserErrorCode || (SubmissionUploadCreateUserErrorCode = {}));
/** Possible error codes that can be returned by UserMetafieldDefinitionCreateUserError. */
export var UserMetafieldDefinitionCreateUserErrorCode;
(function (UserMetafieldDefinitionCreateUserErrorCode) {
    /** The definition already exists. */
    UserMetafieldDefinitionCreateUserErrorCode["DefinitionAlreadyExists"] = "DEFINITION_ALREADY_EXISTS";
})(UserMetafieldDefinitionCreateUserErrorCode || (UserMetafieldDefinitionCreateUserErrorCode = {}));
/** Possible error codes that can be returned by UserMetafieldDefinitionDeleteUserError. */
export var UserMetafieldDefinitionDeleteUserErrorCode;
(function (UserMetafieldDefinitionDeleteUserErrorCode) {
    /** Returned when the definition was not found. */
    UserMetafieldDefinitionDeleteUserErrorCode["DefinitionNotFound"] = "DEFINITION_NOT_FOUND";
})(UserMetafieldDefinitionDeleteUserErrorCode || (UserMetafieldDefinitionDeleteUserErrorCode = {}));
/** The state of the user. */
export var UserState;
(function (UserState) {
    /** User has not verified by Shop. */
    UserState["Guest"] = "GUEST";
    /** User has been verified by Shop. */
    UserState["Verified"] = "VERIFIED";
})(UserState || (UserState = {}));
/** Possible error codes that can be returned by UserTokenVerifyUserError. */
export var UserTokenVerifyUserErrorCode;
(function (UserTokenVerifyUserErrorCode) {
    /** The token is for a different mini. */
    UserTokenVerifyUserErrorCode["InvalidMini"] = "INVALID_MINI";
    /** The token has expired. */
    UserTokenVerifyUserErrorCode["TokenExpired"] = "TOKEN_EXPIRED";
    /** The token is invalid. */
    UserTokenVerifyUserErrorCode["TokenInvalid"] = "TOKEN_INVALID";
    /** The user was not found. */
    UserTokenVerifyUserErrorCode["UserNotFound"] = "USER_NOT_FOUND";
})(UserTokenVerifyUserErrorCode || (UserTokenVerifyUserErrorCode = {}));
export const CancelSubmissionDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'CancelSubmission' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'reference' },
                    },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'submissionCancel' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'reference' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'reference' },
                                },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'submission' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'reference' } },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'description' },
                                            },
                                            { kind: 'Field', name: { kind: 'Name', value: 'status' } },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'submittedAt' },
                                            },
                                        ],
                                    },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userErrors' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'field' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const CreateSubmissionDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'CreateSubmission' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'description' },
                    },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'uploadId' } },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
                    },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'submissionCreate' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'description' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'description' },
                                },
                            },
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'uploadId' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'uploadId' },
                                },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'submission' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'reference' } },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'description' },
                                            },
                                            { kind: 'Field', name: { kind: 'Name', value: 'status' } },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'submittedAt' },
                                            },
                                        ],
                                    },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userErrors' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'field' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const CreateUploadDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'CreateUpload' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'filename' } },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'fileSize' } },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
                    },
                },
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'checksum' } },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'mimeType' } },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'submissionUploadCreate' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'input' },
                                value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                        {
                                            kind: 'ObjectField',
                                            name: { kind: 'Name', value: 'filename' },
                                            value: {
                                                kind: 'Variable',
                                                name: { kind: 'Name', value: 'filename' },
                                            },
                                        },
                                        {
                                            kind: 'ObjectField',
                                            name: { kind: 'Name', value: 'fileSize' },
                                            value: {
                                                kind: 'Variable',
                                                name: { kind: 'Name', value: 'fileSize' },
                                            },
                                        },
                                        {
                                            kind: 'ObjectField',
                                            name: { kind: 'Name', value: 'checksum' },
                                            value: {
                                                kind: 'Variable',
                                                name: { kind: 'Name', value: 'checksum' },
                                            },
                                        },
                                        {
                                            kind: 'ObjectField',
                                            name: { kind: 'Name', value: 'mimeType' },
                                            value: {
                                                kind: 'Variable',
                                                name: { kind: 'Name', value: 'mimeType' },
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'upload' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'headers' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                                        ],
                                    },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userErrors' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'field' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const LinkedAppsDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'LinkedApps' },
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'mini' },
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'productionShopifyApp' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                                        ],
                                    },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'developmentShopifyApps' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const SubmissionsDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'Submissions' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'first' } },
                    type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'submissions' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'first' },
                                value: { kind: 'Variable', name: { kind: 'Name', value: 'first' } },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'nodes' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'reference' } },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'description' },
                                            },
                                            { kind: 'Field', name: { kind: 'Name', value: 'status' } },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'submittedAt' },
                                            },
                                        ],
                                    },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'pageInfo' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'hasNextPage' },
                                            },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'hasPreviousPage' },
                                            },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'startCursor' },
                                            },
                                            { kind: 'Field', name: { kind: 'Name', value: 'endCursor' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const MiniCreateDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'MiniCreate' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'name' } },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'organizationId' },
                    },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
                    },
                },
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'partnersAccessToken' },
                    },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'miniCreate' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'name' },
                                value: { kind: 'Variable', name: { kind: 'Name', value: 'name' } },
                            },
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'organizationId' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'organizationId' },
                                },
                            },
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'partnersAccessToken' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'partnersAccessToken' },
                                },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'mini' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'handle' } },
                                        ],
                                    },
                                },
                                { kind: 'Field', name: { kind: 'Name', value: 'token' } },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userErrors' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'field' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const MiniLinkAppDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'MiniLinkApp' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'appApiKey' },
                    },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'partnersAccessToken' },
                    },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'primary' } },
                    type: { kind: 'NamedType', name: { kind: 'Name', value: 'Boolean' } },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'miniLinkApp' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'appApiKey' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'appApiKey' },
                                },
                            },
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'partnersAccessToken' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'partnersAccessToken' },
                                },
                            },
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'primary' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'primary' },
                                },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'mini' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'handle' } },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'productionShopifyAppId' },
                                            },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'developmentShopifyAppIds' },
                                            },
                                        ],
                                    },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userErrors' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'field' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const MiniUnlinkAppDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'MiniUnlinkApp' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'appId' } },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
                    },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'miniUnlinkApp' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'appId' },
                                value: { kind: 'Variable', name: { kind: 'Name', value: 'appId' } },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'mini' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'handle' } },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'productionShopifyAppId' },
                                            },
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'developmentShopifyAppIds' },
                                            },
                                        ],
                                    },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userErrors' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'field' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const MiniDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'Mini' },
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'mini' },
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                { kind: 'Field', name: { kind: 'Name', value: 'handle' } },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'productionShopifyAppId' },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'developmentShopifyAppIds' },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const ProxiesDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'Proxies' },
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'proxies' },
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                { kind: 'Field', name: { kind: 'Name', value: 'allowedMethods' } },
                                { kind: 'Field', name: { kind: 'Name', value: 'appendedHeaders' } },
                                { kind: 'Field', name: { kind: 'Name', value: 'bodyJsonSchema' } },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'targetUrlPattern' },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userRateLimitInterval' },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userRateLimitRequests' },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const ProxiesSetDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'ProxiesSet' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'proxies' } },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'ListType',
                            type: {
                                kind: 'NonNullType',
                                type: {
                                    kind: 'NamedType',
                                    name: { kind: 'Name', value: 'ProxyInput' },
                                },
                            },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'proxiesSet' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'proxies' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'proxies' },
                                },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'proxies' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'targetUrlPattern' },
                                            },
                                        ],
                                    },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userErrors' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const SecretDeleteDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'SecretDelete' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'secretDelete' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'key' },
                                value: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userErrors' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'field' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const SecretSetDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'SecretSet' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'secretValue' },
                    },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'secretSet' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'key' },
                                value: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
                            },
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'value' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'secretValue' },
                                },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'secret' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'key' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const SecretsDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'Secrets' },
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'secrets' },
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [{ kind: 'Field', name: { kind: 'Name', value: 'key' } }],
                        },
                    },
                ],
            },
        },
    ],
};
export const UserMetafieldDefinitionCreateDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'UserMetafieldDefinitionCreate' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'definition' },
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: { kind: 'Name', value: 'UserMetafieldDefinitionCreateInput' },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'userMetafieldDefinitionCreate' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'definition' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'definition' },
                                },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'createdDefinition' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'description' },
                                            },
                                            { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'key' } },
                                        ],
                                    },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userErrors' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'field' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const UserMetafieldDefinitionDeleteDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'UserMetafieldDefinitionDelete' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
                    type: {
                        kind: 'NonNullType',
                        type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
                    },
                },
            ],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'userMetafieldDefinitionDelete' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'identifier' },
                                value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                        {
                                            kind: 'ObjectField',
                                            name: { kind: 'Name', value: 'key' },
                                            value: {
                                                kind: 'Variable',
                                                name: { kind: 'Name', value: 'key' },
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'deletedDefinition' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'key' } },
                                        ],
                                    },
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'userErrors' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'field' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
export const UserMetafieldDefinitionsDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'UserMetafieldDefinitions' },
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'userMetafieldDefinitions' },
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'nodes' },
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: { kind: 'Name', value: 'description' },
                                            },
                                            { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'key' } },
                                            { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
//# sourceMappingURL=graphql.js.map
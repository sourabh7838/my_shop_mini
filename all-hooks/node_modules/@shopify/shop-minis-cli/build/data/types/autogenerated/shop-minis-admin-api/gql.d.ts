import * as types from './graphql.js';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
declare const documents: {
    '\n  mutation CancelSubmission($reference: String!) {\n    submissionCancel(reference: $reference) {\n      submission {\n        reference\n        description\n        status\n        submittedAt\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n': DocumentNode<types.CancelSubmissionMutation, types.Exact<{
        reference: string;
    }>>;
    '\n  mutation CreateSubmission($description: String!, $uploadId: ID!) {\n    submissionCreate(description: $description, uploadId: $uploadId) {\n      submission {\n        reference\n        description\n        status\n        submittedAt\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n': DocumentNode<types.CreateSubmissionMutation, types.Exact<{
        description: string;
        uploadId: string;
    }>>;
    '\n  mutation CreateUpload(\n    $filename: String!\n    $fileSize: Int!\n    $checksum: String!\n    $mimeType: String!\n  ) {\n    submissionUploadCreate(\n      input: {\n        filename: $filename\n        fileSize: $fileSize\n        checksum: $checksum\n        mimeType: $mimeType\n      }\n    ) {\n      upload {\n        url\n        headers\n        id\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n': DocumentNode<types.CreateUploadMutation, types.Exact<{
        filename: string;
        fileSize: number;
        checksum: string;
        mimeType: string;
    }>>;
    '\n  query LinkedApps {\n    mini {\n      productionShopifyApp {\n        id\n        title\n      }\n      developmentShopifyApps {\n        id\n        title\n      }\n    }\n  }\n': DocumentNode<types.LinkedAppsQuery, types.Exact<{
        [key: string]: never;
    }>>;
    '\n  query Submissions($first: Int) {\n    submissions(first: $first) {\n      nodes {\n        reference\n        description\n        status\n        submittedAt\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n': DocumentNode<types.SubmissionsQuery, types.Exact<{
        first?: types.InputMaybe<number> | undefined;
    }>>;
    '\n  mutation MiniCreate(\n    $name: String!\n    $organizationId: ID!\n    $partnersAccessToken: String!\n  ) {\n    miniCreate(\n      name: $name\n      organizationId: $organizationId\n      partnersAccessToken: $partnersAccessToken\n    ) {\n      mini {\n        handle\n      }\n      token\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n': DocumentNode<types.MiniCreateMutation, types.Exact<{
        name: string;
        organizationId: string;
        partnersAccessToken: string;
    }>>;
    '\n  mutation MiniLinkApp(\n    $appApiKey: String!\n    $partnersAccessToken: String!\n    $primary: Boolean\n  ) {\n    miniLinkApp(\n      appApiKey: $appApiKey\n      partnersAccessToken: $partnersAccessToken\n      primary: $primary\n    ) {\n      mini {\n        handle\n        productionShopifyAppId\n        developmentShopifyAppIds\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n': DocumentNode<types.MiniLinkAppMutation, types.Exact<{
        appApiKey: string;
        partnersAccessToken: string;
        primary?: types.InputMaybe<boolean> | undefined;
    }>>;
    '\n  mutation MiniUnlinkApp($appId: ID!) {\n    miniUnlinkApp(appId: $appId) {\n      mini {\n        handle\n        productionShopifyAppId\n        developmentShopifyAppIds\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n': DocumentNode<types.MiniUnlinkAppMutation, types.Exact<{
        appId: string;
    }>>;
    '\n  query Mini {\n    mini {\n      handle\n      productionShopifyAppId\n      developmentShopifyAppIds\n    }\n  }\n': DocumentNode<types.MiniQuery, types.Exact<{
        [key: string]: never;
    }>>;
    '\n  query Proxies {\n    proxies {\n      allowedMethods\n      appendedHeaders\n      bodyJsonSchema\n      targetUrlPattern\n      userRateLimitInterval\n      userRateLimitRequests\n    }\n  }\n': DocumentNode<types.ProxiesQuery, types.Exact<{
        [key: string]: never;
    }>>;
    '\n  mutation ProxiesSet($proxies: [ProxyInput!]!) {\n    proxiesSet(proxies: $proxies) {\n      proxies {\n        targetUrlPattern\n      }\n      userErrors {\n        code\n        message\n      }\n    }\n  }\n': DocumentNode<types.ProxiesSetMutation, types.Exact<{
        proxies: types.ProxyInput | types.ProxyInput[];
    }>>;
    '\n  mutation SecretDelete($key: String!) {\n    secretDelete(key: $key) {\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n': DocumentNode<types.SecretDeleteMutation, types.Exact<{
        key: string;
    }>>;
    '\n  mutation SecretSet($key: String!, $secretValue: String!) {\n    secretSet(key: $key, value: $secretValue) {\n      secret {\n        key\n      }\n    }\n  }\n': DocumentNode<types.SecretSetMutation, types.Exact<{
        key: string;
        secretValue: string;
    }>>;
    '\n  query Secrets {\n    secrets {\n      key\n    }\n  }\n': DocumentNode<types.SecretsQuery, types.Exact<{
        [key: string]: never;
    }>>;
    '\n  mutation UserMetafieldDefinitionCreate(\n    $definition: UserMetafieldDefinitionCreateInput!\n  ) {\n    userMetafieldDefinitionCreate(definition: $definition) {\n      createdDefinition {\n        description\n        name\n        key\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n': DocumentNode<types.UserMetafieldDefinitionCreateMutation, types.Exact<{
        definition: types.UserMetafieldDefinitionCreateInput;
    }>>;
    '\n  mutation UserMetafieldDefinitionDelete($key: String!) {\n    userMetafieldDefinitionDelete(identifier: {key: $key}) {\n      deletedDefinition {\n        key\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n': DocumentNode<types.UserMetafieldDefinitionDeleteMutation, types.Exact<{
        key: string;
    }>>;
    '\n  query UserMetafieldDefinitions {\n    userMetafieldDefinitions {\n      nodes {\n        description\n        name\n        key\n        type\n      }\n    }\n  }\n': DocumentNode<types.UserMetafieldDefinitionsQuery, types.Exact<{
        [key: string]: never;
    }>>;
};
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export declare function graphql(source: string): unknown;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation CancelSubmission($reference: String!) {\n    submissionCancel(reference: $reference) {\n      submission {\n        reference\n        description\n        status\n        submittedAt\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation CancelSubmission($reference: String!) {\n    submissionCancel(reference: $reference) {\n      submission {\n        reference\n        description\n        status\n        submittedAt\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation CreateSubmission($description: String!, $uploadId: ID!) {\n    submissionCreate(description: $description, uploadId: $uploadId) {\n      submission {\n        reference\n        description\n        status\n        submittedAt\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation CreateSubmission($description: String!, $uploadId: ID!) {\n    submissionCreate(description: $description, uploadId: $uploadId) {\n      submission {\n        reference\n        description\n        status\n        submittedAt\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation CreateUpload(\n    $filename: String!\n    $fileSize: Int!\n    $checksum: String!\n    $mimeType: String!\n  ) {\n    submissionUploadCreate(\n      input: {\n        filename: $filename\n        fileSize: $fileSize\n        checksum: $checksum\n        mimeType: $mimeType\n      }\n    ) {\n      upload {\n        url\n        headers\n        id\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation CreateUpload(\n    $filename: String!\n    $fileSize: Int!\n    $checksum: String!\n    $mimeType: String!\n  ) {\n    submissionUploadCreate(\n      input: {\n        filename: $filename\n        fileSize: $fileSize\n        checksum: $checksum\n        mimeType: $mimeType\n      }\n    ) {\n      upload {\n        url\n        headers\n        id\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  query LinkedApps {\n    mini {\n      productionShopifyApp {\n        id\n        title\n      }\n      developmentShopifyApps {\n        id\n        title\n      }\n    }\n  }\n'): (typeof documents)['\n  query LinkedApps {\n    mini {\n      productionShopifyApp {\n        id\n        title\n      }\n      developmentShopifyApps {\n        id\n        title\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  query Submissions($first: Int) {\n    submissions(first: $first) {\n      nodes {\n        reference\n        description\n        status\n        submittedAt\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n'): (typeof documents)['\n  query Submissions($first: Int) {\n    submissions(first: $first) {\n      nodes {\n        reference\n        description\n        status\n        submittedAt\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation MiniCreate(\n    $name: String!\n    $organizationId: ID!\n    $partnersAccessToken: String!\n  ) {\n    miniCreate(\n      name: $name\n      organizationId: $organizationId\n      partnersAccessToken: $partnersAccessToken\n    ) {\n      mini {\n        handle\n      }\n      token\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation MiniCreate(\n    $name: String!\n    $organizationId: ID!\n    $partnersAccessToken: String!\n  ) {\n    miniCreate(\n      name: $name\n      organizationId: $organizationId\n      partnersAccessToken: $partnersAccessToken\n    ) {\n      mini {\n        handle\n      }\n      token\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation MiniLinkApp(\n    $appApiKey: String!\n    $partnersAccessToken: String!\n    $primary: Boolean\n  ) {\n    miniLinkApp(\n      appApiKey: $appApiKey\n      partnersAccessToken: $partnersAccessToken\n      primary: $primary\n    ) {\n      mini {\n        handle\n        productionShopifyAppId\n        developmentShopifyAppIds\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation MiniLinkApp(\n    $appApiKey: String!\n    $partnersAccessToken: String!\n    $primary: Boolean\n  ) {\n    miniLinkApp(\n      appApiKey: $appApiKey\n      partnersAccessToken: $partnersAccessToken\n      primary: $primary\n    ) {\n      mini {\n        handle\n        productionShopifyAppId\n        developmentShopifyAppIds\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation MiniUnlinkApp($appId: ID!) {\n    miniUnlinkApp(appId: $appId) {\n      mini {\n        handle\n        productionShopifyAppId\n        developmentShopifyAppIds\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation MiniUnlinkApp($appId: ID!) {\n    miniUnlinkApp(appId: $appId) {\n      mini {\n        handle\n        productionShopifyAppId\n        developmentShopifyAppIds\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  query Mini {\n    mini {\n      handle\n      productionShopifyAppId\n      developmentShopifyAppIds\n    }\n  }\n'): (typeof documents)['\n  query Mini {\n    mini {\n      handle\n      productionShopifyAppId\n      developmentShopifyAppIds\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  query Proxies {\n    proxies {\n      allowedMethods\n      appendedHeaders\n      bodyJsonSchema\n      targetUrlPattern\n      userRateLimitInterval\n      userRateLimitRequests\n    }\n  }\n'): (typeof documents)['\n  query Proxies {\n    proxies {\n      allowedMethods\n      appendedHeaders\n      bodyJsonSchema\n      targetUrlPattern\n      userRateLimitInterval\n      userRateLimitRequests\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation ProxiesSet($proxies: [ProxyInput!]!) {\n    proxiesSet(proxies: $proxies) {\n      proxies {\n        targetUrlPattern\n      }\n      userErrors {\n        code\n        message\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation ProxiesSet($proxies: [ProxyInput!]!) {\n    proxiesSet(proxies: $proxies) {\n      proxies {\n        targetUrlPattern\n      }\n      userErrors {\n        code\n        message\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation SecretDelete($key: String!) {\n    secretDelete(key: $key) {\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation SecretDelete($key: String!) {\n    secretDelete(key: $key) {\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation SecretSet($key: String!, $secretValue: String!) {\n    secretSet(key: $key, value: $secretValue) {\n      secret {\n        key\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation SecretSet($key: String!, $secretValue: String!) {\n    secretSet(key: $key, value: $secretValue) {\n      secret {\n        key\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  query Secrets {\n    secrets {\n      key\n    }\n  }\n'): (typeof documents)['\n  query Secrets {\n    secrets {\n      key\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation UserMetafieldDefinitionCreate(\n    $definition: UserMetafieldDefinitionCreateInput!\n  ) {\n    userMetafieldDefinitionCreate(definition: $definition) {\n      createdDefinition {\n        description\n        name\n        key\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation UserMetafieldDefinitionCreate(\n    $definition: UserMetafieldDefinitionCreateInput!\n  ) {\n    userMetafieldDefinitionCreate(definition: $definition) {\n      createdDefinition {\n        description\n        name\n        key\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  mutation UserMetafieldDefinitionDelete($key: String!) {\n    userMetafieldDefinitionDelete(identifier: {key: $key}) {\n      deletedDefinition {\n        key\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'): (typeof documents)['\n  mutation UserMetafieldDefinitionDelete($key: String!) {\n    userMetafieldDefinitionDelete(identifier: {key: $key}) {\n      deletedDefinition {\n        key\n      }\n      userErrors {\n        code\n        message\n        field\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: '\n  query UserMetafieldDefinitions {\n    userMetafieldDefinitions {\n      nodes {\n        description\n        name\n        key\n        type\n      }\n    }\n  }\n'): (typeof documents)['\n  query UserMetafieldDefinitions {\n    userMetafieldDefinitions {\n      nodes {\n        description\n        name\n        key\n        type\n      }\n    }\n  }\n'];
export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
export {};

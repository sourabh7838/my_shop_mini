import { ReportTypeEnum } from './types/autogenerated/shop-minis-admin-api/graphql.js';
import { client } from './gql-client.js';
/**
 * Format a SCREAMING_SNAKE_CASE string into a readable title
 * @param str The string to format
 * @returns The formatted string
 */
function formatTitle(str) {
    // For SCREAMING_SNAKE_CASE
    return str
        .split('_')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
        .join(' ');
}
/**
 * Get available report types
 * @returns List of available report types
 */
export async function getReportTypes() {
    // Get all values from the ReportTypeEnum
    return Object.values(ReportTypeEnum).map(reportType => ({
        id: reportType,
        title: formatTitle(reportType),
    }));
}
// Using string literal instead of graphql tag to avoid operation name extraction issues
const reportDatesQuery = `
  query ReportDates($name: ReportTypeEnum!) {
    reports(name: $name, first: 100) {
      nodes {
        date
        name
      }
    }
  }
`;
const reportDownloadQuery = `
  mutation ReportDownload($date: ISO8601Date!, $name: ReportTypeEnum!) {
    reportDownload(date: $date, name: $name) {
      expiresAt
      url
      userErrors {
        code
        field
        message
      }
    }
  }
`;
/**
 * Get available dates for a specific report type using the GraphQL API
 * @param reportType The report type enum value
 * @returns List of available dates
 */
export async function getReportDates(reportType) {
    // Call the GraphQL API to get available dates for the report type
    const response = await client.request(reportDatesQuery, {
        name: reportType,
    });
    // Transform the response into the expected format
    if (response.reports?.nodes) {
        return response.reports.nodes.map(report => ({
            date: report.date,
        }));
    }
    return [];
}
/**
 * Get the download URL for a specific report and date
 * @param reportType The report type enum value
 * @param date The date for the report (YYYY-MM-DD)
 * @returns The download URL for the report
 */
export async function getReportDownloadUrl(reportType, date) {
    // Call the GraphQL API to get the report download URL
    const response = await client.request(reportDownloadQuery, {
        name: reportType,
        date,
    });
    // Check for user errors
    if (response.reportDownload?.userErrors &&
        response.reportDownload.userErrors.length > 0) {
        const error = response.reportDownload.userErrors[0];
        throw new Error(`API Error: ${error.message}`);
    }
    // Return the report URL
    if (response.reportDownload?.url) {
        return response.reportDownload.url;
    }
    throw new Error('No download URL available for this report');
}
//# sourceMappingURL=reports.js.map
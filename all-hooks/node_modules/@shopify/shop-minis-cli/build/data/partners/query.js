import { partnersRequest,
//   partnersRequestDoc,
 } from '@shopify/cli-kit/node/api/partners';
import { ensureAuthenticatedPartners } from '@shopify/cli-kit/node/session';
import { gql } from 'graphql-request';
import { OrganizationSource, } from './types.js';
let _session;
let _currentAccountInformation;
const session = async () => {
    if (!_session) {
        const { token, userId } = await ensureAuthenticatedPartners();
        // eslint-disable-next-line require-atomic-updates
        _session = {
            token,
            accountInfo: { type: 'UnknownAccount' },
            userId,
        };
        const accountInfo = await fetchCurrentAccountInformation();
        // eslint-disable-next-line require-atomic-updates
        _session = { token, accountInfo, userId };
    }
    return _session;
};
export const token = async () => {
    return (await session()).token;
};
const request = async (query, variables = undefined) => {
    return partnersRequest(query, await token(), variables);
};
export const CurrentAccountInfoQuery = gql `
  query currentAccountInfo {
    currentAccountInfo {
      __typename
      ... on ServiceAccount {
        orgName
      }
      ... on UserAccount {
        email
      }
    }
  }
`;
export const AllOrgsQuery = gql `
  query AllOrgs {
    organizations(first: 200) {
      nodes {
        __typename
        id
        businessName
      }
      __typename
    }
  }
`;
export async function fetchCurrentAccountInformation() {
    const response = await request(CurrentAccountInfoQuery);
    _currentAccountInformation = mapAccountInfo(response.currentAccountInfo);
    return _currentAccountInformation;
}
export async function fetchAllOrgs() {
    try {
        const response = await request(AllOrgsQuery);
        return response.organizations.nodes.map(org => ({
            id: org.id,
            businessName: org.businessName,
            source: OrganizationSource.Partners,
        }));
    }
    catch (error) {
        if (error.statusCode === 404) {
            return [];
        }
        else {
            throw error;
        }
    }
}
export const FindOrganizationQuery = gql `
  query FindOrganization($id: ID!, $title: String) {
    organizations(id: $id, first: 1) {
      nodes {
        id
        businessName
        apps(first: 25, title: $title) {
          pageInfo {
            hasNextPage
          }
          nodes {
            id
            title
            apiKey
          }
        }
      }
    }
  }
`;
export const fetchAppsForOrg = async (organizationId) => {
    const params = { id: organizationId };
    const result = await request(FindOrganizationQuery, params);
    return {
        apps: result.organizations.nodes[0].apps.nodes,
        hasMorePages: result.organizations.nodes[0].apps.pageInfo.hasNextPage,
    };
};
function mapAccountInfo(accountInfo) {
    if (accountInfo.__typename === 'UserAccount') {
        return {
            type: 'UserAccount',
            email: accountInfo.email,
        };
    }
    else if (accountInfo.__typename === 'ServiceAccount') {
        return {
            type: 'ServiceAccount',
            orgName: accountInfo.orgName,
        };
    }
    else {
        return { type: 'UnknownAccount' };
    }
}
//# sourceMappingURL=query.js.map
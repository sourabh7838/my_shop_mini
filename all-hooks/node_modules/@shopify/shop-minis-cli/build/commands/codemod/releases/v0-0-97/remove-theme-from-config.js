import { readFile, rm, writeFile } from 'node:fs/promises';
import path from 'node:path';
import { outputDebug } from '@shopify/cli-kit/node/output';
import jscodeshift from 'jscodeshift';
import { execAsync } from '../../../../utils/exec-async-child-process.js';
import { getRunBinCommand } from '../../../../utils/package-manager.js';
const removeTheme = (fileContents) => {
    const j = jscodeshift.withParser('tsx');
    const root = j(fileContents);
    let foundImportToReplace = false;
    // Find and remove './theme' imports
    root
        .find(j.ImportDeclaration)
        .filter(result => result.node.source.value === './theme')
        .forEach(result => {
        j(result).remove();
        foundImportToReplace = true;
    });
    // We can bail out early if there wasn't anything to replace
    if (!foundImportToReplace)
        return fileContents;
    // Find objects containing `lightTheme` and remove them
    root.find(j.VariableDeclaration).forEach(nodePath => {
        const declaration = nodePath.node.declarations[0];
        if (declaration.type === 'VariableDeclarator' &&
            declaration?.init?.type === 'ObjectExpression') {
            declaration.init.properties = declaration.init.properties.filter(prop => {
                if (prop.type === 'ObjectProperty' &&
                    ((prop?.key.type === 'Identifier' && prop.key.name) ?? '') ===
                        'lightTheme') {
                    return false;
                }
                return true;
            });
        }
        return false;
    });
    // jscodeshift doesn't respect the existing style so try to match it, we will also run prettier so it
    // doesn't matter too much
    return root.toSource({
        quote: 'single',
        objectCurlySpacing: false,
        trailingComma: true,
        reuseWhitespace: true,
    });
};
const themeToDelete = `import {theme} from '@shopify/shop-minis-platform-sdk'

export const lightTheme = {
  ...theme,
}`;
export async function removeThemeFromConfig() {
    const themeTsPath = path.join(process.cwd(), 'src', 'theme.ts');
    let themeTsContent;
    try {
        themeTsContent = await readFile(themeTsPath, {
            encoding: 'utf-8',
        });
        if (themeTsContent?.trim() === themeToDelete) {
            outputDebug(`Deleting theme file found at ${themeTsPath}`);
            await rm(themeTsPath);
        }
        else {
            outputDebug(`Theme file not as expected ${themeTsPath}`);
        }
    }
    catch (err) {
        outputDebug(`No theme file found at ${themeTsPath}`);
    }
    const indexTsxPath = path.join(process.cwd(), 'src', 'index.tsx');
    let indexTsxContent;
    try {
        indexTsxContent = await readFile(indexTsxPath, {
            encoding: 'utf-8',
        });
    }
    catch (err) {
        outputDebug(`No index file found at ${indexTsxPath}`);
        return;
    }
    try {
        if (!indexTsxContent ||
            !indexTsxContent.toLocaleLowerCase().includes('theme')) {
            outputDebug(`No theme found in ${indexTsxPath}`);
            return;
        }
        outputDebug(`Theme potentially found in ${indexTsxPath}`);
        const result = removeTheme(indexTsxContent);
        if (result === indexTsxContent) {
            outputDebug(`No changes to ${indexTsxPath}`);
            return;
        }
        outputDebug(`Saving changes to ${indexTsxPath}`);
        await writeFile(indexTsxPath, result, 'utf8');
        const prettierCmd = await getRunBinCommand(`prettier -w ${indexTsxPath}`);
        outputDebug(`Running ${prettierCmd}`);
        await execAsync({
            cmd: prettierCmd,
        });
    }
    catch (err) {
        throw new Error(`Failed to update ${indexTsxPath}: ${err}`);
    }
}
//# sourceMappingURL=remove-theme-from-config.js.map
import { readFile, writeFile } from 'node:fs/promises';
import path from 'node:path';
import { getRunBinCommand } from '../../../../utils/package-manager.js';
import { execAsync } from '../../../../utils/exec-async-child-process.js';
/**
 * Replaces usage of the deprecated Wrapper component from the minis sdk with DevelopmentMiniWrapper
 * from shop-minis-runtime
 */
export async function replaceDevWrapper() {
    try {
        const indexTsxPath = path.join(process.cwd(), 'index.tsx');
        let indexTsxContent = await readFile(indexTsxPath, {
            encoding: 'utf-8',
        });
        if (indexTsxContent.includes('DevelopmentMiniWrapper')) {
            // do nothing if the mini is already using the development mini wrapper from shop-minis-runtime
            return;
        }
        // delete unused imports
        indexTsxContent = indexTsxContent.replace("import {ShopActionsProvider} from '@shopify/shop-minis-platform-sdk/actions'", '');
        indexTsxContent = indexTsxContent.replace("import {useNativeEventEmitterShopActions} from '@shopify/shop-minis-platform-sdk'", '');
        // replace wrapper import
        indexTsxContent = indexTsxContent.replace("import {Wrapper} from '@shopify/shop-minis-platform-sdk/src/components/Wrapper'", "import {DevelopmentMiniWrapper} from '@shopify/shop-minis-runtime/src/components/DevelopmentMiniWrapper'");
        // replace potential extra empty line after replacing imports
        indexTsxContent = indexTsxContent.replace('\n\n', '\n');
        // delete unused code required to support the old wrapper
        indexTsxContent = indexTsxContent.replace('const actions = useNativeEventEmitterShopActions()', '');
        indexTsxContent = indexTsxContent.replace('<ShopActionsProvider value={actions}>', '');
        indexTsxContent = indexTsxContent.replace('</ShopActionsProvider>', '');
        // replace wrapper component
        indexTsxContent = indexTsxContent.replace('<Wrapper', '<DevelopmentMiniWrapper');
        indexTsxContent = indexTsxContent.replace('</Wrapper>', '</DevelopmentMiniWrapper>');
        await writeFile(indexTsxPath, indexTsxContent, {
            encoding: 'utf-8',
        });
        // format the file with prettier
        await execAsync({
            cmd: await getRunBinCommand(`prettier -w ${indexTsxPath}`),
        });
    }
    catch (error) {
        // do nothing if the file does not exist
    }
}
//# sourceMappingURL=replace-dev-wrapper.js.map
import path from 'node:path';
import os from 'node:os';
import { mkdtemp } from 'node:fs/promises';
import prompts from 'prompts';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { SemVer } from 'semver';
import { wrapWithLoadingIndicator } from '../../../../utils/wrap-with-loading-indicator.js';
import { prepareResetFiles, resetFiles } from './reset-files.js';
async function applyUpgrade(miniHandle, options) {
    const tmpDir = await mkdtemp(path.join(os.tmpdir()));
    outputDebug(`Created tmp dir: ${tmpDir}`);
    const diff = await wrapWithLoadingIndicator(prepareResetFiles(miniHandle, tmpDir), {
        loadingMessage: 'Preparing files...',
        successMessage: 'Files ready',
    });
    // Are we changing any of the mini's files?
    const changesToMake = diff.changed.length > 0;
    // Assume we want to continue on to run the copy & install
    let shouldContinue = true;
    // If there's changes to be made to files in the mini
    // then first ask if this is ok
    if (changesToMake && !options.skipPrompts) {
        const promptResult = await prompts({
            type: 'confirm',
            initial: true,
            name: 'shouldContinue',
            message: `This command will overwrite the following files: ${diff.changed.join(', ')}, do you want to continue?`,
        });
        shouldContinue = promptResult.shouldContinue;
    }
    // If the user did not want files to be updated we skip that bit
    if (shouldContinue) {
        await wrapWithLoadingIndicator(resetFiles(tmpDir), {
            loadingMessage: 'Updating files...',
            successMessage: 'Files updated',
        });
    }
}
const releaseNotes = ['Reset configuration files to match base Minis template'];
const exports = {
    version: new SemVer('0.0.42'),
    applyUpgrade,
    releaseNotes,
};
export default exports;
//# sourceMappingURL=index.js.map
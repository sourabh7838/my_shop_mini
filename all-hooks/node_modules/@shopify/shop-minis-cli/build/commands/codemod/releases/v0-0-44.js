import fs from 'node:fs';
import path from 'node:path';
import { SemVer } from 'semver';
import _ from 'lodash';
/**
 * - Remove references to patch-package from the package.json since patching dependencies is now handled internally in the CLI.
 * - Upgrade react-test-renderer to v18
 * - Remove individual dependencies from package.json in favour of shop-minis-runtime (react-native upgraded from 0.68 to 0.71)
 * - Remove jsonschema dependency from package.json since it was unused and not needed
 * - Remove intl polyfills since we no longer need them after the latest upgrade of react-native
 * - Delete unused react resolution
 * - .eslintrc.json is removed in favour of .eslintrc.js
 * - Remove patches folder since patch-package is no longer used
 * - Remove sample values from manifest file
 *
 * Diff: https://github.com/Shopify/shop-minis-cli/compare/v0.0.43...v0.0.44
 */
async function applyUpgrade(miniHandle) {
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    const packageJsonString = fs.readFileSync(packageJsonPath, {
        encoding: 'utf-8',
    });
    const packageJson = JSON.parse(packageJsonString);
    // remove postinstall hook from package.json
    if (packageJson?.scripts?.postinstall) {
        delete packageJson.scripts.postinstall;
    }
    // remove patch-package and postinstall-postinstall from devDependencies
    packageJson.devDependencies ||= {};
    delete packageJson.devDependencies['patch-package'];
    delete packageJson.devDependencies['postinstall-postinstall'];
    // upgrade react-test-renderer
    packageJson.devDependencies['react-test-renderer'] = '18.2.0';
    // delete unused resolutions
    delete packageJson.resolutions;
    // add shop-minis-runtime dependency
    packageJson.dependencies ||= {};
    packageJson.dependencies['@shopify/shop-minis-runtime'] = '0.0.5';
    // remove dependencies provided by the runtime package from the package.json
    for (const devDependency of getDependenciesRemovedInFavourOfRuntimePackage()) {
        delete packageJson.devDependencies[devDependency];
    }
    // remove jsonschema as its unused
    delete packageJson.devDependencies.jsonschema;
    // sort package.json keys so that they match the template
    const { name, version, private: packageJsonPrivate, scripts, dependencies, devDependencies, jest, ...rest // add spread just in case partners added something out of the known keys. this is unnecessary otherwise
     } = packageJson;
    const sortedPackageJson = {
        name,
        version,
        private: packageJsonPrivate,
        scripts,
        dependencies,
        devDependencies,
        jest,
        ...rest, // add spread just in case partners added something out of the known keys. this is unnecessary otherwise
    };
    fs.writeFileSync(packageJsonPath, `${JSON.stringify(sortedPackageJson, null, 2)}\n`, // keep the new line at the end of the file
    {
        encoding: 'utf-8',
    });
    // rm -rf patches
    fs.rmSync(path.join(process.cwd(), 'patches'), { recursive: true, force: true });
    // rm -rf .eslintrc.json
    fs.rmSync(path.join(process.cwd(), '.eslintrc.json'), {
        recursive: true,
        force: true,
    });
    // create .eslintrc.js
    fs.writeFileSync(path.join(process.cwd(), '.eslintrc.js'), eslintRcJsContent, { encoding: 'utf-8' });
    // remove intl polyfills from index.tsx
    const indexTsxPath = path.join(process.cwd(), 'index.tsx');
    const indexTsx = fs.readFileSync(indexTsxPath, { encoding: 'utf-8' });
    const updatedIndexTsx = indexTsx
        .replace("import 'intl'\n", '')
        .replace("import 'intl/locale-data/jsonp/en'\n", '');
    fs.writeFileSync(indexTsxPath, updatedIndexTsx, { encoding: 'utf-8' });
    // remove sample values from manifest.json
    const manifestJsonPath = path.join(process.cwd(), 'src', 'manifest.json');
    const manifestJsonString = fs.readFileSync(manifestJsonPath, {
        encoding: 'utf-8',
    });
    const manifestJson = JSON.parse(manifestJsonString) || {};
    const sampleManifestJson = getManifestSampleValues(miniHandle);
    // remove manifest json attributes that equal the sample manifest values
    Object.keys(manifestJson).forEach(manifestKey => {
        if (_.isEqual(manifestJson[manifestKey], sampleManifestJson[manifestKey])) {
            delete manifestJson[manifestKey];
        }
    });
    // delete entrypoints field from manifest if they are the same as sample values
    if (isSampleEntryPoints(manifestJson.entry_points, miniHandle)) {
        delete manifestJson.entry_points;
    }
    // persist updated manifest.json
    fs.writeFileSync(manifestJsonPath, `${JSON.stringify(manifestJson, null, 2)}\n`, // keep the new line at the end of the file
    {
        encoding: 'utf-8',
    });
}
const releaseNotes = [
    'Usage of patch-package was moved to the Minis CLI. As result the dependencies patch-package and postinstall-postinstall are removed as well as the postinstall hook in package.json.',
    'Moved individual dependencies to shop-minis-runtime. You will see them removed from the package.json but you can still import and use them.',
    'Renamed .eslintrc.json to .eslintrc.js.',
    'Removed intl polyfills from index.tsx. They are no longer needed.',
    'Removed sample values from the manifest file',
];
const eslintRcJsContent = `const path = require('path')

module.exports = {
  root: true,
  extends: ['plugin:@shopify/shop-minis/all'],
  settings: {
    react: {
      version: 'detect',
    },
  },
  parserOptions: {
    ecmaVersion: 6,
    project: './tsconfig.json',
    schema:
      'node_modules/@shopify/shop-minis-platform-sdk/src/api/minis.graphql',
    operations: '**/*.graphql',
  },
  rules: {
    'import/no-extraneous-dependencies': [
      'error',
      {
        packageDir: [
          __dirname,
          path.join(__dirname, 'node_modules', '@shopify/shop-minis-runtime'),
        ],
      },
    ],
  },
}
`;
function getDependenciesRemovedInFavourOfRuntimePackage() {
    return [
        '@react-native-community/blur',
        '@react-native-community/datetimepicker',
        '@react-native-community/picker',
        '@react-navigation/native',
        '@react-navigation/native-stack',
        '@shopify/react-graphql',
        '@shopify/restyle',
        '@types/color',
        '@types/react',
        '@types/react-native',
        '@types/url-parse',
        'apollo-link-timeout',
        'color',
        'intl',
        'react',
        'react-native',
        'react-native-fast-image',
        'react-native-gesture-handler',
        'react-native-linear-gradient',
        'react-native-localize',
        'react-native-progress',
        'react-native-reanimated',
        'react-native-safe-area-context',
        'react-native-screens',
        'react-native-svg',
        'react-native-webview',
        'url-parse',
    ];
}
function getManifestSampleValues(miniHandle) {
    return {
        icon_url: 'https://cdn.shopify.com/shop-assets/static_uploads/mini_apps/mini-placeholder-icon.png',
        shopify_app_ids: [],
        description: 'Mini App Description',
        partner_name: 'Shopify Partner Name',
        entry_points: [
            {
                type: 'ACTION_BUTTON',
                location: 'PRODUCT_PAGE',
                images: {
                    default_value: [],
                },
                call_to_action_text: {
                    default_value: 'Open __MINI_APP_NAME__',
                },
                visibility: {
                    owner_type: 'PRODUCT',
                    namespace: miniHandle,
                    key: 'available',
                },
                visibility_rule: {
                    owner_type: 'SHOP',
                    namespace: miniHandle,
                    key: 'product_entry_point_rule',
                },
            },
        ],
    };
}
function isSampleEntryPoints(entryPoints, miniHandle) {
    if (entryPoints?.length !== 1) {
        return false;
    }
    // avoid comparing call to action text since we can not recreate the mini name from the handle
    const { call_to_action_text: _sampleCallToActionText, ...comparableSampleEntryPoint } = getManifestSampleValues(miniHandle).entry_points[0];
    const { call_to_action_text: _callToActionText, ...comparableEntryPoint } = entryPoints[0];
    return _.isEqual(comparableEntryPoint, comparableSampleEntryPoint);
}
const exports = {
    releaseNotes,
    applyUpgrade,
    version: new SemVer('0.0.44'),
};
export default exports;
//# sourceMappingURL=v0-0-44.js.map
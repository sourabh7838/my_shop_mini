import { readFile, writeFile } from 'node:fs/promises';
import path from 'node:path';
import { SemVer } from 'semver';
import JSON5 from 'json5';
import { getRunBinCommand } from '../../../utils/package-manager.js';
import { execAsync } from '../../../utils/exec-async-child-process.js';
/**
 * Add fallback typescript resolution for runtime dependencies
 *
 * Diff: https://github.com/Shopify/shop-minis-cli/compare/v0.0.114...v0.0.115
 */
async function applyUpgrade() {
    try {
        const tsconfigJsonPath = path.join(process.cwd(), 'tsconfig.json');
        const tsconfigJsonString = await readFile(tsconfigJsonPath, {
            encoding: 'utf-8',
        });
        const tsconfig = JSON5.parse(tsconfigJsonString);
        tsconfig.compilerOptions = tsconfig.compilerOptions || {};
        tsconfig.compilerOptions.paths = tsconfig.compilerOptions.paths || {};
        tsconfig.compilerOptions.paths['*'] =
            tsconfig.compilerOptions.paths['*'] || [];
        const fallbackResolution = './node_modules/@shopify/shop-minis-runtime/node_modules/*';
        if (tsconfig.compilerOptions.paths['*'].includes(fallbackResolution)) {
            return;
        }
        tsconfig.compilerOptions.paths['*'].push(fallbackResolution);
        // persist updated package.json
        await writeFile(tsconfigJsonPath, `${JSON.stringify(tsconfig, null, 2)}\n`, // keep the new line at the end of the file
        {
            encoding: 'utf-8',
        });
        const prettierCmd = await getRunBinCommand(`prettier -w ${tsconfigJsonPath}`);
        await execAsync({
            cmd: prettierCmd,
        });
    }
    catch {
        // do nothing
    }
}
const exports = {
    releaseNotes: [
        'Add fallback resolution path to tsconfig to be able to grab dependencies nested in shop-minis-runtime',
    ],
    applyUpgrade,
    version: new SemVer('0.0.115'),
};
export default exports;
//# sourceMappingURL=v0-0-115.js.map
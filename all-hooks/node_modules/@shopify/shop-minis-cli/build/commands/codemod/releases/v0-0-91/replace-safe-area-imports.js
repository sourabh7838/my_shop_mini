import { readFile, writeFile } from 'node:fs/promises';
import path from 'node:path';
import jscodeshift from 'jscodeshift';
import { glob } from '@shopify/cli-kit/node/fs';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { execAsync } from '../../../../utils/exec-async-child-process.js';
import { getRunBinCommand } from '../../../../utils/package-manager.js';
const isImportSpecifier = (specifier) => Boolean(specifier && specifier.type === 'ImportSpecifier');
const isSafeAreaViewImportSpecifier = (specifier) => Boolean(isImportSpecifier(specifier) && specifier.imported.name === 'SafeAreaView');
const replaceImports = (fileContents) => {
    const j = jscodeshift.withParser('tsx');
    const root = j(fileContents);
    let foundImportToReplace = false;
    // Find and remove SafeAreaView from 'react-native' and 'react-native-safe-area-context' imports
    root
        .find(j.ImportDeclaration)
        .filter(result => result.node.source.value === 'react-native' ||
        result.node.source.value === 'react-native-safe-area-context')
        .forEach(result => {
        if (!result.node.specifiers?.some(isSafeAreaViewImportSpecifier))
            return;
        foundImportToReplace = true;
        const newSpecifiers = result.node.specifiers?.filter(specifier => !isSafeAreaViewImportSpecifier(specifier)) || [];
        if (newSpecifiers.length === 0) {
            j(result).remove();
        }
        else {
            result.node.specifiers = newSpecifiers;
        }
    });
    // We can bail out early if there wasn't anything to replace
    if (!foundImportToReplace)
        return fileContents;
    // Find or create import declaration for '@shopify/shop-minis-platform-sdk'
    const sdkImport = root
        .find(j.ImportDeclaration)
        .filter(result => result.node.source.value === '@shopify/shop-minis-platform-sdk');
    if (sdkImport.size() === 0) {
        // If there are no imports from '@shopify/shop-minis-platform-sdk', add one
        const importDeclaration = j.importDeclaration([j.importSpecifier(j.identifier('SafeAreaView'))], j.literal('@shopify/shop-minis-platform-sdk'));
        root.get().node.program.body.unshift(importDeclaration);
    }
    else {
        sdkImport.forEach(result => {
            if (!result.node.specifiers) {
                result.node.specifiers = [];
            }
            const hasSafeAreaView = result.node.specifiers.some(isSafeAreaViewImportSpecifier);
            if (!hasSafeAreaView) {
                result.node.specifiers.push(j.importSpecifier(j.identifier('SafeAreaView')));
            }
        });
    }
    // jscodeshift doesn't respect the existing style so try to match it, we will also run prettier so it
    // doesn't matter too much
    return root.toSource({
        quote: 'single',
        objectCurlySpacing: false,
        trailingComma: true,
        reuseWhitespace: true,
    });
};
export async function replaceAllSafeAreaImports() {
    const files = await glob('**/*.(js|jsx|ts|tsx)', {
        cwd: path.join(process.cwd(), 'src'),
        absolute: true,
        dot: true,
        followSymbolicLinks: false,
    });
    outputDebug(`Scanning ${files.length} files for SafeAreaView`);
    for (const file of files) {
        try {
            const data = await readFile(file, 'utf8');
            if (!data || !data.includes('SafeAreaView')) {
                outputDebug(`- No SafeAreaView found in ${file}`);
                continue;
            }
            outputDebug(`- SafeAreaView potentially found in ${file}`);
            const result = replaceImports(data);
            if (result === data) {
                outputDebug(`- No changes to ${file}`);
                continue;
            }
            outputDebug(`- Saving changes to ${file}`);
            await writeFile(file, result, 'utf8');
            const prettierCmd = await getRunBinCommand(`prettier -w ${file}`);
            outputDebug(`- Running ${prettierCmd}`);
            await execAsync({
                cmd: prettierCmd,
            });
        }
        catch (err) {
            throw new Error(`Failed to update ${file}: ${err}`);
        }
    }
}
//# sourceMappingURL=replace-safe-area-imports.js.map
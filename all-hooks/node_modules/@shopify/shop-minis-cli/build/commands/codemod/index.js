import { Command } from 'commander';
import { handler as handleError } from '@shopify/cli-kit/node/error';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { getMiniManifest } from '../../utils/minis-manifest.js';
import { hardResetDependencies } from '../../utils/package-manager.js';
import { wrapWithLoadingIndicator } from '../../utils/wrap-with-loading-indicator.js';
import { validateUpgradeBetweenVersions } from '../../utils/semver.js';
import { applyUpgrades as applyReleaseUpgrades } from './releases/index.js';
export const command = new Command()
    .name('codemod')
    .description('automatically apply required code changes after upgrading the CLI')
    .requiredOption('--from-version <version>', 'codemod will apply code changes starting with this CLI version')
    .requiredOption('--to-version <version>', 'codemod will apply code changes until this CLI version')
    .option('--verbose', 'print debugging messages')
    .option('-y --yes', 'automatically answer prompts with default options')
    .option('--no-hard-reset-dependencies', 'by default this command will recreate dependency lockfiles. use this flag to avoid that')
    .action(async (args) => {
    const miniHandle = getMiniManifest().handle;
    const { toVersion, yes: skipPrompts, fromVersion, hardResetDependencies: shouldHardResetDependencies, } = args;
    if (toVersion === fromVersion) {
        outputDebug(`--from-version and --to-version are the same, no changes will be applied by codemod (versions are ${fromVersion})`);
        return;
    }
    try {
        validateUpgradeBetweenVersions(fromVersion, toVersion);
    }
    catch (err) {
        handleError(err);
        process.exit(1);
    }
    await applyReleaseUpgrades({
        fromVersion,
        toVersion,
        miniHandle,
        options: { skipPrompts },
    });
    if (shouldHardResetDependencies) {
        await wrapWithLoadingIndicator(hardResetDependencies(), {
            loadingMessage: 'Reinstalling dependencies...',
            successMessage: 'Dependencies installed',
        });
    }
});
export async function loadCommand(parentProgram) {
    parentProgram.addCommand(command, {
        hidden: true,
    });
}
//# sourceMappingURL=index.js.map
import { execSync } from 'node:child_process';
import chalk from 'chalk';
import { Command } from 'commander';
import { getMiniManifest, manifestExists } from '../../utils/minis-manifest.js';
import { getRunBinCommand } from '../../utils/package-manager.js';
import { maybeApplyPatches } from '../../utils/patch-package.js';
import { isStandaloneMini } from '../../utils/standalone.js';
import { generateGraphQLTypes } from './utils/generate-graphql-types.js';
export function loadCommand(parentProgram) {
    const command = new Command()
        .name('generate-graphql-types')
        .description('Generate TypeScript types for all of your GraphQL files.')
        .option('--watch', 'Enable watch mode for continuous type generation.')
        .option('--verbose', 'Print debugging messages.')
        .action(async (options) => {
        const appliedPatches = maybeApplyPatches(); // we need to patch graphql-typescript-definitions for types to be correct
        // if the patch was applied, we need to rerun the command in a new context to take the applied patch into account
        if (appliedPatches.some(patchName => patchName.startsWith('graphql-typescript-definitions'))) {
            const args = [
                options.watch ? ' --watch' : '',
                options.verbose ? ' --verbose' : '',
            ].join('');
            execSync(await getRunBinCommand(`shop-minis generate-graphql-types ${args}`), {
                stdio: 'inherit',
            });
            return;
        }
        const miniName = getMiniManifest().name;
        console.log('Generating graphql types for', chalk.green(miniName), '\n');
        generateGraphQLTypes(options);
    });
    parentProgram.addCommand(command, {
        hidden: !manifestExists() || isStandaloneMini(),
    });
}
//# sourceMappingURL=index.js.map
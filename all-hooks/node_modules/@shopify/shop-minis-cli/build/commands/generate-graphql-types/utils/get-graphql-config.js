import { existsSync } from 'node:fs';
import path, { join } from 'node:path';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { isStandaloneMini } from '../../../utils/standalone.js';
import { customRequire } from './require.js';
const LEGACY_GRAPHQL_CONFIG_PATH = path.join(process.cwd(), 'node_modules', '@shopify', 'shop-minis-runtime', 'graphqlrc');
const STANDALONE_GRAPHQL_CONFIG_PATH = path.join(process.cwd(), 'node_modules', '@shopify', 'shop-minis-sdk', 'graphqlrc');
export function getGraphqlConfig() {
    try {
        let gqlConfig;
        const localConfigPath = join(process.cwd(), '.graphqlrc.js');
        const localConfigExists = existsSync(localConfigPath);
        outputDebug(`Local graphql config from ${localConfigPath} exists? ${localConfigExists}`);
        if (localConfigExists) {
            outputDebug(`Using local graphql config from ${localConfigPath}`);
            try {
                gqlConfig = customRequire()(localConfigPath);
            }
            catch (err) {
                outputDebug(`Failed to load local graphql config from ${localConfigPath}. Error ${err}`);
            }
        }
        if (!gqlConfig) {
            if (isStandaloneMini()) {
                outputDebug(`Using graphql config from ${STANDALONE_GRAPHQL_CONFIG_PATH}`);
                gqlConfig = customRequire()(STANDALONE_GRAPHQL_CONFIG_PATH);
            }
            else {
                outputDebug(`Using graphql config from ${LEGACY_GRAPHQL_CONFIG_PATH}`);
                gqlConfig = customRequire()(LEGACY_GRAPHQL_CONFIG_PATH);
            }
        }
        return gqlConfig;
    }
    catch (err) {
        throw new Error(`Failed to load graphql config. Error: ${err}`);
    }
}
//# sourceMappingURL=get-graphql-config.js.map
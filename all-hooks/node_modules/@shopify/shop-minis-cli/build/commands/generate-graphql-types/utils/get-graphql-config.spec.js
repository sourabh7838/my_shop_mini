import { existsSync } from 'node:fs';
import { join } from 'node:path';
import { expect, describe, it, vi, afterEach } from 'vitest';
import { getGraphqlConfig } from './get-graphql-config.js';
const customRequireMock = vi.fn();
vi.mock('./require.js', () => ({
    customRequire: vi.fn(() => {
        return customRequireMock;
    }),
}));
vi.mock('../../../utils/minis-manifest.js', () => ({
    getMiniManifestFeatures: vi.fn(() => []),
    getMiniManifest: vi.fn(() => ({
        handle: 'test-mini',
    })),
}));
vi.mock('node:fs');
vi.mock('@shopify/cli-kit/node/output');
const localConfigPath = join(process.cwd(), '.graphqlrc.js');
const runtimeConfigPath = '@shopify/shop-minis-runtime/graphqlrc';
describe('getGraphqlConfig', () => {
    afterEach(() => {
        vi.clearAllMocks();
    });
    it('should use local graphql config if it exists', () => {
        const mockConfig = { local: 'config' };
        vi.mocked(existsSync).mockReturnValue(true);
        vi.mocked(customRequireMock).mockReturnValue(mockConfig);
        const result = getGraphqlConfig();
        expect(customRequireMock).toHaveBeenCalledWith(localConfigPath);
        expect(result).toEqual(mockConfig);
    });
    it('should use runtime graphql config if local config does not exist', () => {
        const mockConfig = { runtime: 'config' };
        vi.mocked(existsSync).mockReturnValue(false);
        vi.mocked(customRequireMock).mockReturnValue(mockConfig);
        const result = getGraphqlConfig();
        expect(customRequireMock).toHaveBeenCalledWith(expect.stringContaining(String(runtimeConfigPath)));
        expect(result).toEqual(mockConfig);
    });
    it('uses the runtime config if the local require fails', () => {
        const mockConfig = { runtime: 'config' };
        vi.mocked(existsSync).mockReturnValue(true);
        vi.mocked(customRequireMock).mockImplementation(requirePath => {
            if (requirePath === localConfigPath) {
                throw new Error('Mock error requiring local config');
            }
            return mockConfig;
        });
        const result = getGraphqlConfig();
        expect(customRequireMock).toHaveBeenCalledWith(expect.stringContaining(String(runtimeConfigPath)));
        expect(result).toEqual(mockConfig);
    });
    it('should throw an error if both local and runtime configs fail to load', () => {
        vi.mocked(existsSync).mockReturnValue(true);
        vi.mocked(customRequireMock).mockImplementation(() => {
            throw new Error('Mock error message');
        });
        expect(() => getGraphqlConfig()).toThrow(`Failed to load graphql config. Error: Error: Mock error message`);
    });
});
//# sourceMappingURL=get-graphql-config.spec.js.map
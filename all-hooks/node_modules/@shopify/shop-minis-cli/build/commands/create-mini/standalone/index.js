import { existsSync } from 'fs';
import path from 'path';
import { Command } from 'commander';
import { handler as handleError } from '@shopify/cli-kit/node/error';
import { renderError, renderSuccess, renderTasks, renderTextPrompt, } from '@shopify/cli-kit/node/ui';
import chalk from 'chalk';
import { copy } from 'fs-extra';
import { exec } from '@shopify/cli-kit/node/system';
import { packageManagerFromUserAgent } from '@shopify/cli-kit/node/node-package-manager';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { getCdCommandPath, getHandleFromName, getOutputDirectory, } from '../utils/index.js';
import { generateMiniFromLocalExample } from '../utils/examples.js';
import { getRunDevModeCommand } from '../../../utils/package-manager.js';
export function loadCommand(parentProgram) {
    const command = new Command()
        .name('create')
        .description('Create a new Shop Mini.')
        .argument('[mini name]', 'The name of your Shop Mini.')
        .option('--example <example name>', 'The name of the example to use.')
        .option('-o, --output-dir <path>', 'Specify an output directory.')
        .option('--verbose', 'Print debugging messages.')
        .option('--legacy', 'Use legacy create command') // TODO: Only used to keep commander happy
        .action(async (miniNameArg, options = {}) => {
        try {
            outputDebug(`create mini input: name=${miniNameArg} options=${JSON.stringify(options)}`);
            let miniName = miniNameArg;
            const outputDir = getOutputDirectory(options.outputDir);
            outputDebug(`create mini outputDir: ${outputDir}`);
            if (!existsSync(outputDir)) {
                renderError({
                    headline: 'Error creating mini',
                    body: [
                        `Unable to create a mini at the specified output dir of`,
                        { command: outputDir },
                    ],
                });
                process.exit(1);
            }
            if (!miniName) {
                if (options.example) {
                    miniName = options.example;
                }
                else if (miniNameArg) {
                    miniName = miniNameArg;
                }
                else {
                    // eslint-disable-next-line require-atomic-updates
                    miniName = await renderTextPrompt({
                        message: `Give your Shop Mini a name. ${chalk.dim('You can change it later.')}`,
                    });
                }
            }
            const miniHandle = getHandleFromName(miniName);
            const miniDirPath = path.resolve(outputDir, miniHandle);
            const example = options.example ?? 'with-getting-started';
            outputDebug(`create mini miniHandle: ${miniHandle}`);
            outputDebug(`create mini miniDirPath: ${miniDirPath}`);
            outputDebug(`create mini example: ${example}`);
            await renderTasks([
                {
                    title: 'Fetching example',
                    task: async () => {
                        const miniTmpDirPath = await generateMiniFromLocalExample(`${miniName}`, miniHandle, example);
                        await copy(miniTmpDirPath, miniDirPath);
                    },
                },
                {
                    title: 'Installing dependencies',
                    task: async () => {
                        const useYarn = packageManagerFromUserAgent() === 'yarn';
                        // Yarn is ignoring the `resolutions` when you install
                        // via `yarn create @shopify/shop-mini` so use `--ignore-engines` to work around the
                        // problem with `@apollo/federation`
                        // npm fails to install for a similar reason on node 15 but runs fine so we will
                        // use `--force` to get everything installed
                        if (useYarn) {
                            await exec('yarn', ['--ignore-engines'], { cwd: miniDirPath });
                        }
                        else {
                            await exec('npm', ['i', '--force'], { cwd: miniDirPath });
                        }
                        await exec(useYarn ? 'yarn' : 'npx', [
                            'patch-package',
                            '--patch-dir',
                            'node_modules/@shopify/shop-minis-sdk/patches',
                        ], { cwd: miniDirPath });
                    },
                },
            ]);
            renderSuccess({
                headline: 'Shop Mini created',
                body: [`Your Shop Mini is ready to use.`],
                nextSteps: [
                    [
                        "Change to your mini's directory",
                        {
                            command: `cd ${getCdCommandPath(outputDir, miniHandle)}`,
                        },
                    ],
                    [
                        'Run your Shop Mini',
                        {
                            command: await getRunDevModeCommand(),
                        },
                    ],
                    [
                        'Check out the docs',
                        {
                            bold: 'https://shop.app/minis/docs/',
                        },
                    ],
                ],
            });
        }
        catch (error) {
            handleError(error);
            process.exit(1);
        }
    });
    parentProgram.addCommand(command, {
        hidden: true,
    });
}
//# sourceMappingURL=index.js.map
import { existsSync } from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { renderSelectPrompt, renderTasks, renderTextPrompt, } from '@shopify/cli-kit/node/ui';
import { outputWarn } from '@shopify/cli-kit/node/output';
import { packageManagerFromUserAgent } from '@shopify/cli-kit/node/node-package-manager';
import { Command, Option } from 'commander';
import chalk from 'chalk';
import { copy } from 'fs-extra';
import { execAsync } from '../../../utils/exec-async-child-process.js';
import { TEMPLATES, TEMPLATE_VALUES } from '../../../templates-index.js';
import { formatExtensionFiles } from '../../create-extension/utils/format-extension-files.js';
import { EXTENSION_TARGETS_WITH_TEMPLATES } from '../../create-extension/constants.js';
import { ExtensionType } from '../../../constants/extensions.js';
import { createExtensionFiles } from '../../create-extension/utils/create-extension-files.js';
import { getCdCommandPath, getHandleFromName, getOutputDirectory, } from '../utils/index.js';
import { generateMiniFromExample, generateMiniFromTemplate, } from './utils/template-app.js';
function logSuccess(miniName, outputDir, miniDir, useYarn) {
    console.log(`\n \nShop Mini`, chalk.green.bold(`${miniName}`), 'created. Next steps:\n');
    const cdPath = getCdCommandPath(outputDir, miniDir);
    console.log(chalk.cyan.bold(`  cd ${cdPath}`));
    console.log(chalk.dim('  Open your Shop Mini’s directory\n'));
    console.log(chalk.cyan.bold(`  ↪ ${useYarn ? 'yarn' : 'npm'} start`));
    console.log(chalk.dim('    Run Shop Mini, and open it on an iOS or Android device.\n'));
    console.log(chalk.cyan('  ↪ ') +
        chalk.cyan.underline.bold('https://shop.app/minis/docs/'));
    console.log(chalk.dim('    Shop Minis documentation.\n \n'));
}
async function selectTemplate() {
    return renderSelectPrompt({
        message: 'Select a template',
        choices: TEMPLATES.map(template => ({
            label: template.title,
            value: template.value,
        })),
        infoTable: TEMPLATES.map(template => ({
            header: template.title,
            helperText: template.description,
            items: [],
        })),
    });
}
export function loadCommand(parentProgram) {
    const command = new Command()
        .name('create')
        .description('Create a new Shop Mini')
        .argument('[mini name]', 'the name of your mini')
        .option('--verbose', 'print debugging messages')
        // TODO: Remove `--useYarn` https://github.com/Shopify/shop-minis-cli/issues/190
        .option('--useYarn', '(deprecated) Use yarn as package manager instead of npm')
        .option('--alphaMinisRuntime', 'use the alpha tag of @shopify/shop-minis-runtime. uses the latest tag by default')
        .option('--alphaMinisSDK', 'use the alpha tag of @shopify/shop-minis-platform-sdk. uses the latest tag by default')
        .option('--skip-create-extension', 'skip the create extension step')
        .addOption(new Option('--example <example name>', 'name of the example to use'))
        .addOption(new Option('--template <template name>', 'name of the template to use').choices(TEMPLATE_VALUES))
        .addOption(new Option('--extension-target <extension target name>', 'name of the extension target to use').choices(Object.keys(EXTENSION_TARGETS_WITH_TEMPLATES)))
        .addOption(new Option('--extension-type <extension type name>', 'name of the extension type to create').choices(Object.values(ExtensionType)))
        .option('--output-dir <path>', 'Specify an output directory for the mini')
        .option('--legacy', 'Use legacy create command') // TODO: Only used to keep commander happy
        .action(async (miniNameArg, options = {}) => {
        const outputDir = getOutputDirectory(options.outputDir);
        if (!existsSync(outputDir)) {
            console.error(`Unable to create a mini at the specified output dir of ${outputDir}`);
            process.exit(1);
        }
        let miniName;
        let exampleName = null;
        let templateName = null;
        let createChoice = 'advanced';
        try {
            if (options.example) {
                miniName = options.example;
            }
            else if (miniNameArg) {
                miniName = miniNameArg;
            }
            else {
                miniName = await renderTextPrompt({
                    message: `Give your Shop Mini a name. ${chalk.dim('You can change it later.')}`,
                });
            }
            if (options.example) {
                exampleName = options.example;
                createChoice = 'express';
            }
            else if (options.template) {
                if (TEMPLATE_VALUES.includes(options.template)) {
                    templateName = options.template;
                }
                else {
                    outputWarn(`Template ${options.template} not found. Please select a valid template.`);
                    templateName = await selectTemplate();
                }
            }
            else {
                createChoice = await renderSelectPrompt({
                    message: 'Choose how you want to create your Shop Mini',
                    choices: [
                        {
                            label: 'Express - Start building a Shop Mini immediately',
                            value: 'express',
                        },
                        {
                            label: 'Advanced - Select from templates to create your Shop Mini',
                            value: 'advanced',
                        },
                    ],
                });
                if (createChoice === 'express') {
                    templateName = 'getting_started';
                }
                else {
                    templateName = await selectTemplate();
                }
            }
            const miniDir = getHandleFromName(miniName);
            const miniDirPath = path.resolve(outputDir, miniDir);
            let miniTmpDirPath;
            if (exampleName) {
                await renderTasks([
                    {
                        title: 'Fetching example',
                        task: async () => {
                            miniTmpDirPath = await generateMiniFromExample(miniDir, exampleName, options.alphaMinisRuntime, options.alphaMinisSDK);
                        },
                    },
                ]);
            }
            else if (templateName) {
                await renderTasks([
                    {
                        title: 'Fetching template',
                        task: async () => {
                            miniTmpDirPath = await generateMiniFromTemplate(miniName, templateName, miniDir, options.alphaMinisRuntime, options.alphaMinisSDK);
                        },
                    },
                ]);
            }
            if (!miniTmpDirPath) {
                process.exit(1);
            }
            if (createChoice === 'advanced') {
                await createExtensionFiles({
                    miniName,
                    specifiedTarget: options.extensionTarget,
                    specifiedType: options.extensionType,
                    miniOutputDir: miniTmpDirPath,
                });
            }
            await copy(miniTmpDirPath, miniDirPath);
            const useYarn = packageManagerFromUserAgent() === 'yarn';
            // Yarn is ignoring the `resolutions` when you install
            // via `yarn create @shopify/shop-mini` so use `--ignore-engines` to work around the
            // problem with `@apollo/federation`
            // npm fails to install for a similar reason on node 15 but runs fine so we will
            // use `--force` to get everything installed
            const installCmd = useYarn ? 'yarn --ignore-engines' : 'npm i --force';
            await execAsync({
                cmd: installCmd,
                loadingMessage: 'Installing dependencies. This might take a minute...',
                successMessage: 'Dependencies installed',
            }, { cwd: miniDirPath });
            execSync(`${useYarn ? 'yarn' : 'npx'} patch-package --patch-dir node_modules/@shopify/shop-minis-runtime/patches`, { cwd: miniDirPath });
            await formatExtensionFiles(miniDirPath);
            logSuccess(miniName, outputDir, miniDir, useYarn);
        }
        catch (err) {
            console.error(err?.message || err);
            process.exit(1);
        }
    });
    parentProgram.addCommand(command, {
        hidden: true,
    });
}
//# sourceMappingURL=index.js.map
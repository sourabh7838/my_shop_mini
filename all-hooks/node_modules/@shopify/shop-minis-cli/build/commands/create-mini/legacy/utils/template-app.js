import url from 'node:url';
import { mkdtemp } from 'node:fs/promises';
import path from 'path';
import os from 'os';
import { copy, move } from 'fs-extra';
import _ from 'lodash';
import { CLI_VERSION } from '../../../config.js';
import { replaceStringsInTemplate } from '../../../../utils/replace-strings-in-template.js';
import { execAsync } from '../../../../utils/exec-async-child-process.js';
import { getPackageAlphaVersionCommand, getPackageDependencyVersionCommand, getPackageLatestVersionCommand, overridePackageDependencies, } from '../../../../utils/package-manager.js';
import { COMMON_PACKAGE_DEPENDENCY_VERSIONS } from '../../../../constants/templates.js';
import { cloneShopMinisRepo, getExample } from '../../utils/examples.js';
const __dirname = url.fileURLToPath(new URL('.', import.meta.url));
export async function generateMiniFromTemplate(name, templateName, miniDir, useAlphaRuntime, useAlphaSDK) {
    const tmpDir = await mkdtemp(path.join(os.tmpdir(), `${miniDir}-`));
    const miniTemplateDir = await path.join(__dirname, '../../../../../templates', // TODO: this reads from outside the `build` dir, which is weird
    `__template_${templateName}`);
    const stringsToReplace = {
        __MINI_APP_NAME__: name,
        __MINI_APP_NAME_PASCAL_CASE__: _.startCase(miniDir).replace(/ /g, ''),
        __MINI_APP_NAME_KEBAB_CASE__: _.kebabCase(name),
        __SHOP_MINIS_CLI_VERSION__: CLI_VERSION,
        __SHOP_MINIS_RUNTIME_VERSION__: await fetchPackageVersion('@shopify/shop-minis-runtime', '0.0.100', useAlphaRuntime),
        __SHOP_MINIS_SDK_VERSION__: await fetchPackageVersion('@shopify/shop-minis-platform-sdk', '0.1.95', useAlphaSDK),
        __SHOP_MINIS_UI_EXTENSIONS_VERSION__: await fetchPackageVersion('@shopify/shop-minis-ui-extensions', '0.0.4'),
        __REACT_NATIVE_VERSION__: await getPackageDependencyVersion('@shopify/shop-minis-runtime', 'react-native', '0.73.2'),
        __PACKAGE_VERSION_TYPES_JEST__: COMMON_PACKAGE_DEPENDENCY_VERSIONS.TYPES_JEST,
        __PACKAGE_VERSION_BABEL_JEST__: COMMON_PACKAGE_DEPENDENCY_VERSIONS.BABEL_JEST,
        __PACKAGE_VERSION_ESLINT__: COMMON_PACKAGE_DEPENDENCY_VERSIONS.ESLINT,
        __PACKAGE_VERSION_JEST__: COMMON_PACKAGE_DEPENDENCY_VERSIONS.JEST,
        __PACKAGE_VERSION_PRETTIER__: COMMON_PACKAGE_DEPENDENCY_VERSIONS.PRETTIER,
    };
    const commonTemplateFilesDir = await path.join(__dirname, '../../../../../templates', // TODO: this reads from outside the `build` dir, which is weird
    '__template_common');
    await copy(commonTemplateFilesDir, tmpDir);
    await copy(miniTemplateDir, tmpDir);
    await move(path.join(tmpDir, 'gitignore'), path.join(tmpDir, '.gitignore'));
    await replaceStringsInTemplate(tmpDir, stringsToReplace);
    return tmpDir;
}
export async function generateMiniFromExample(miniDir, exampleName, useAlphaRuntime, useAlphaSDK) {
    const tmpDir = await mkdtemp(path.join(os.tmpdir(), `${miniDir}-`));
    const shopMinisClonePath = await cloneShopMinisRepo();
    const examplePath = await getExample(shopMinisClonePath, exampleName);
    await copy(examplePath, tmpDir);
    overridePackageDependencies(tmpDir, {
        dependencies: {
            '@shopify/shop-minis-runtime': await fetchPackageVersion('@shopify/shop-minis-runtime', '0.0.100', useAlphaRuntime),
            '@shopify/shop-minis-platform-sdk': await fetchPackageVersion('@shopify/shop-minis-platform-sdk', '0.1.95', useAlphaSDK),
        },
        devDependencies: {
            '@shopify/shop-minis-cli': CLI_VERSION,
        },
    });
    return tmpDir;
}
async function fetchPackageVersion(packageName, fallbackVersion, alpha = false) {
    try {
        const commandToFetchVersion = alpha
            ? getPackageAlphaVersionCommand
            : getPackageLatestVersionCommand;
        const { stdout: latestPackageVersionStdout } = await execAsync({
            cmd: commandToFetchVersion(packageName),
        });
        return latestPackageVersionStdout[0];
    }
    catch {
        // this fallback shouldn't be needed but we do our best to make sure the mini creation doesn't fail
        return fallbackVersion;
    }
}
async function getPackageDependencyVersion(packageName, dependencyName, fallbackVersion) {
    try {
        const { stdout: latestPackageVersionStdout } = await execAsync({
            cmd: getPackageDependencyVersionCommand(packageName, dependencyName),
        });
        return latestPackageVersionStdout[0];
    }
    catch {
        // this fallback shouldn't be needed but we do our best to make sure the mini creation doesn't fail
        return fallbackVersion;
    }
}
//# sourceMappingURL=template-app.js.map
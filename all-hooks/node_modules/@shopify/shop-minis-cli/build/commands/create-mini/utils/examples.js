// import url from 'node:url'
import { mkdtemp, readdir, readFile, writeFile } from 'node:fs/promises';
import path from 'path';
import os from 'os';
import { existsSync } from 'node:fs';
import url from 'node:url';
import { downloadGitRepository } from '@shopify/cli-kit/node/git';
import { simpleGit } from 'simple-git';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { copy } from 'fs-extra';
import { CLI_VERSION } from '../../config.js';
import { getPackageLatestVersion, overridePackageDependencies, overridePackageName, } from '../../../utils/package-manager.js';
const __dirname = url.fileURLToPath(new URL('.', import.meta.url));
export async function cloneShopMinisRepo({ branch, } = {}) {
    const tmpDir = await mkdtemp(path.join(os.tmpdir(), `shop-minis-`));
    const repoUrl = 'https://github.com/Shopify/shop-minis.git';
    outputDebug(`Cloning shop-minis repo to ${tmpDir}`);
    try {
        await downloadGitRepository({
            repoUrl,
            destination: tmpDir,
        });
    }
    catch (error) {
        outputDebug(`Error cloning shop-minis repo: ${error}`);
        throw new Error(`Error cloning shop-minis repo. Please ensure you have access to clone ${repoUrl} and try again`);
    }
    if (branch) {
        outputDebug(`Checking out shop-minis branch ${branch}`);
        try {
            const git = simpleGit(tmpDir);
            await git.checkout(branch);
        }
        catch (error) {
            outputDebug(`Error checking out shop-minis branch ${branch}: ${error}`);
            throw new Error(`Error checking out shop-minis branch ${branch}. Please ensure the branch exists and try again`);
        }
    }
    return tmpDir;
}
export async function getExample(examplesDir, exampleName) {
    const examplePath = path.join(examplesDir, exampleName);
    if (!existsSync(examplePath)) {
        throw new Error(`Example "${exampleName}" not found. Available examples: ${JSON.stringify(await readdir(examplesDir))}`);
    }
    return examplePath;
}
export async function generateMiniFromShopMinisExample(name, handle, exampleName) {
    const shopMinisClonePath = await cloneShopMinisRepo();
    const examplePath = await getExample(path.join(shopMinisClonePath, 'examples'), exampleName);
    return generateMiniFromExample(name, handle, examplePath);
}
export async function generateMiniFromLocalExample(name, handle, exampleName) {
    const examplePath = await getExample(path.join(__dirname, '..', 'standalone', 'examples'), exampleName);
    return generateMiniFromExample(name, handle, examplePath);
}
export async function generateMiniFromLocalWebExample(name, handle) {
    const examplePath = await getExample(path.join(__dirname, '..', 'web', 'examples'), 'default');
    return generateMiniFromExample(name, handle, examplePath);
}
export async function generateMiniFromExample(name, handle, examplePath) {
    const tmpDir = await mkdtemp(path.join(os.tmpdir(), `${handle}-`));
    await copy(examplePath, tmpDir);
    overridePackageDependencies(tmpDir, {
        dependencies: examplePath.includes('web/')
            ? {}
            : {
                '@shopify/shop-minis-sdk': await getPackageLatestVersion('@shopify/shop-minis-sdk'),
            },
        devDependencies: {
            '@shopify/shop-minis-cli': examplePath.includes('web/')
                ? 'latest-web'
                : CLI_VERSION,
        },
    });
    overridePackageName(tmpDir, handle);
    // Examples have their own name in their manifest.json files, so we need to override them
    const manifestPath = path.join(tmpDir, 'src', 'manifest.json');
    const manifest = JSON.parse(await readFile(manifestPath, 'utf-8'));
    manifest.name = name;
    await writeFile(manifestPath, `${JSON.stringify(manifest, null, 2)}\n`, {
        encoding: 'utf-8',
    });
    return tmpDir;
}
//# sourceMappingURL=examples.js.map
import { Command } from 'commander';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { handler as handleError } from '@shopify/cli-kit/node/error';
import { renderInfo } from '@shopify/cli-kit/node/ui';
import { getMiniManifest } from '../../utils/minis-manifest.js';
import { getSubmissions } from '../../data/get-submissions.js';
import { assertNetworkAndAuth } from '../../utils/common-tasks.js';
export function loadCommand(parentProgram) {
    const command = new Command()
        .name('check-submission')
        .description('Check the status of your submissions.')
        .option('--verbose', 'Print debugging messages.') // compatible with cli-kit
        .action(async (args) => {
        const miniHandle = getMiniManifest().handle;
        outputDebug(`Check submission args ${JSON.stringify(args)}`);
        outputDebug(`Checking submissions for mini "${miniHandle}" at ${process.cwd()}`);
        try {
            await assertNetworkAndAuth();
            const { nodes } = await getSubmissions();
            if (nodes.length === 0) {
                renderInfo({
                    headline: 'No submissions found',
                });
            }
            else {
                const latestSubmission = nodes[0];
                const nextSteps = latestSubmission.status === 'REJECTED'
                    ? [
                        'Check the email for more information and feedback on your submission.',
                    ]
                    : [];
                const formattedDate = new Intl.DateTimeFormat(undefined, {
                    dateStyle: 'full',
                    timeStyle: 'full',
                }).format(new Date(latestSubmission.submittedAt));
                const formattedStatus = latestSubmission.status[0].toLocaleUpperCase() +
                    latestSubmission.status.slice(1).toLocaleLowerCase();
                renderInfo({
                    headline: `Status: ${formattedStatus}`,
                    body: `Description:\n${latestSubmission.description}\n\n` +
                        `Reference: ${latestSubmission.reference}\n\n` +
                        `Submitted ${formattedDate}`,
                    nextSteps,
                });
            }
        }
        catch (error) {
            // Always output the error first
            handleError(error);
            process.exit(1);
        }
    });
    parentProgram.addCommand(command);
}
//# sourceMappingURL=index.js.map
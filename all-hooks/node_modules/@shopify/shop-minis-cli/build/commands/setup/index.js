import path from 'node:path';
import fs from 'node:fs';
import { Command } from 'commander';
import { renderSelectPrompt, renderSuccess, renderError, } from '@shopify/cli-kit/node/ui';
import { AbortError, handler as handleError } from '@shopify/cli-kit/node/error';
import { getMiniManifest } from '../../utils/minis-manifest.js';
import { fetchAllOrgs, token } from '../../data/partners/query.js';
import { miniCreate } from '../../data/mini-create.js';
import { syncManifest } from '../../utils/sync-manifest.js';
async function loginAndSetup() {
    const envFilePath = path.join(process.cwd(), '.env');
    let envFileContents = '';
    if (fs.existsSync(envFilePath)) {
        envFileContents = fs.readFileSync(envFilePath, 'utf-8');
        // Prevent creating a new Mini if SHOP_MINIS_API_KEY is already set
        if (envFileContents.includes('SHOP_MINIS_API_KEY')) {
            renderError({
                headline: 'Mini already set up',
                body: ['An API key is already configured in `.env`.'],
            });
            return;
        }
    }
    const { handle: miniHandle, name: miniName } = getMiniManifest();
    if (miniHandle) {
        // Prevent creating a new Mini if manifest.json is already set
        renderError({
            headline: 'Mini already set up',
            body: [
                'Configuration already exists in `manifest.json`. Please set',
                {
                    bold: 'SHOP_MINIS_API_KEY',
                },
                'in `.env` to set up this Mini.',
            ],
        });
        return;
    }
    // Select the organization
    const organizations = await fetchAllOrgs();
    const organizationId = await renderSelectPrompt({
        message: 'Select your organization',
        choices: organizations.map(org => ({
            label: org.businessName,
            value: org.id,
        })),
    });
    const result = await miniCreate({
        name: miniName,
        organizationId: `gid://shopify/Organization/${organizationId}`,
        partnersAccessToken: await token(),
    });
    if (result.userErrors.length > 0) {
        if (result.userErrors.length === 1) {
            if (result.userErrors[0].code === 'TOO_MANY_MINIS') {
                renderError({
                    body: `You have reached the maximum number of Shop Minis for your organization. Please contact support to request more.`,
                });
                process.exit(0);
            }
            else {
                throw new AbortError(result.userErrors[0].message);
            }
        }
        else {
            throw new AbortError(result.userErrors.map(({ message }) => message).join('\n'));
        }
    }
    // Append the new SHOP_MINIS_API_KEY to the .env file
    envFileContents += `\nSHOP_MINIS_API_KEY=${result.token}`;
    fs.writeFileSync(envFilePath, envFileContents, {
        encoding: 'utf-8',
    });
    // Sync the manifest
    if (result.mini) {
        syncManifest({ handle: result.mini.handle });
        renderSuccess({
            headline: 'Shop Mini created',
            body: [
                'Shop Mini with handle',
                {
                    bold: result.mini.handle,
                },
                'has been created.',
            ],
        });
    }
}
export function loadCommand(parentProgram) {
    const command = new Command()
        .name('setup')
        .description('Set up a new Mini.')
        .action(async () => {
        try {
            await loginAndSetup();
        }
        catch (error) {
            handleError(error);
        }
    });
    parentProgram.addCommand(command);
}
//# sourceMappingURL=index.js.map
import { Command } from 'commander';
import { renderError, renderSelectPrompt, renderSuccess, } from '@shopify/cli-kit/node/ui';
import { handler as handleError } from '@shopify/cli-kit/node/error';
import { fetchAllOrgs, fetchAppsForOrg, token, } from '../../data/partners/query.js';
import { miniLinkApp } from '../../data/mini-link-app.js';
import { assertNetworkAndAuth } from '../../utils/common-tasks.js';
export const command = new Command()
    .name('link')
    .description('Link a Shopify app.')
    .option('--primary', 'Set this as the primary app.')
    .action(async ({ primary }) => {
    const allOrgs = await fetchAllOrgs();
    const orgId = (await renderSelectPrompt({
        message: 'Select your organization',
        choices: allOrgs.map(org => ({
            label: org.businessName,
            value: org.id,
        })),
    }));
    const apps = await fetchAppsForOrg(orgId);
    const appId = (await renderSelectPrompt({
        message: 'Select your app',
        choices: apps.apps.map(app => ({
            label: app.title,
            value: app.id,
        })),
    }));
    const selectedApp = apps.apps.find(app => app.id === appId);
    if (!selectedApp) {
        throw new Error('App API key is required');
    }
    try {
        await assertNetworkAndAuth();
        // TODO: handle needs to be unique
        const { userErrors, mini } = await miniLinkApp({
            appApiKey: selectedApp.apiKey,
            partnersAccessToken: await token(),
            primary,
        });
        if (userErrors.length > 0) {
            renderError({
                headline: 'Error linking app',
                body: userErrors.map(error => error.message),
            });
        }
        if (mini) {
            renderSuccess({
                headline: 'App linked',
                body: [
                    'Shopify app',
                    {
                        bold: selectedApp.title,
                    },
                    'has been linked to your Shop Mini.',
                ],
            });
        }
    }
    catch (error) {
        handleError(error);
    }
});
//# sourceMappingURL=link.js.map
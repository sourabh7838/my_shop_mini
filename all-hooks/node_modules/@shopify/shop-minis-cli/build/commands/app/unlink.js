import { Command } from 'commander';
import { renderError, renderSelectPrompt, renderSuccess, } from '@shopify/cli-kit/node/ui';
import { handler as handleError } from '@shopify/cli-kit/node/error';
import { getLinkedApps } from '../../data/get-linked-apps.js';
import { miniUnlinkApp } from '../../data/mini-unlink-app.js';
import { assertNetworkAndAuth } from '../../utils/common-tasks.js';
export const command = new Command()
    .name('unlink')
    .description('Unlink a development Shopify app.')
    .action(async () => {
    const linkedApps = await getLinkedApps();
    // Only development apps are supported for unlinking
    if (!linkedApps?.developmentShopifyApps?.length) {
        renderError({
            headline: 'Error unlinking app',
            body: ['No development apps linked to your Shop Mini'],
        });
        return;
    }
    const appId = (await renderSelectPrompt({
        message: 'Select the development app to unlink',
        choices: linkedApps.developmentShopifyApps.map(app => ({
            label: app.title,
            value: app.id,
        })),
    }));
    const selectedApp = linkedApps.developmentShopifyApps.find(app => app.id === appId);
    try {
        await assertNetworkAndAuth();
        const result = await miniUnlinkApp({
            appId,
        });
        if (result.userErrors.length) {
            renderError({
                headline: 'Error unlinking app',
                body: result.userErrors.map(error => error.message),
            });
            return;
        }
        renderSuccess({
            headline: 'App unlinked',
            body: [
                'Shopify app',
                {
                    bold: selectedApp.title,
                },
                'has been unlinked from your Shop Mini.',
            ],
        });
    }
    catch (error) {
        handleError(error);
    }
});
//# sourceMappingURL=unlink.js.map
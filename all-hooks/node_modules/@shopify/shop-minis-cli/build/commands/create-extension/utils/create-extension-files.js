import path from 'node:path';
import { AbortError, handler as handleError } from '@shopify/cli-kit/node/error';
import { outputDebug, outputWarn } from '@shopify/cli-kit/node/output';
import { renderSelectPrompt } from '@shopify/cli-kit/node/ui';
import { ExtensionTarget } from '../../../constants/extensions.js';
import { DEFAULT_OUTPUT_DIR, EXTENSION_PAGE_CONFIG, EXTENSION_TARGETS_WITH_TEMPLATES, EXTENSION_TYPE_CONFIG, } from '../constants.js';
import { addTargetToConfig } from '../utils/add-target-to-config.js';
import { createExtensionFromTemplate } from '../utils/create-from-template.js';
function isExtensionTarget(value) {
    return Object.values(ExtensionTarget).includes(value);
}
function getExtensionType(value, possibleExtensionTypes) {
    const extensionType = possibleExtensionTypes.find(type => type === value);
    if (!extensionType) {
        return null;
    }
    return extensionType;
}
export async function createExtensionFiles({ miniName, specifiedTarget, specifiedType, miniOutputDir, }) {
    let target = isExtensionTarget(specifiedTarget)
        ? specifiedTarget
        : null;
    if (!target || !EXTENSION_TARGETS_WITH_TEMPLATES[target]) {
        if (Object.keys(EXTENSION_TARGETS_WITH_TEMPLATES).length > 1) {
            target = (await renderSelectPrompt({
                message: 'Select the extension target where your Mini will be shown. You can check more details here: https://shop.app/minis/docs/extensions/introduction/#steps',
                choices: Object.entries(EXTENSION_TARGETS_WITH_TEMPLATES).map(([key, { label }]) => ({
                    label,
                    value: key,
                })),
            }));
        }
        else {
            target = Object.keys(EXTENSION_TARGETS_WITH_TEMPLATES)[0];
        }
    }
    const targetConfig = EXTENSION_TARGETS_WITH_TEMPLATES[target];
    const possibleExtensionTypes = EXTENSION_PAGE_CONFIG[targetConfig.page].templates;
    let extensionType = getExtensionType(specifiedType, possibleExtensionTypes);
    const specifiedTypeIsValid = Boolean(extensionType);
    if (specifiedType && !specifiedTypeIsValid) {
        outputWarn('The specified extension type is not available for this target, please choose a new one.');
    }
    if (!specifiedTypeIsValid) {
        extensionType = possibleExtensionTypes[0];
    }
    if (!specifiedTypeIsValid && possibleExtensionTypes.length > 1) {
        extensionType = (await renderSelectPrompt({
            message: 'Select the type of extension you want to create',
            choices: possibleExtensionTypes.map(type => ({
                label: EXTENSION_TYPE_CONFIG[type].label,
                value: type,
            })),
        }));
    }
    if (!extensionType) {
        // This should never happen but it helps with typechecking
        return process.exit(1);
    }
    const resolvedOutputDir = path.resolve(miniOutputDir, DEFAULT_OUTPUT_DIR);
    outputDebug(`create-extension target: "${target}", type: "${extensionType}", output: ${resolvedOutputDir}`);
    let configUpdated = false;
    const errors = [];
    try {
        await createExtensionFromTemplate(miniName, targetConfig.page, target, extensionType, resolvedOutputDir);
    }
    catch (error) {
        // If we fail here there's no point continuing
        handleError(error);
        return process.exit(1);
    }
    try {
        await addTargetToConfig(target, miniOutputDir);
        configUpdated = true;
    }
    catch (error) {
        // We can continue at this point with extra instructions for fixing this manually
        errors.push(new AbortError('Could not automatically link your new extension', `Failed to update your mini config: ${error}`, [
            [
                'Manually add your new',
                {
                    command: target,
                },
                'extension to your mini config file',
            ],
        ]));
    }
    const completedFully = errors.length === 0;
    errors.forEach(handleError);
    return {
        configUpdated,
        completedFully,
        target,
    };
}
//# sourceMappingURL=create-extension-files.js.map
import { mkdtemp, stat } from 'node:fs/promises';
import url from 'node:url';
import os from 'os';
import path from 'path';
import { copy } from 'fs-extra';
import _ from 'lodash';
import { replaceStringsInTemplate } from '../../../utils/replace-strings-in-template.js';
const __dirname = url.fileURLToPath(new URL('.', import.meta.url));
const queryDataUseExamples = {
    'product-page': "console.log('Product data from input query:', extensionData?.product)",
    'store-page': "console.log('Shop data from input query:', extensionData?.shop)",
    'order-confirmation-page': "console.log('Order data from input query:', extensionData?.order)",
    'order-management-page': "console.log('Order data from input query:', extensionData?.order)",
};
export async function createExtensionFromTemplate(miniName, extensionPage, extensionTarget, extensionType, outputDir) {
    const tmpDir = await mkdtemp(path.join(os.tmpdir(), `${extensionPage}-${extensionType}-`));
    const queryName = _.startCase(extensionTarget)
        .replace(/ /g, '')
        .replace(/^Shop/g, '');
    const templateDir = path.join(__dirname, '../../../../templates/extensions');
    const extensionQueryTemplateDir = path.join(templateDir, 'queries', `__template_${extensionPage}`);
    const extensionComponentTemplateDir = path.join(templateDir, 'components', `__template_${extensionType}`);
    const extensionDestinationDir = path.join(outputDir, extensionTarget);
    const stringsToReplace = {
        __MINI_APP_NAME_PASCAL_CASE__: _.startCase(miniName).replace(/ /g, ''),
        __EXTENSION_TARGET_PASCAL_CASE__: _.startCase(extensionTarget).replace(/ /g, ''),
        __QUERY_NAME__: queryName,
        __EXAMPLE_QUERY_DATA_USE__: queryDataUseExamples[extensionPage],
    };
    try {
        await stat(extensionQueryTemplateDir);
    }
    catch (_err) {
        throw new Error(`Template not found: ${extensionQueryTemplateDir}`);
    }
    try {
        await stat(extensionComponentTemplateDir);
    }
    catch (_err) {
        throw new Error(`Template not found: ${extensionComponentTemplateDir}`);
    }
    await copy(extensionQueryTemplateDir, tmpDir);
    await copy(extensionComponentTemplateDir, tmpDir);
    await replaceStringsInTemplate(tmpDir, stringsToReplace);
    await copy(tmpDir, extensionDestinationDir);
}
//# sourceMappingURL=create-from-template.js.map
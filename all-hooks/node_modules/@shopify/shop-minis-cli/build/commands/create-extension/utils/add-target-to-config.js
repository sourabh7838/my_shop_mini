import { readFile, writeFile } from 'node:fs/promises';
import path from 'node:path';
import { outputDebug } from '@shopify/cli-kit/node/output';
import _ from 'lodash';
import { ensureImportOf, ensureObjectProperty, findObjectExpression, j, } from '../../../utils/codemod.js';
const runCodemod = (fileContents, target) => {
    const root = j(fileContents);
    const importName = _.startCase(target).replace(/ /g, '').replace(/^Shop/g, '');
    const importPath = `./targets/${target}/render`;
    const originalImportName = 'Render';
    const configObject = findObjectExpression(root, 'config');
    if (!configObject) {
        throw new Error('Could not find config object');
    }
    ensureImportOf(root, importPath, originalImportName, importName);
    const targetsObject = ensureObjectProperty({
        obj: configObject,
        key: 'Targets',
        defaultValue: j.objectExpression([]),
    });
    const targetsValue = targetsObject.value;
    if (targetsValue.type !== 'ObjectExpression') {
        throw new Error(`Unexpected type for Targets. Expected: ObjectExpression, Found: ${targetsValue.type}`);
    }
    ensureObjectProperty({
        obj: targetsValue,
        key: target,
        defaultValue: j.identifier(importName),
        overwrite: true,
    });
    return root.toSource();
};
export async function addTargetToConfig(target, miniBasePath) {
    const configFilePath = path.join(miniBasePath, 'src', 'index.tsx');
    outputDebug(`Adding ${target} target to ${configFilePath}`);
    const configFile = await readFile(configFilePath, 'utf8');
    if (!configFile || !configFile.includes('MiniAppConfig')) {
        throw new Error(`Couldn't find a config in ${configFilePath}`);
    }
    const result = runCodemod(configFile, target);
    if (result === configFile) {
        outputDebug(`No changes made to ${configFilePath}`);
        return;
    }
    outputDebug(`Saving changes to ${configFilePath}`);
    await writeFile(configFilePath, result, 'utf8');
}
//# sourceMappingURL=add-target-to-config.js.map
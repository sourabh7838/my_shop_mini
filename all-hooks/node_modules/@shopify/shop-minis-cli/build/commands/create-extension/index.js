import path from 'node:path';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { renderSuccess } from '@shopify/cli-kit/node/ui';
import { Command, Option } from 'commander';
import { ExtensionType } from '../../constants/extensions.js';
import { getMiniManifest, manifestExists } from '../../utils/minis-manifest.js';
import { getRunBinCommand } from '../../utils/package-manager.js';
import { getMiniBasePath } from '../../utils/path.js';
import { isStandaloneMini } from '../../utils/standalone.js';
import { DEFAULT_OUTPUT_DIR, EXTENSION_TARGETS_WITH_TEMPLATES_KEYS, } from './constants.js';
import { formatExtensionFiles } from './utils/format-extension-files.js';
import { createExtensionFiles } from './utils/create-extension-files.js';
export function loadCommand(parentProgram) {
    const command = new Command()
        .name('create-extension')
        .description('Add a new extension to your Mini.')
        .addOption(new Option('--target <extension target>', 'The location where the extension will be rendered.').choices(EXTENSION_TARGETS_WITH_TEMPLATES_KEYS))
        .addOption(new Option('--type <extension type>', 'The type of extension to create.').choices(Object.values(ExtensionType)))
        .option('--silent')
        .option('--verbose', 'Print debugging messages.') // compatible with cli-kit
        .action(async (args) => {
        outputDebug(`create-extension args ${JSON.stringify(args)}`);
        const manifest = getMiniManifest();
        const resolvedOutputDir = path.resolve(getMiniBasePath(), DEFAULT_OUTPUT_DIR);
        const { configUpdated, completedFully, target } = await createExtensionFiles({
            miniName: manifest.name,
            specifiedTarget: args.target,
            specifiedType: args.type,
            miniOutputDir: getMiniBasePath(),
        });
        await formatExtensionFiles(getMiniBasePath());
        const nextSteps = [
            [
                'To start your mini with your new extension, run:\n',
                {
                    command: await getRunBinCommand('shop-minis dev'),
                },
            ],
        ];
        if (!completedFully) {
            nextSteps.unshift(['Fix the errors output above']);
        }
        renderSuccess({
            headline: completedFully
                ? 'Extension created successfully'
                : 'Extension partially created',
            body: [
                {
                    list: {
                        items: [
                            [
                                'Your extension was created at:',
                                {
                                    bold: path.relative(getMiniBasePath(), path.join(resolvedOutputDir, target)),
                                },
                            ],
                            configUpdated
                                ? 'Your minis config file was updated'
                                : 'Your minis config file could not be updated',
                        ],
                    },
                },
            ],
            nextSteps,
        });
    });
    parentProgram.addCommand(command, {
        hidden: !manifestExists() || isStandaloneMini(),
    });
}
//# sourceMappingURL=index.js.map
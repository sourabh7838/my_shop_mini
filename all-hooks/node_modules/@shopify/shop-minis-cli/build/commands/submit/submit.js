import { promisify } from 'util';
import { exec } from 'child_process';
import { renderSuccess, renderTasks, renderConfirmationPrompt, } from '@shopify/cli-kit/node/ui';
import { AbortError, handler as handleError } from '@shopify/cli-kit/node/error';
import { outputInfo, outputDebug, outputWarn } from '@shopify/cli-kit/node/output';
import { edit } from 'external-editor';
import { getRunBinCommand } from '../../utils/package-manager.js';
import { assertNetworkAndAuth } from '../../utils/common-tasks.js';
import { getMiniManifest } from '../../utils/minis-manifest.js';
import { validateDescription } from './validation.js';
import { assertManifestValid, assertNoPendingSubmissions, assertRequiredAssets, createStagedUpload, createSubmission, packageShopMini, uploadSubmission, } from './tasks.js';
import { generateSubmissionArchiveFilename, getSubmissionArchivePath, } from './config.js';
import { assertCoreDependenciesVersion } from './utils/assert-core-dependencies-version.js';
import { requestEntryPointParams } from './utils/request-entry-point-params.js';
const execAsync = promisify(exec);
export const codeBuildChecks = async () => {
    try {
        await renderTasks([
            // We run this task first to ensure auth and network are working.
            // This makes sense because the dependency check needs a network
            {
                title: `Authenticating using Shop Minis Admin API key`,
                task: async () => {
                    await assertNetworkAndAuth();
                },
            }
        ]);
    }
    catch (error) {
        handleError(error);
        return false;
    }
    // TODO: Code checks disabled on web Minis for the POC
    return true;
    try {
        await renderTasks([
            // We run this task first to ensure auth and network are working.
            // This makes sense because the dependency check needs a network
            {
                title: `Authenticating using Shop Minis Admin API key`,
                task: async () => {
                    await assertNetworkAndAuth();
                },
            },
            {
                title: `Checking if dependencies are up to date`,
                task: async () => {
                    await assertCoreDependenciesVersion();
                },
            },
        ]);
    }
    catch (error) {
        handleError(error);
        return false;
    }
    const tscCommand = await getRunBinCommand('tsc');
    const lintCommand = await getRunBinCommand('eslint .');
    try {
        outputInfo('Running typescript checks');
        await execAsync(tscCommand);
        outputInfo('Typescript OK!');
    }
    catch {
        outputWarn('Typescript checks failed');
        const continueWithSubmission = await renderConfirmationPrompt({
            message: 'The code you are about to submit seems to have typescript errors, this might be a reason for rejection. Do you want to continue with the submission?',
        });
        if (!continueWithSubmission) {
            console.log(`Run "${tscCommand}" to see the errors.`);
            return false;
        }
    }
    try {
        outputInfo('Running lint checks');
        await execAsync(lintCommand);
        outputInfo('Lint OK!');
    }
    catch {
        outputWarn('Lint checks failed');
        const continueWithSubmission = await renderConfirmationPrompt({
            message: 'The code you are about to submit seems to have lint errors, this might be a reason for rejection. Do you want to continue with the submission?',
        });
        if (!continueWithSubmission) {
            console.log(`Run "${lintCommand}" to see the errors.`);
            return false;
        }
    }
    return true;
};
export const preSubmitChecks = async () => {
    const tasks = [
        {
            title: `Checking if there are other submissions`,
            task: async () => {
                await assertNoPendingSubmissions();
            },
        },
        {
            title: `Verifying your manifest file`,
            task: async () => {
                await assertManifestValid();
            },
        },
        {
            title: `Checking for required assets`,
            task: async () => {
                await assertRequiredAssets();
            },
        },
    ];
    try {
        await renderTasks(tasks);
    }
    catch (error) {
        // Always output the error first
        handleError(error);
        // If the error doesn't have next steps follow-up with some generic ones
        if (!error || !error?.nextSteps) {
            const submitCmd = await getRunBinCommand('shop-minis submit');
            handleError(new AbortError(`Pre-submission checks failed`, 'Try again and if the issue continues, contact us.', [
                `Try to run "${submitCmd}" again`,
                "Contact Shop if you're having issues",
            ]));
        }
        process.exit(1);
    }
};
async function promptForDescription(predefinedDescription) {
    const template = `## Description (required)

- If this is your first submission, explain in detail what your Mini does and how it works.
- For subsequent submissions, explain in detail any changes you've made.

## Video URL (required for first submission and significant changes)

Include a link to a video demonstrating the Mini's functionality.
  
## Step-by-step testing instructions (required)

For example:

1. Open the Mini
2. Click on the "Test" button
3. See the result

`;
    const continueWithSubmission = await renderConfirmationPrompt({
        message: 'Continue with your preferred editor?',
    });
    if (continueWithSubmission) {
        const description = edit(predefinedDescription ?? template);
        const descriptionValidationResult = validateDescription(description, template);
        if (descriptionValidationResult !== true) {
            outputWarn(descriptionValidationResult);
            return promptForDescription(description);
        }
        return description;
    }
    else {
        process.exit(0);
    }
}
export const completeConfig = async (args) => {
    let { description } = args;
    if (!description || validateDescription(description) !== true) {
        outputInfo('Please provide the testing instructions we need to review your Mini:');
        description = await promptForDescription(description);
    }
    if (getMiniManifest().entry_points?.length >= 1) {
        const entryPointParams = await requestEntryPointParams();
        description += `\n\n## Entry point params \n\n${entryPointParams}`;
    }
    return {
        description,
    };
};
export const doSubmit = async (config) => {
    outputDebug(`Submit config ${JSON.stringify(config)}`);
    const submitTasksData = {
        outputArchiveFilename: null,
        outputArchivePath: null,
        stagedUpload: null,
        submission: null,
    };
    const tasks = [
        {
            title: `Packaging Shop Mini for submission`,
            task: async () => {
                const inputDirectory = process.cwd();
                const matchFilePattern = `**/*`;
                submitTasksData.outputArchiveFilename =
                    generateSubmissionArchiveFilename();
                submitTasksData.outputArchivePath = getSubmissionArchivePath(submitTasksData.outputArchiveFilename);
                await packageShopMini({
                    inputDirectory,
                    outputArchivePath: submitTasksData.outputArchivePath,
                    matchFilePattern,
                    ignore: [
                        '**/*.(spec|test).*',
                        '**/__tests__/**/*',
                        'node_modules/**',
                        '.minis-cache/**',
                        '.git/**',
                        '.env',
                    ],
                });
            },
        },
        {
            title: 'Preparing to upload submission',
            task: async () => {
                if (!submitTasksData.outputArchivePath ||
                    !submitTasksData.outputArchiveFilename) {
                    throw new Error('Expected data for upload submission not found');
                }
                // eslint-disable-next-line require-atomic-updates
                submitTasksData.stagedUpload = await createStagedUpload({
                    outputArchiveFilename: submitTasksData.outputArchiveFilename,
                    outputArchivePath: submitTasksData.outputArchivePath,
                });
            },
        },
        {
            title: 'Uploading submission',
            task: async () => {
                if (!submitTasksData.outputArchivePath ||
                    !submitTasksData.stagedUpload) {
                    throw new Error('Expected data for submission not found');
                }
                await uploadSubmission({
                    url: submitTasksData.stagedUpload.url,
                    headers: JSON.parse(submitTasksData.stagedUpload.headers),
                    outputArchivePath: submitTasksData.outputArchivePath,
                });
            },
        },
        {
            title: 'Finalizing submission',
            task: async () => {
                if (!submitTasksData.stagedUpload) {
                    throw new Error('Expected data for finalizing submission not found');
                }
                // eslint-disable-next-line require-atomic-updates
                submitTasksData.submission = await createSubmission({
                    description: config.description,
                    stagedUploadId: submitTasksData.stagedUpload.id,
                });
            },
        },
    ];
    try {
        await renderTasks(tasks);
        renderSuccess({
            headline: 'Shop Mini submitted for review',
            body: [
                'Thank you for your submission. Your Shop Mini has been added to the review queue. Your submission reference is:',
                {
                    bold: submitTasksData.submission?.reference ?? 'unknown',
                },
            ],
            nextSteps: [
                [
                    'Keep your eyes on your email for communication regarding your submission',
                ],
                [
                    'To check the status of your submission at any point, run',
                    {
                        command: await getRunBinCommand('shop-minis check-submission'),
                    },
                ],
                [
                    'To cancel your submission at any point, run',
                    {
                        command: await getRunBinCommand('shop-minis cancel-submission'),
                    },
                ],
            ],
        });
    }
    catch (error) {
        // Always output the error first
        handleError(error);
        // If the error doesn't have next steps follow-up with some generic ones
        if (!error || !error?.nextSteps) {
            const submitCmd = await getRunBinCommand('shop-minis submit');
            handleError(new AbortError(`Submission failed`, 'Try again and if the issue continues, contact us.', [
                `Try to run "${submitCmd}" again`,
                "Contact Shop if you're having issues",
            ]));
        }
        process.exit(1);
    }
};
//# sourceMappingURL=submit.js.map
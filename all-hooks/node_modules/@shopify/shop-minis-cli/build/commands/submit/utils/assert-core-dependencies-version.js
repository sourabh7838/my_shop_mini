import semver from 'semver';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { AbortError } from '@shopify/cli-kit/node/error';
import { getPackageLatestVersionCommand, getPackageVersion, getRunBinCommand, } from '../../../utils/package-manager.js';
import { execAsync } from '../../../utils/exec-async-child-process.js';
import { CLI_VERSION } from '../../config.js';
import { wrapError } from '../errors.js';
import { isStandaloneMini } from '../../../utils/standalone.js';
export async function assertCoreDependenciesVersion() {
    const isStandalone = isStandaloneMini();
    if (isStandalone) {
        return assertStandaloneCoreDependenciesVersion();
    }
    return assertLegacyCoreDependenciesVersion();
}
export async function assertLegacyCoreDependenciesVersion() {
    const [getLatestCliVersionCommand, getLatestRuntimeVersionCommand, getLatestExtensionsVersionCommand, upgradeCommand,] = await Promise.all([
        getPackageLatestVersionCommand('@shopify/shop-minis-cli'),
        getPackageLatestVersionCommand('@shopify/shop-minis-runtime'),
        getPackageLatestVersionCommand('@shopify/shop-minis-ui-extensions'),
        getRunBinCommand('shop-minis upgrade'),
    ]);
    outputDebug(`Executing \`${getLatestCliVersionCommand}\` and \`${getLatestRuntimeVersionCommand}\` to get the latest CLI and runtime versions`);
    const [{ stdout: latestCliVersionStdout }, { stdout: latestRuntimeVersionStdout }, { stdout: latestExtensionsVersionStdout },] = await Promise.all([
        execAsync({
            cmd: getLatestCliVersionCommand,
        }),
        execAsync({
            cmd: getLatestRuntimeVersionCommand,
        }),
        execAsync({
            cmd: getLatestExtensionsVersionCommand,
        }),
    ]);
    const latestCliVersion = latestCliVersionStdout[0];
    const latestRuntimeVersion = latestRuntimeVersionStdout[0];
    const latestExtensionsVersion = latestExtensionsVersionStdout[0];
    const installedCliVersion = CLI_VERSION;
    const installedRuntimeVersion = await getPackageVersion('@shopify/shop-minis-runtime');
    const installedExtensionsVersion = await getPackageVersion('@shopify/shop-minis-ui-extensions');
    outputDebug(`Latest CLI version is ${latestCliVersion ?? 'not found'} - Installed CLI version is ${installedCliVersion ?? 'not found'}`);
    outputDebug(`Latest runtime version is ${latestRuntimeVersion ?? 'not found'} - Installed runtime version is ${installedRuntimeVersion ?? 'not found'}`);
    outputDebug(`Latest extensions version is ${latestExtensionsVersion ?? 'not found'} - Installed extensions version is ${installedExtensionsVersion ?? 'not found'}`);
    assertDependencyVersion({
        dependencyName: '@shopify/shop-minis-cli',
        currentVersion: installedCliVersion,
        expectedVersion: latestCliVersion,
        suggestedSolution: upgradeCommand,
    });
    assertDependencyVersion({
        dependencyName: '@shopify/shop-minis-runtime',
        currentVersion: installedRuntimeVersion,
        expectedVersion: latestRuntimeVersion,
        suggestedSolution: upgradeCommand,
    });
    if (installedExtensionsVersion !== 'not found') {
        assertDependencyVersion({
            dependencyName: '@shopify/shop-minis-ui-extensions',
            currentVersion: installedExtensionsVersion,
            expectedVersion: latestExtensionsVersion,
            suggestedSolution: upgradeCommand,
        });
    }
}
export async function assertStandaloneCoreDependenciesVersion() {
    const [getLatestCliVersionCommand, getLatestSdkVersionCommand, upgradeCommand,] = await Promise.all([
        getPackageLatestVersionCommand('@shopify/shop-minis-cli'),
        getPackageLatestVersionCommand('@shopify/shop-minis-sdk'),
        getRunBinCommand('shop-minis upgrade'),
    ]);
    const [{ stdout: latestCliVersionStdout }, { stdout: latestSdkVersionStdout }] = await Promise.all([
        execAsync({
            cmd: getLatestCliVersionCommand,
        }),
        execAsync({
            cmd: getLatestSdkVersionCommand,
        }),
    ]);
    const latestCliVersion = latestCliVersionStdout[0];
    const latestSdkVersion = latestSdkVersionStdout[0];
    const installedCliVersion = CLI_VERSION;
    const installedSdkVersion = await getPackageVersion('@shopify/shop-minis-sdk');
    outputDebug(`Latest CLI version is ${latestCliVersion ?? 'not found'} - Installed CLI version is ${installedCliVersion ?? 'not found'}`);
    outputDebug(`Latest sdk version is ${latestSdkVersion ?? 'not found'} - Installed sdk version is ${installedSdkVersion ?? 'not found'}`);
    assertDependencyVersion({
        dependencyName: '@shopify/shop-minis-cli',
        currentVersion: installedCliVersion,
        expectedVersion: latestCliVersion,
        suggestedSolution: upgradeCommand,
    });
    assertDependencyVersion({
        dependencyName: '@shopify/shop-minis-sdk',
        currentVersion: installedSdkVersion,
        expectedVersion: latestSdkVersion,
        suggestedSolution: upgradeCommand,
    });
}
function assertDependencyVersion({ dependencyName, currentVersion, expectedVersion, suggestedSolution, }) {
    try {
        const isUpToDate = semver.eq(currentVersion ?? '0.0.0', expectedVersion);
        if (!isUpToDate) {
            throw new AbortError(`${dependencyName} has to be updated`, `Current version: ${currentVersion} (latest: ${expectedVersion})`, [['Use', { command: suggestedSolution }, 'to update']]);
        }
    }
    catch (error) {
        if (error instanceof AbortError) {
            throw error;
        }
        throw wrapError(error, `Unable to detect and compare the current and latest versions of ${dependencyName}\n\n` +
            `Installed version is ${currentVersion ?? 'not found'}\n` +
            `Latest version is ${expectedVersion ?? 'not found'}\n\n`, { separator: '' });
    }
}
//# sourceMappingURL=assert-core-dependencies-version.js.map
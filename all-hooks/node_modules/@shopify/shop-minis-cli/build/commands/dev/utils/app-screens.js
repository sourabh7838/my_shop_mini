import { outputDebug } from '@shopify/cli-kit/node/output';
import prompts from 'prompts';
import { getEnvConfigValue, setEnvConfigValue } from './env-config.js';
import { getDeeplink } from './deeplink.js';
export const screens = ['Home feed', 'Store', 'Product', 'Order Management'];
export async function promptForScreen() {
    const value = (await prompts({
        type: 'autocomplete',
        name: 'value',
        limit: 11,
        initial: getEnvConfigValue('DEFAULT_SCREEN'),
        message: 'Select the page to open',
        choices: screens.map(screen => ({
            title: screen,
            value: screen,
        })),
        suggest: async (input, choices) => {
            const regex = new RegExp(input, 'i');
            return choices.filter(choice => regex.test(choice.title));
        },
    })).value;
    if (value) {
        setEnvConfigValue('DEFAULT_SCREEN', value);
    }
    return value;
}
export function getDeeplinkForScreen(screenType, resourceId) {
    let path;
    switch (screenType) {
        case 'Store':
            path = `shopifystore/${resourceId}`;
            break;
        case 'Product':
            path = `p/${resourceId}`;
            break;
        case 'Order Management':
            path = `u/orders/${resourceId}`;
            break;
        case 'Home feed':
        default:
            path = 'home-feed';
            break;
    }
    const deeplink = `arrive://${path}`;
    outputDebug(`Deeplink: ${deeplink}`);
    return deeplink;
}
export async function promptForResourceId(screenType) {
    let message;
    switch (screenType) {
        case 'Home feed':
            return null;
        case 'Product':
            message = 'Enter the GID of the product';
            break;
        case 'Store':
            message = 'Enter the GID of the Shop';
            break;
        case 'Order Management':
            message = 'Enter the GID of the order';
            break;
        default:
            message = 'Enter the GID of the resource';
    }
    const configKey = `DEFAULT_${screenType.replace(' ', '_').toUpperCase()}_ID`;
    const { idInput } = await prompts({
        type: 'text',
        name: 'idInput',
        initial: getEnvConfigValue(configKey),
        message,
        validate: value => {
            const isValidGID = /^gid:\/\/shopify\/(Shop|Order|Product)\/\d+$/.test(value);
            return isValidGID
                ? true
                : 'ID must be in the format gid://shopify/{Type}/{Number}, where {Type} is Shop, Order, or Product and {Number} is a valid number';
        },
    });
    if (idInput) {
        setEnvConfigValue(configKey, idInput);
    }
    return idInput ? parseInt(idInput.split('/').pop(), 10) : null; // Convert input to a number
}
export function checkForExtensions(screenType, options) {
    const hasExtensions = (prefix) => options?.extensionTargets?.some(target => target.startsWith(prefix));
    outputDebug(`store extension found: ${hasExtensions('shop.store')}`);
    outputDebug(`product extension found: ${hasExtensions('shop.product')}`);
    outputDebug(`order extension found: ${hasExtensions('shop.order-')}`);
    let message;
    switch (screenType) {
        case 'Store':
            if (!hasExtensions('shop.store')) {
                message = 'No store extensions found.';
            }
            break;
        case 'Product':
            if (!hasExtensions('shop.product')) {
                message = 'No product extensions found.';
            }
            break;
        case 'Order Management':
            if (!hasExtensions('shop.order-')) {
                message = 'No order management extensions found.';
            }
            break;
        case 'Home feed':
        default:
            return;
    }
    if (message) {
        console.error(`
${message} Add extensions with \`npx shop-minis create-extension\`
      `);
    }
}
export async function promptForDevPanelDeeplink({ miniHandle, isWeb, options, tunnelListener, }) {
    const hasExtensions = (options?.extensionTargets?.length ?? 0) > 0;
    // If no extensions, directly return the Mini viewer deeplink
    if (!hasExtensions) {
        return getDeeplink({
            miniHandle,
            options,
            universalLink: true,
            tunnelListener,
            isWeb,
        });
    }
    const { value } = await prompts({
        type: 'select',
        name: 'value',
        message: 'Select option',
        choices: [
            {
                title: 'Open Mini viewer',
                description: 'Open the Mini in a fullscreen viewer',
                value: 'mini',
            },
            {
                title: 'Open a screen in the Shop app',
                description: 'Navigate to a specific shop/product/order screen in the Shop app',
                value: 'inApp',
            },
        ],
    });
    if (value === 'mini') {
        return getDeeplink({
            miniHandle,
            options,
            universalLink: true,
            tunnelListener,
            isWeb,
        });
    }
    else if (value === 'inApp') {
        const screen = await promptForScreen();
        if (!screen) {
            return;
        }
        const resourceId = await promptForResourceId(screen);
        if (screen !== 'Home feed' && !resourceId) {
            return;
        }
        const redirect = getDeeplinkForScreen(screen, resourceId);
        return getDeeplink({
            miniHandle,
            options,
            universalLink: true,
            redirect,
            tunnelListener,
            isWeb: false,
        });
    }
}
//# sourceMappingURL=app-screens.js.map
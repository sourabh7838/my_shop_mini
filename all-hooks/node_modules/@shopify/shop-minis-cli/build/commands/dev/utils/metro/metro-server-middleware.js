import url from 'url';
import path from 'node:path';
import { readFileSync } from 'node:fs';
import serve from 'serve-static';
import connect from 'connect';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { getExtensionInputQueriesFolderPath } from '../../../../utils/extensions.js';
/**
 * mutates the received metro config param to inject a custom middleware.
 * needed because of https://github.com/facebook/metro/issues/660
 */
export function buildMetroServerMiddleware(options) {
    return connect()
        .use('/symbolicate', rawBodyMiddleware)
        .use('/dev-panel', devPanelMiddleware)
        .use('/status', statusPageMiddleware)
        .use('/input-query', inputQueryMiddlewareFactory(options));
}
// reference https://github.com/react-native-community/cli/blob/main/packages/cli-server-api/src/rawBodyMiddleware.ts
function rawBodyMiddleware(req, _res, next) {
    ;
    req.rawBody = '';
    req.setEncoding('utf8');
    req.on('data', (chunk) => {
        ;
        req.rawBody += chunk;
    });
    req.on('end', () => {
        next();
    });
}
// reference https://github.com/react-native-community/cli/blob/86df104250608977130378b9b59d8a9e12d0212a/packages/cli-server-api/src/statusPageMiddleware.ts
function statusPageMiddleware(_req, res) {
    res.end('packager-status:running');
}
function devPanelMiddleware(...args) {
    const indexFilePath = path.join(process.cwd(), 'node_modules', '@shopify', 'shop-minis-cli', 'build', 'dev-panel');
    return serve(indexFilePath)(...args);
}
export const DEV_PANEL_BASE_URL = `http://localhost:8082/dev-panel`;
export function inputQueryMiddlewareFactory(options) {
    return function inputQueryMiddleware(req, res) {
        if (!req.url || !options.extensionTargets?.length) {
            res.end();
            return;
        }
        const urlParts = url.parse(req.url);
        let target = '';
        if (urlParts.pathname === '/') {
            outputDebug('No target specified, using the first target.');
            target = options.extensionTargets[0];
        }
        else {
            target = urlParts.pathname?.split('/')[1] ?? '';
        }
        if (target) {
            const inputQueriesFolderPath = getExtensionInputQueriesFolderPath(target);
            const queryFilePath = path.join(inputQueriesFolderPath, 'input.graphql');
            try {
                const queryFile = readFileSync(queryFilePath);
                res.end(queryFile);
            }
            catch {
                console.error(`Unable to read a query file for target ${target}`);
                res.end();
            }
        }
        else {
            console.error(`Your mini does not support any extension targets yet`);
            res.end();
        }
    };
}
//# sourceMappingURL=metro-server-middleware.js.map
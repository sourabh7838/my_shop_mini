import { createRequire } from 'node:module';
import path from 'path';
import { loadConfig } from 'metro-config';
import { createMinisMetroReporter } from './metro-reporter.js';
import { createMinisModuleResolver } from './metro-minis-module-resolver.js';
// Create a require function for use in ESM context
const require = createRequire(import.meta.url);
// modified so that metro uses the mini dependency path and not the CLI dependency when using symlinks to run the CLI (yarn link)
const defaults = require('metro-config/src/defaults/defaults');
defaults.moduleSystem = path.join(path.dirname(require.resolve('metro-runtime/package.json')), 'src', 'polyfills', 'require.js');
export async function getMetroConfig() {
    const metroConfig = await loadConfig({ cwd: process.cwd() });
    // @ts-ignore - @types/metro is outdated and missing this attribute: https://facebook.github.io/metro/docs/configuration/#emptymodulepath
    // Fix required when using yarn link to run a local version of the CLI in a mini
    metroConfig.resolver.emptyModulePath = path.join(metroConfig.projectRoot, 'node_modules', 'metro-runtime/src/modules/empty-module.js');
    // @ts-ignore
    // Fix required when using yarn link to run a local version of the CLI in a mini
    metroConfig.transformer.asyncRequireModulePath = path.join(metroConfig.projectRoot, 'node_modules', 'metro-runtime/src/modules/asyncRequire');
    const reporter = createMinisMetroReporter();
    return {
        ...metroConfig,
        resolver: {
            ...metroConfig.resolver,
            resolveRequest: createMinisModuleResolver(metroConfig),
        },
        reporter,
    };
}
//# sourceMappingURL=metro-config.js.map
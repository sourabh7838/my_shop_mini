import child_process from 'child_process';
import path from 'path';
import chalk from 'chalk';
import _ from 'lodash';
import prompts from 'prompts';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { execAsync } from '../../../utils/exec-async-child-process.js';
import { PATHS, whichAdb, whichEmulator } from '../../config.js';
import { withRetries } from './with-retries.js';
export async function getDevices() {
    const { stdout: devicesList } = await execAsync(`${whichAdb()} devices -l`);
    return devicesList
        .slice(1)
        .filter(name => !name.includes('emulator'))
        .map(name => ({
        name: name.split(' ')[0],
        description: `${name.split(' ')[0]} (device)`,
        type: 'device',
        isBooted: true,
        isAuthorized: true,
    }));
}
export async function getEmulators() {
    const { stdout: devicesList } = await execAsync(`${whichEmulator()} -list-avds`);
    return devicesList.map(name => ({
        name,
        description: `${name} (emulator)`,
        type: 'emulator',
        isBooted: false,
        isAuthorized: true,
    }));
}
export async function promptForAndroidDevices() {
    const devices = await getDevices();
    const emulators = await getEmulators();
    const androidDevices = devices.concat(emulators);
    if (!androidDevices.length) {
        console.log('\nNo connected devices or emulators were found\n');
        console.log(`See ${chalk.blue.underline.bold('https://developer.android.com/studio/command-line/adb#Enabling')} for instructions on how to enable USB debugging on your device.`);
        console.log(`Or ${chalk.blue.underline.bold('https://developer.android.com/studio/run/emulator#get-started')} for instructions on how to create an emulator.`);
        return null;
    }
    const { value } = await prompts({
        type: 'select',
        name: 'value',
        limit: 11,
        message: 'Select a device',
        choices: androidDevices.map(item => {
            return {
                title: item.description,
                value: item,
            };
        }),
        suggest: (input, choices) => {
            const regex = new RegExp(input, 'i');
            return choices.filter((choice) => regex.test(choice.title));
        },
    });
    return value;
}
export async function maybeLaunchEmulator(emulatorName) {
    let emulatorId = await getIdForEmulatorWithName(emulatorName); // if emulatorId is defined the emulator is already running
    if (!emulatorId) {
        emulatorId = await doLaunchEmulator(emulatorName);
    }
    if (emulatorId) {
        await waitForEmulatorToBoot(emulatorId);
    }
    return emulatorId;
}
export async function installShopInEmulator(emulatorId, fileName) {
    outputDebug(`Install Shop in Android emulator ${JSON.stringify({ emulatorId, fileName })}`);
    const binaryPath = path.join(PATHS.CACHE_DIR, fileName);
    await execAsync(`${whichAdb()} -s ${emulatorId} install -r -d "${binaryPath}"`);
}
export async function getInstalledShopVersion(emulatorId) {
    try {
        const versionName = await execAsync(`${whichAdb()} -s ${emulatorId} shell dumpsys package com.shopify.arrive.internal | grep versionName`);
        const versionCode = await execAsync(`${whichAdb()} -s ${emulatorId} shell dumpsys package com.shopify.arrive.internal | grep versionCode`);
        // stdout: ["     versionName=2.86.0"]
        const version = _.last(versionName.stdout[0]?.trim().split('='));
        // stdout: ["     versionCode=1680515537 minSdk=21 targetSdk=33"]
        const build = _.last(versionCode.stdout[0]?.trim().split(' ')[0]?.split('='));
        if (version == null || build == null) {
            return null;
        }
        return {
            version,
            build,
        };
    }
    catch {
        return null;
    }
}
export async function connectDevelopmentServer(emulatorId) {
    await execAsync(`${whichAdb()} -s ${emulatorId} reverse tcp:8082 tcp:8082`);
}
export async function deeplinkToEmulator(emulatorId, originalDeeplink) {
    await connectDevelopmentServer(emulatorId);
    let deeplink = originalDeeplink;
    // If we have a querystring we need to modify it to escape ampersands
    // https://stackoverflow.com/a/45323695
    const queryIndex = deeplink.indexOf('?');
    if (queryIndex !== -1) {
        const urlObj = new URL(deeplink);
        const preQueryString = deeplink.substring(0, queryIndex);
        const queryString = Array.from(urlObj.searchParams.entries())
            .map(([key, value]) => `${key}=${value}`)
            .join('\\&');
        deeplink = `${preQueryString}?${queryString}`;
    }
    await execAsync(`${whichAdb()} -s ${emulatorId} shell am start -a android.intent.action.VIEW -d "${deeplink}"`);
}
async function getNameForEmulatorWithId(emulatorId) {
    const { stdout } = await execAsync(`${whichAdb()} -s ${emulatorId} emu avd name`);
    return stdout[0];
}
async function getIdForEmulatorWithName(emulatorName) {
    const { stdout } = await execAsync(`${whichAdb()} devices`);
    const emulatorIds = stdout.filter(result => result.startsWith('emulator-'));
    for (const emulatorId of emulatorIds) {
        const name = await getNameForEmulatorWithId(emulatorId);
        if (name === emulatorName) {
            return emulatorId;
        }
    }
    return null;
}
async function waitForEmulatorToBoot(emulatorId, timeout = 60 * 2 * 1000 // 2 minutes
) {
    await execAsync(`${whichAdb()} -s ${emulatorId} wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'`, { timeout });
}
function doLaunchEmulator(emulatorName) {
    const emulatorProcess = child_process.spawn(whichEmulator(), [`@${emulatorName}`], {
        stdio: 'ignore',
        detached: true,
    });
    emulatorProcess.unref();
    return new Promise((resolve, reject) => {
        withRetries(() => getIdForEmulatorWithName(emulatorName))
            .then(resolve)
            .catch(reject)
            .finally(() => {
            emulatorProcess.removeAllListeners();
        })
            .catch(() => { });
        emulatorProcess.on('error', ({ message }) => {
            reject(new Error(message));
            emulatorProcess.removeAllListeners();
        });
        emulatorProcess.on('exit', () => {
            reject(new Error('Emulator closed before booting up'));
            emulatorProcess.removeAllListeners();
        });
    });
}
//# sourceMappingURL=android.js.map
import _ from 'lodash';
import { valid as isValidSemver, compareBuild as semverCompare } from 'semver';
import escapeStringRegexp from 'escape-string-regexp';
import { getBuildTypeForBinaryBuildType } from './build-type.js';
import { Platform, getPlatformConfig, getPlatformForBinaryFileExtension, } from './platform.js';
import { BuildType } from './types.js';
/**
 * @example
 * filenames [
 *   "2.76.0+3.release.apk",
 *   "2.76.0+3.release.zip",
 *   "2.77.0+5.release.apk",
 *   "2.77.0+3.release.zip",
 *   "2.77.0+10.release.apk",
 *   "2.77.0+10.release.zip",
 * ]
 * returns { version: "2.77.0", build: "10", type: "release", platform: "ios" }
 */
export function getLatestVersionFromFilesList(filenames, platform, type) {
    const localVersions = _.uniq(filenames
        .filter(isValidBinaryFileName)
        .map(binaryFileNameToMetadata)
        .filter(metadata => isValidSemver(convertToSemver(metadata)))
        .filter(metadata => !metadata.version.startsWith('9.999'))
        .filter(metadata => metadata.platform === platform)
        .filter(metadata => metadata.type === type)).sort((lhs, rhs) => semverCompare(convertToSemver(lhs), convertToSemver(rhs)));
    return localVersions.slice(-1)[0] ?? null;
}
/**
 * @example
 * platform android
 * version 2.76.0
 * build 24
 * type release
 * returns "2.76.0+24.release.apk"
 *
 * platform ios
 * version 2.55.0
 * build 4
 * type nightly
 * returns "2.55.0+4.nightly.zip"
 */
export function metadataToBinaryFileName(metadata) {
    return `${metadata.version}+${metadata.build}.${metadata.type}.${getPlatformConfig(metadata.platform).extension}`;
}
/**
 * @example
 * binaryFileName "2.76.0+123.snapshot.apk"
 * returns true
 *
 * binaryFileName "word.exe"
 * returns false
 */
export function isValidBinaryFileName(binaryFileName) {
    try {
        binaryFileNameToMetadata(binaryFileName);
        return true;
    }
    catch {
        return false;
    }
}
/**
 * @example
 * binaryFileName "2.76.0+123.snapshot.apk"
 * returns { version: "2.16.0", build: "123", type: "snapshot", platform: "android" }
 *
 * binaryFileName "2.16.0+3.zip"
 * returns { version: "2.16.0", build "3", platform: "ios" }
 */
export function binaryFileNameToMetadata(binaryFileName) {
    const allBuildTypes = Object.values(BuildType)
        .map(escapeStringRegexp)
        .join('|');
    const allExtensions = Object.values(Platform)
        .map(platform => getPlatformConfig(platform).extension)
        .map(escapeStringRegexp)
        .join('|');
    const regexPattern = `(?<version>\\d+\\.\\d+\\.\\d+)(\\+(?<build>\\d+))\\.(?<type>${allBuildTypes})\\.(?<extension>${allExtensions})`;
    const matches = binaryFileName.match(regexPattern);
    if (!matches) {
        throw new Error(`Invalid file name: ${binaryFileName}`);
    }
    const { version, build, type, extension } = matches.groups;
    return Object.freeze({
        version,
        build,
        type: getBuildTypeForBinaryBuildType(type),
        platform: getPlatformForBinaryFileExtension(extension),
    });
}
/**
 * @example
 *
 * version "2.76.0"
 * build "3"
 * returns "2.76.0+3"
 */
export function convertToSemver({ version, build, }) {
    return `${version}+${build}`;
}
//# sourceMappingURL=version.js.map
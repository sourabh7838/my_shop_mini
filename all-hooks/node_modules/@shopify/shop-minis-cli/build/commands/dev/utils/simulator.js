import { rm, stat } from 'node:fs/promises';
import { join } from 'node:path';
import chalk from 'chalk';
import _ from 'lodash';
import prompts from 'prompts';
import { outputDebug, outputInfo } from '@shopify/cli-kit/node/output';
import { PATHS } from '../../config.js';
import { execAsync } from '../../../utils/exec-async-child-process.js';
import { cleanupMinisCache } from './cache-cleanup.js';
async function getSelectableSimulators() {
    try {
        const { stdout } = await execAsync('xcrun simctl list devices --json');
        const simctlOutput = JSON.parse(stdout.join(''));
        const simulators = Object.keys(simctlOutput.devices)
            .filter(runtime => runtime.includes('iOS'))
            .reduce((devices, runtime) => [
            ...devices,
            ...simctlOutput.devices[runtime].map(device => ({
                ...device,
                osVersion: _.last(runtime.split('.')),
            })),
        ], []);
        return simulators.filter(device => device.isAvailable && device.name.includes('iPhone'));
    }
    catch (error) {
        if (error.stderr?.includes('unable to find utility "simctl"')) {
            outputInfo(`Xcode needs to be installed to run the Mini on an iOS simulator.\n` +
                `Download Xcode from: ${chalk.blue.underline.bold('https://developer.apple.com/xcode/')}`);
        }
        else {
            console.error('Failed to get simulators.', error);
        }
        return [];
    }
}
export async function promptForSimulator() {
    const devices = await getSelectableSimulators();
    if (devices.length === 0) {
        return null;
    }
    const sortedDevices = [
        ...devices.filter(device => device.state === 'Booted'),
        ...devices.filter(device => device.state !== 'Booted'),
    ];
    const { value } = await prompts({
        type: 'select',
        name: 'value',
        limit: 11,
        message: 'Select a simulator',
        choices: sortedDevices.map(item => {
            const isActive = item.state === 'Booted';
            const format = isActive ? chalk.bold : (text) => text;
            return {
                title: `${format(item.name)} ${chalk.dim(`(${item.osVersion})`)}`,
                value: item.udid,
            };
        }),
        suggest: (input, choices) => {
            const regex = new RegExp(input, 'i');
            return choices.filter((choice) => regex.test(choice.title));
        },
    });
    return value ? devices.find(device => device.udid === value) : null;
}
export async function getInstalledShopVersion(udid) {
    try {
        const { stdout: CFBundleShortVersionString } = await execAsync(`defaults read $(xcrun simctl get_app_container ${udid} com.shopifyinternal.arrive)/Info CFBundleShortVersionString`);
        const { stdout: CFBundleVersion } = await execAsync(`defaults read $(xcrun simctl get_app_container ${udid} com.shopifyinternal.arrive)/Info CFBundleVersion`);
        const installedVersion = CFBundleShortVersionString[0]; // 2.86.0-snapshot+1674205229
        const build = CFBundleVersion[0]; // 1674205229
        const version = installedVersion.split('-')[0];
        return {
            version,
            build,
        };
    }
    catch (error) {
        console.error('\nFailed to get Shop version');
        await cleanupMinisCache();
        return null;
    }
}
export async function bootSimulator(udid) {
    try {
        await execAsync(`xcrun simctl boot ${udid}`);
    }
    catch (error) {
        if (!error.stderr?.match(/Unable to boot device in current state: Booted/)) {
            throw error;
        }
    }
    await execAsync(`open -a Simulator.app --args -CurrentDeviceUDID ${udid}`);
}
export async function installShopInSimulator(udid, fileName) {
    outputDebug(`Install Shop in iOS simulator ${JSON.stringify({ udid, fileName })}`);
    const inputPath = join(PATHS.CACHE_DIR, fileName);
    const outputPath = join(PATHS.CACHE_DIR, 'Shop.app');
    // remove any existing Shop.app
    try {
        await stat(outputPath);
        await rm(outputPath, { recursive: true });
    }
    catch {
        // file doesn't exist, so we can move on
    }
    await execAsync(`unzip -o '${inputPath}' -d '${outputPath}' -x '__MACOSX/*'`);
    await execAsync(`xcrun simctl install ${udid} ${outputPath}`);
}
export async function deeplinkToSimulator(udid, deeplink) {
    // TODO: deeplink doesn't seem to be working in iphone SE
    await execAsync(`xcrun simctl openurl ${udid} "${deeplink}"`);
}
//# sourceMappingURL=simulator.js.map
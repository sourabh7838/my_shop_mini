import chalk from 'chalk';
import open from 'open';
import { androidHomeExists } from '../../config.js';
import { LoadingStateHandlers } from '../../../utils/loading-state-handlers.js';
import { maybeLaunchEmulator, promptForAndroidDevices } from './android.js';
import { getDeeplink, getDeeplinkForMiniViewer } from './deeplink.js';
import { DEV_PANEL_BASE_URL } from './metro/metro-server-middleware.js';
import { Platform } from './platform.js';
import { bootSimulator, promptForSimulator } from './simulator.js';
import { startApp } from './start-app/start-app.js';
import { DEFAULT_MINIS_PROMPT } from './metro/metro-reporter.js';
import { promptForScreen, getDeeplinkForScreen, promptForResourceId, checkForExtensions, promptForDevPanelDeeplink, } from './app-screens.js';
import { handlersForPlatform } from './start-app/config.js';
const { stdin } = process;
function clearTerminal() {
    process.stdout.write('\x1B[2J\x1B[3J\x1B[H');
}
const CTRL_C = '\u0003';
export class InteractiveTerminal {
    miniHandle;
    options;
    isWeb;
    loadingHandlers = new LoadingStateHandlers();
    currentPlatform = null;
    currentDeviceId = null;
    tunnelListener;
    constructor({ options, miniHandle, isWeb, tunnelListener, }) {
        this.miniHandle = miniHandle;
        this.options = options;
        this.isWeb = isWeb;
        this.tunnelListener = tunnelListener;
    }
    startWaitingForCommand = () => {
        if (!stdin.setRawMode) {
            console.warn('Non-interactive terminal, keyboard commands are disabled. Please upgrade to Node 12+');
            return;
        }
        stdin.setRawMode(true);
        stdin.resume();
        stdin.setEncoding('utf8');
        stdin.on('data', this.handleKeyPressWrapped);
    };
    stopWaitingForCommand = () => {
        stdin.removeListener('data', this.handleKeyPressWrapped);
        if (!stdin.setRawMode) {
            console.warn('Non-interactive terminal, keyboard commands are disabled. Please upgrade to Node 12+');
            return;
        }
        stdin.setRawMode(false);
        stdin.resume();
    };
    waitForAnyKeyAndPrintInstructions = async () => {
        console.log('Press any key to continue...');
        this.stopWaitingForCommand();
        if (!stdin.setRawMode) {
            console.warn('Non-interactive terminal, keyboard commands are disabled. Please upgrade to Node 12+');
            return;
        }
        stdin.setRawMode(true);
        stdin.resume();
        return new Promise(resolve => process.stdin.once('data', () => {
            this.logInstructions();
            resolve();
        }));
    };
    logInstructions() {
        const instructions = [
            `› Press ${chalk.cyan.bold(`a`)} │ Open on Android device or emulator`,
            `› Press ${chalk.cyan.bold(`i`)} │ Open in iOS simulator`,
        ];
        if (this.currentDeviceId && this.currentPlatform) {
            if (this.options.extensionTargets?.length &&
                this.options.extensionTargets?.length > 0) {
                instructions.push(`› Press ${chalk.cyan.bold(`v`)} │ Open a screen in the Shop app`);
            }
        }
        instructions.push(`› Press ${chalk.cyan.bold(`q`)} │ Open on iOS device using a QR code`);
        instructions.push('');
        instructions.push(`${chalk.dim('Press Ctrl+C to exit.')}`);
        console.log(instructions.join('\n'));
    }
    start() {
        this.logInstructions();
        this.startWaitingForCommand();
    }
    handleKeyPressWrapped = async (key) => {
        try {
            this.stopWaitingForCommand();
            await this.handleKeyPress(key);
        }
        catch (err) {
            console.log(`Error while executing command for key: ${key}`);
            console.log(err);
        }
        finally {
            console.log(DEFAULT_MINIS_PROMPT);
            this.startWaitingForCommand();
        }
    };
    handleKeyPress = async (key) => {
        switch (key?.toLocaleLowerCase()) {
            case '?': {
                this.logInstructions();
                break;
            }
            case 'a': {
                clearTerminal();
                if (!androidHomeExists()) {
                    this.showSetupAndroidHomeInstructions();
                    break;
                }
                const device = await promptForAndroidDevices();
                if (device) {
                    if (device.type === 'emulator') {
                        this.loadingHandlers.loadingStart('Launching emulator');
                        const emulatorId = await maybeLaunchEmulator(device.name);
                        if (!emulatorId) {
                            this.loadingHandlers.loadingEnd('fail', `Couldn't launch emulator ${device.name}`);
                            break;
                        }
                        await this.startApp(Platform.Android, emulatorId);
                    }
                    else {
                        await this.startApp(Platform.Android, device.name);
                    }
                }
                break;
            }
            case 'i': {
                clearTerminal();
                const simulator = await promptForSimulator();
                if (simulator) {
                    this.loadingHandlers.loadingStart('Launching simulator');
                    await bootSimulator(simulator.udid);
                    await this.startApp(Platform.IOS, simulator.udid);
                }
                else {
                    this.waitForAnyKeyAndPrintInstructions();
                }
                break;
            }
            case 'q': {
                const deepLink = await promptForDevPanelDeeplink({
                    miniHandle: this.miniHandle,
                    options: this.options,
                    tunnelListener: this.tunnelListener,
                    isWeb: this.isWeb,
                });
                if (!deepLink) {
                    return;
                }
                const paramsObj = {
                    deepLink,
                };
                const searchParams = `?${new URLSearchParams(paramsObj).toString()}`;
                open(`${DEV_PANEL_BASE_URL}${searchParams}`);
                break;
            }
            case 'h': {
                const url = 'https://shop.app/minis/docs/';
                console.log(`Opening '${url}'`);
                open(url);
                break;
            }
            case 'o': {
                const { platform, deviceId } = this.getCurrentPlatformAndDeviceId();
                if (platform && deviceId) {
                    this.loadingHandlers.loadingStart('Opening mini viewer');
                    await this.openDeeplink(platform, deviceId, getDeeplinkForMiniViewer(this.miniHandle, this.options));
                }
                break;
            }
            case 'v': {
                const { platform, deviceId } = this.getCurrentPlatformAndDeviceId();
                if (platform && deviceId) {
                    const screen = await promptForScreen();
                    if (!screen) {
                        return;
                    }
                    const resourceId = await promptForResourceId(screen);
                    if (screen !== 'Home feed' && !resourceId) {
                        return;
                    }
                    checkForExtensions(screen, this.options);
                    this.loadingHandlers.loadingStart(`Opening ${screen} screen`);
                    await this.openDeeplink(platform, deviceId, getDeeplinkForScreen(screen, resourceId));
                }
                break;
            }
            case CTRL_C: {
                this.stopWaitingForCommand();
                process.exit(0);
                // @ts-ignore
                break;
            }
            default: {
                break;
            }
        }
    };
    async showSetupAndroidHomeInstructions() {
        console.warn(chalk.red("ANDROID_HOME environment variable is not set. Set Android SDK path to continue. Instructions on how to set it can be found on Android's developer docs."));
        console.log(`See ${chalk.blue.underline.bold('https://developer.android.com/studio/command-line/variables')}`);
        await this.waitForAnyKeyAndPrintInstructions();
    }
    async startApp(platform, deviceId) {
        try {
            this.currentPlatform = platform;
            this.currentDeviceId = deviceId;
            await startApp({
                platform,
                deviceId,
                deeplink: this.deeplink,
                buildType: this.options.buildType,
                snapshotVersion: this.options.snapshotVersion,
            }, this.loadingHandlers);
            // Show all instructions after the app has started
            this.logInstructions();
        }
        catch (err) {
            this.loadingHandlers.loadingEnd('fail', err?.message || err);
        }
    }
    async openDeeplink(platform, deviceId, deeplink) {
        try {
            const { openDeeplink } = handlersForPlatform(platform);
            await openDeeplink(deviceId, deeplink);
            this.loadingHandlers.loadingEnd?.();
        }
        catch (err) {
            this.loadingHandlers.loadingEnd('fail', err?.message || err);
        }
    }
    get deeplink() {
        return getDeeplink({
            miniHandle: this.miniHandle,
            isWeb: this.isWeb,
            options: this.options,
        });
    }
    getCurrentPlatformAndDeviceId() {
        if (!this.currentPlatform || !this.currentDeviceId) {
            console.log(`\n ${chalk.red.bold(`X`)} No platform or device id set. Run ${chalk.cyan.bold(`i`)} for iOS or ${chalk.cyan.bold(`a`)} for Android before opening a deeplink.`);
            return { platform: null, deviceId: null };
        }
        return { platform: this.currentPlatform, deviceId: this.currentDeviceId };
    }
}
//# sourceMappingURL=interactive-terminal.js.map
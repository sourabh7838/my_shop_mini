import { outputDebug } from '@shopify/cli-kit/node/output';
import { getDevelopmentEntryPointParamsQueryString } from '../../../utils/development-params.js';
import { getMiniManifest } from '../../../utils/minis-manifest.js';
import { getReactNativeVersion } from './react-native-version.js';
// import {getReactNativeVersion} from './react-native-version.js'
export function getBundleUrl(host, tunnelListener) {
    if (tunnelListener) {
        return `${tunnelListener.url()}/index.bundle`;
    }
    return `http://${host}:8082/index.bundle`;
}
export function getWebUrl(host, tunnelListener) {
    if (tunnelListener) {
        return `${tunnelListener.url()}`;
    }
    const port = process.env.PORT || 5173;
    return `http://${host}:${port}`;
}
function getExtensionInputQueryUrlPrefix(host, target) {
    return `http://${host}:8082/input-query${target ? `/${target}` : ''}`;
}
function getDeeplinkPayload({ miniHandle, host, isWeb, extensionTargets, redirect, tunnelListener, }) {
    const bundleUrl = getBundleUrl(host, tunnelListener);
    const webUrl = getWebUrl(host, tunnelListener);
    const extensionInputQueryUrlPrefix = getExtensionInputQueryUrlPrefix(host);
    const params = {
        handle: miniHandle,
        isWeb: isWeb ? 'true' : undefined,
        webUrl: isWeb ? webUrl : undefined,
        bundleUrl,
        extensionInputQueryUrlPrefix: isWeb
            ? undefined
            : extensionInputQueryUrlPrefix,
        rnVersion: isWeb ? undefined : getReactNativeVersion(),
        features: getMiniManifest()?.features ?? undefined,
        redirect,
    };
    if (extensionTargets) {
        params.extensionTargets = extensionTargets;
        params.extensionTarget = extensionTargets[0];
    }
    const stringifiedParams = JSON.stringify(params);
    return Buffer.from(stringifiedParams).toString('base64');
}
/**
 * Creates deeplinks to remote minis or remote widget
 *
 * Example deeplink for remote mini:
 * arrive://mini/remote/eyJoYW5kbGUiOiJ0ZXN0IiwiYnVuZGxlVXJsIjoiZ29vZ2xlLmNvbSJ9?shop_id=123
 *
 * Example deeplink for remote widget:
 * arrive://mini/remote-extension/eyJoYW5kbGUiOiJ0ZXN0IiwiYnVuZGxlVXJsIjoiZ29vZ2xlLmNvbSJ9?widgetType=product-upsell&widgetLocation=PRODUCT_PAGE
 *
 * In both cases, the base64 encoded payload contains the bundle url and extra information about the remote environment
 */
export function getDeeplink({ miniHandle, options, isWeb, universalLink = false, redirect, tunnelListener, }) {
    const deeplinkParams = getDeeplinkPayload({
        miniHandle,
        host: options.host,
        isWeb,
        extensionTargets: options.extensionTargets,
        redirect,
        tunnelListener,
    });
    const developmentParams = getDevelopmentEntryPointParamsQueryString();
    const deeplinkPath = '/mini/remote/';
    const deeplink = universalLink
        ? `https://shop.app${deeplinkPath}${deeplinkParams}${developmentParams}`
        : `arrive:/${deeplinkPath}${deeplinkParams}${developmentParams}`;
    outputDebug(`Deeplink: ${deeplink}`);
    return deeplink;
}
export function getDeeplinkForMiniViewer(miniHandle, options) {
    const deeplinkParams = getDeeplinkPayload({
        miniHandle,
        host: options.host,
        isWeb: false,
        extensionTargets: options.extensionTargets,
    });
    const developmentParams = getDevelopmentEntryPointParamsQueryString();
    const deeplink = `arrive://mini/remote/${deeplinkParams}${developmentParams}`;
    outputDebug(`Deeplink: ${deeplink}`);
    return deeplink;
}
//# sourceMappingURL=deeplink.js.map
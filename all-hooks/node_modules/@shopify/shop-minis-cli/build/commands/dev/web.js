import http from 'http';
import path from 'node:path';
import ngrok from '@ngrok/ngrok';
import { Command, Option } from 'commander';
import connect from 'connect';
import serve from 'serve-static';
import internalIp from 'internal-ip';
import _ from 'lodash';
import { handler as handleError } from '@shopify/cli-kit/node/error';
import { createServer } from 'vite';
import { getMiniManifest } from '../../utils/minis-manifest.js';
import { InteractiveTerminal } from './utils/interactive-terminal.js';
import { BuildType } from './utils/types.js';
function devPanelMiddleware(...args) {
    const indexFilePath = path.join(process.cwd(), 'node_modules', '@shopify', 'shop-minis-cli', 'build', 'dev-panel');
    return serve(indexFilePath)(...args);
}
function buildMiddleware() {
    return connect().use('/dev-panel', devPanelMiddleware);
}
export async function loadCommand(parentProgram) {
    const ip = await internalIp.v4();
    const command = new Command()
        .name('dev')
        .description('Start a local development server.')
        .option('--host <host>', 'The host address for the packager.', ip)
        .addOption(new Option('--build-type <buildType>', 'The type of build to perform.')
        .choices(Object.values(BuildType))
        .default(BuildType.Nightly))
        .addOption(new Option('--snapshot-version <version>', 'Specify the snapshot version to use (example: 2.100.0+544).').implies({ buildType: 'snapshot' }))
        .option('--tunnel', 'Use ngrok to create a tunnel to the local server.')
        .action(async (initialOptions) => {
        try {
            const options = initialOptions;
            if (options.tunnel && !process.env.NGROK_AUTHTOKEN) {
                throw new Error('To use the --tunnel flag, you must have an ngrok authtoken set in the NGROK_AUTHTOKEN environment variable. Get your authtoken at https://dashboard.ngrok.com/get-started/setup');
            }
            const devPanelServer = http.createServer(buildMiddleware());
            devPanelServer.listen(8082, () => {
                console.log('Dev panel server is running on port 8082');
            });
            const { handle: miniHandle, name: miniName } = getMiniManifest();
            const server = await createServer({
                root: process.cwd(),
                server: {
                    host: '0.0.0.0',
                    port: 5173,
                    strictPort: true,
                    allowedHosts: ['.ngrok.app', '.ngrok-free.app'],
                },
            });
            await server.listen();
            const tunnelListener = options.tunnel
                ? await ngrok.forward({
                    addr: 5173,
                    authtoken_from_env: true,
                })
                : undefined;
            const interactiveTerminal = new InteractiveTerminal({
                options,
                miniHandle: miniHandle ?? _.kebabCase(miniName),
                tunnelListener,
                isWeb: true,
            });
            interactiveTerminal.start();
        }
        catch (err) {
            delete err.stack; // delete the stack to avoid a verbose error in case the manifest file does not exist
            await handleError(err);
        }
    });
    parentProgram.addCommand(command);
}
//# sourceMappingURL=web.js.map
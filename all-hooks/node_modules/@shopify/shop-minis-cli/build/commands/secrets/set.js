import { Command } from 'commander';
import { renderError, renderSuccess } from '@shopify/cli-kit/node/ui';
import { handler as handleError } from '@shopify/cli-kit/node/error';
import { secretSet } from '../../data/secrets/secret-set.js';
import { assertNetworkAndAuth } from '../../utils/common-tasks.js';
import { getRunBinCommand } from '../../utils/package-manager.js';
export const command = new Command()
    .name('set')
    .description('Set a secret to be used in a proxy configuration.')
    .argument('<secret key>', 'The key of the secret to set.')
    .argument('<secret value>', 'The value of the secret to set.')
    .action(async (secretKeyArg, secretValueArg) => {
    try {
        if (!secretKeyArg || !secretValueArg) {
            const exampleCommand = await getRunBinCommand('shop-minis secrets set my-secret-key my-secret-value');
            renderError({
                headline: 'Missing secret key or value',
                body: [
                    // Below looks ugly but if the string is split into a new array item it gets an extra space character.
                    'Please provide both a secret key and value.\nExample:',
                    {
                        bold: exampleCommand,
                    },
                ],
            });
            return;
        }
        await assertNetworkAndAuth();
        const { secret } = await secretSet({
            key: secretKeyArg,
            value: secretValueArg,
        });
        if (secret) {
            renderSuccess({
                headline: 'Secret set',
                body: [
                    'Secret key',
                    {
                        bold: secret.key,
                    },
                    'has been set for your Shop Mini.',
                ],
            });
        }
        else {
            renderError({
                headline: 'Error setting secret',
                // The API doesn't provide errors yet
                body: 'Please try again.',
            });
        }
    }
    catch (error) {
        handleError(error);
    }
});
//# sourceMappingURL=set.js.map
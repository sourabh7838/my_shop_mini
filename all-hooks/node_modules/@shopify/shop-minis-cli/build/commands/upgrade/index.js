import { execSync } from 'child_process';
import { Command } from 'commander';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { getMiniManifest } from '../../utils/minis-manifest.js';
import { CLI_VERSION as CURRENT_CLI_VERSION } from '../config.js';
import { getRunBinCommand, execUpgradePackageCommand, getPackageVersion, getPackageDependencyVersion, addOverride, execInstallCommand, } from '../../utils/package-manager.js';
import { execAsync } from '../../utils/exec-async-child-process.js';
import { wrapWithLoadingIndicator } from '../../utils/wrap-with-loading-indicator.js';
import { isStandaloneMini } from '../../utils/standalone.js';
import { validateTargetCLIVersion } from './utils/cli.js';
import { clearMetroCache } from './utils/clear-metro-cache.js';
export const command = new Command()
    .name('upgrade')
    .description('Upgrade your Shop Mini configuration to the latest version.')
    .option('--verbose', 'Print debugging messages.')
    .option('--target-cli-version <version>', 'Specify a version of the CLI to upgrade to.', 'latest')
    .option('-y --yes', 'Automatically answer prompts with default options.')
    .option('--no-runtime-upgrade', 'Skip upgrading the @shopify/shop-minis-runtime package.')
    .option('--no-codemod', 'Skip running codemods after upgrading packages.')
    .action(async (args) => {
    const miniName = getMiniManifest().name;
    const { targetCliVersion, runtimeUpgrade, codemod } = args;
    outputDebug(`Upgrade args ${JSON.stringify(args)}`);
    outputDebug(`Upgrading mini "${miniName}" at ${process.cwd()}`);
    validateTargetCLIVersion(targetCliVersion, CURRENT_CLI_VERSION);
    await execUpgradePackageCommand('@shopify/shop-minis-cli', {
        exact: true,
        version: targetCliVersion,
    });
    if (isStandaloneMini()) {
        await execUpgradePackageCommand('@shopify/shop-minis-sdk', {
            exact: true,
        });
    }
    else {
        await execUpgradePackageCommand('@shopify/shop-minis-platform-sdk', {
            exact: true,
        });
        await execUpgradePackageCommand('@shopify/shop-minis-ui-extensions', {
            exact: true,
        });
        if (runtimeUpgrade) {
            await execUpgradePackageCommand('@shopify/shop-minis-runtime', {
                exact: true,
            });
            const reactNativeVersion = await getPackageDependencyVersion('@shopify/shop-minis-runtime', 'react-native');
            if (reactNativeVersion) {
                await addOverride('react-native', reactNativeVersion);
                await execInstallCommand();
            }
        }
    }
    const updatedCLIVersion = await getPackageVersion('@shopify/shop-minis-cli');
    outputDebug(`Updated CLI: ${CURRENT_CLI_VERSION} to ${updatedCLIVersion}`);
    await execAsync({
        cmd: await getRunBinCommand('shop-minis generate-graphql-types'),
        loadingMessage: 'Recreating graphql types',
        successMessage: 'GraphQL types updated',
    });
    if (codemod) {
        // we run codemod in a separate process to make sure it uses the CLI version that was just installed
        const codemodCommand = await getRunBinCommand('shop-minis codemod', [
            `--from-version ${CURRENT_CLI_VERSION}`,
            `--to-version ${updatedCLIVersion}`,
            args.yes ? '-y' : '',
            args.verbose ? '--verbose' : '',
        ].filter(Boolean));
        execSync(codemodCommand, { stdio: 'inherit' });
    }
    await wrapWithLoadingIndicator(clearMetroCache(), {
        loadingMessage: 'Clearing metro cache',
        successMessage: 'Metro cache cleared',
    });
});
export async function loadCommand(parentProgram) {
    parentProgram.addCommand(command);
}
//# sourceMappingURL=index.js.map
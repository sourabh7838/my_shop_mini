import { Command } from 'commander';
import { outputInfo } from '@shopify/cli-kit/node/output';
import { renderWarning, renderError, renderTable } from '@shopify/cli-kit/node/ui';
import { handler as handleError } from '@shopify/cli-kit/node/error';
import { assertNetworkAndAuth } from '../../utils/common-tasks.js';
import { getReportDates } from '../../data/reports.js';
import { ReportTypeEnum } from '../../data/types/autogenerated/shop-minis-admin-api/graphql.js';
export const command = new Command()
    .name('dates')
    .description('List available dates for a specific report type (all dates are in UTC).')
    .argument('<report-type>', 'The report type (CONTENT_IMPRESSIONS, PRODUCT_IMPRESSIONS, SALES, USAGE_STATS)')
    .option('--raw', 'Display only the dates without headers or formatting')
    .action(async (reportType, options) => {
    try {
        await assertNetworkAndAuth();
        // Validate that report type is valid
        if (!Object.values(ReportTypeEnum).includes(reportType)) {
            if (options.raw) {
                // In raw mode, output error message to stderr
                process.stderr.write(`Error: Invalid report type: ${reportType}\n`);
                process.stderr.write(`Valid report types are: ${Object.values(ReportTypeEnum).join(', ')}\n`);
            }
            else {
                // Standard formatted output
                renderWarning({
                    headline: `Invalid report type: ${reportType}`,
                    body: [
                        'Valid report types are:',
                        Object.values(ReportTypeEnum).join(', '),
                        '',
                        'To see all report types, run:',
                        { command: 'shop-minis reports list' },
                    ],
                });
            }
            return;
        }
        try {
            const dates = await getReportDates(reportType);
            if (dates.length === 0) {
                if (!options.raw) {
                    outputInfo('');
                    outputInfo('No dates available for this report type.');
                    outputInfo('');
                }
                return;
            }
            if (options.raw) {
                // When --raw is specified, only output the dates with no formatting
                // but add a comment line about UTC
                process.stdout.write(`# All dates are in UTC (YYYY-MM-DD format)\n`);
                dates.forEach(date => {
                    process.stdout.write(`${date.date}\n`);
                });
            }
            else {
                // Standard formatted output with headers
                outputInfo('');
                outputInfo(`Available dates for report: ${reportType} (All dates are in UTC)`);
                outputInfo('');
                renderTable({
                    rows: dates,
                    columns: {
                        date: { header: 'Date (UTC)' },
                    },
                });
                outputInfo('');
            }
        }
        catch (apiError) {
            // Format the error message appropriately
            const errorMessage = apiError instanceof Error ? apiError.message : String(apiError);
            if (options.raw) {
                // In raw mode, output error message to stderr
                process.stderr.write(`Error: Failed to fetch dates for report type: ${reportType}\n`);
                process.stderr.write(`${errorMessage}\n`);
            }
            else {
                // Standard formatted output
                renderError({
                    headline: `Failed to fetch dates for report type: ${reportType}`,
                    body: [errorMessage],
                });
            }
        }
    }
    catch (error) {
        handleError(error);
    }
});
//# sourceMappingURL=dates.js.map
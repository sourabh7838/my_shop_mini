import { Command } from 'commander';
import envinfo from 'envinfo';
import { wrapWithLoadingIndicator } from '../../utils/wrap-with-loading-indicator.js';
import { getPackageVersion } from '../../utils/package-manager.js';
export const command = new Command()
    .name('info')
    .description('Get relevant version info about OS, toolchain and libraries')
    .option('--verbose', 'print debugging messages')
    .action(async () => {
    const infoPromise = envinfo.run({
        System: ['OS', 'CPU', 'Memory', 'Shell'],
        Binaries: ['Node', 'Yarn', 'npm', 'Watchman'],
        IDEs: ['Xcode', 'Android Studio'],
        Managers: ['CocoaPods'],
        Languages: ['Java'],
        SDKs: ['iOS SDK', 'Android SDK'],
    });
    // we can not use envinfo to fetch these because some of these packages are not direct dependencies of each mini
    // some are transient dependencies via @shopify/shop-minis-runtime
    const packageVersionPromises = [
        getPackageVersion('@shopify/shop-minis-cli'),
        getPackageVersion('@shopify/shop-minis-platform-sdk'),
        getPackageVersion('@shopify/shop-minis-runtime'),
        getPackageVersion('@shopify/shop-minis-sdk'),
        getPackageVersion('react'),
        getPackageVersion('react-native'),
    ];
    const [info, cliVersion, legacySdkVersion, runtimeVersion, standaloneSdkVersion, reactVersion, reactNativeVersion,] = await wrapWithLoadingIndicator(Promise.all([infoPromise, ...packageVersionPromises]), {
        loadingMessage: 'Fetching system information...',
        successMessage: 'System information loaded',
    });
    console.log(`${info}  Packages:`);
    console.log(`    @shopify/shop-minis-cli: ${cliVersion}`);
    console.log(`    @shopify/shop-minis-platform-sdk: ${legacySdkVersion}`);
    console.log(`    @shopify/shop-minis-runtime: ${runtimeVersion}`);
    console.log(`    @shopify/shop-minis-sdk: ${standaloneSdkVersion}`);
    console.log(`    react: ${reactVersion}`);
    console.log(`    react-native: ${reactNativeVersion}`);
    console.log(''); // empty line at the end
});
export async function loadCommand(parentProgram) {
    parentProgram.addCommand(command);
}
//# sourceMappingURL=index.js.map
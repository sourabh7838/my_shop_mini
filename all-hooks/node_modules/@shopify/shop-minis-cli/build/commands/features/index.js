import { Command } from 'commander';
import { renderInfo } from '@shopify/cli-kit/node/ui';
import { AbortError, handler as handleError } from '@shopify/cli-kit/node/error';
import { getRunBinCommand } from '../../utils/package-manager.js';
import { getMiniManifestFeatures, setMiniManifestFeatures, } from '../../utils/minis-manifest.js';
var Feature;
(function (Feature) {
    Feature["FULL_BLEED_VIEWER"] = "FULL_BLEED_VIEWER";
})(Feature || (Feature = {}));
const featureDocs = {
    FULL_BLEED_VIEWER: [
        { bold: 'FULL_BLEED_VIEWER' },
        'Allow your mini app to display to the top of the screen',
        // TODO: Add link to docs once they are written
        // {link: {label: 'More info', url: 'https://google.com'}},
    ],
};
function isFeature(value) {
    return Object.values(Feature).includes(value);
}
export const command = new Command()
    .name('features')
    .description('Manage enabled features.')
    .option('-e, --enable <feature>', 'Enable a specific feature.')
    .option('-d, --disable <feature>', 'Disable a specific feature.')
    .action(async (options) => {
    let currentFeatures = getMiniManifestFeatures();
    let enabledSomething = false;
    let disabledSomething = false;
    if (options.enable) {
        if (isFeature(options.enable)) {
            setMiniManifestFeatures([
                ...new Set([...currentFeatures, options.enable]).values(),
            ]);
            enabledSomething = true;
        }
        else {
            handleError(new AbortError(`Unknown feature: ${options.enable}`));
        }
    }
    else if (options.disable) {
        if (isFeature(options.disable)) {
            setMiniManifestFeatures(currentFeatures.filter(feature => feature !== options.disable));
            disabledSomething = true;
        }
        else {
            handleError(new AbortError(`Unknown feature: ${options.disable}`));
        }
    }
    currentFeatures = getMiniManifestFeatures();
    const changedSomething = enabledSomething || disabledSomething;
    const formattedEnabledFeatures = currentFeatures.map(feature => {
        if (!isFeature(feature)) {
            return [{ bold: feature }, 'Unknown feature'];
        }
        return featureDocs[feature];
    });
    const formattedDisabledFeatures = Object.values(Feature)
        .filter(feature => !currentFeatures.includes(feature))
        .map(feature => {
        return featureDocs[feature];
    });
    const enabledFeaturesOutput = formattedEnabledFeatures.length > 0
        ? {
            list: {
                items: formattedEnabledFeatures,
            },
        }
        : ['No enabled features'];
    const disabledFeaturesOutput = formattedDisabledFeatures.length > 0
        ? {
            list: {
                items: formattedDisabledFeatures,
            },
        }
        : ['No disabled features'];
    const nextSteps = [];
    if (changedSomething) {
        nextSteps.push([
            'Apply your changes locally by restarting your dev server',
            {
                command: await getRunBinCommand('shop-minis start'),
            },
            {
                link: {
                    label: 'Learn more',
                    url: 'https://shop.app/minis/docs/getting-started/cli/#starting-the-cli',
                },
            },
        ]);
        nextSteps.push([
            'Apply your changes in production by creating a submission',
            {
                command: await getRunBinCommand('shop-minis submit'),
            },
            {
                link: {
                    label: 'Learn more',
                    url: 'https://shop.app/minis/docs/publishing/',
                },
            },
        ]);
    }
    if (!enabledSomething) {
        nextSteps.push([
            'To enable a feature, run:',
            {
                command: await getRunBinCommand('shop-minis features --enable <feature>'),
            },
        ]);
    }
    if (!disabledSomething) {
        nextSteps.push([
            'To disable a feature, run:',
            {
                command: await getRunBinCommand('shop-minis features --disable <feature>'),
            },
        ]);
    }
    renderInfo({
        customSections: [
            { title: 'Enabled Features', body: enabledFeaturesOutput },
            { title: 'Disabled Features', body: disabledFeaturesOutput },
            {
                title: 'Next steps',
                body: {
                    list: {
                        items: nextSteps,
                    },
                },
            },
        ],
    });
});
//# sourceMappingURL=index.js.map
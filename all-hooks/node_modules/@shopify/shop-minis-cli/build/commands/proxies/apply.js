import { Command } from 'commander';
import { renderConfirmationPrompt, renderInfo } from '@shopify/cli-kit/node/ui';
import { AbortError, handler as handleError } from '@shopify/cli-kit/node/error';
import { assertNetworkAndAuth } from '../../utils/common-tasks.js';
import { proxiesList } from '../../data/proxies/proxies-list.js';
import { validateManifest } from '../../utils/minis-manifest.js';
import { getLocalProxies, manifestProxiesToRemoteProxies, proxiesDiff, remoteProxiesToManifestProxies, } from '../../utils/proxies.js';
import { proxiesSet } from '../../data/proxies/proxies-set.js';
export function assertManifestValid() {
    const { valid, errors } = validateManifest();
    if (!valid) {
        throw new AbortError('Manifest invalid. Errors:', errors.map(error => `  â€¢ ${error}`).join('\n'), [
            ['Fix the above issues in your', { bold: 'manifest.json' }],
            'Try again and if the issue continues, contact us.',
        ]);
    }
}
export const command = new Command()
    .name('apply')
    .description('Apply your local proxy configuration.')
    .action(async () => {
    try {
        await assertNetworkAndAuth();
        assertManifestValid();
        // Get the remote proxies and convert them to the manifest proxy format
        // This makes nicer diffs for the user (it excludes default values too)
        const remoteProxies = remoteProxiesToManifestProxies(await proxiesList());
        const localProxies = getLocalProxies();
        const { string: diffString, changes } = proxiesDiff(remoteProxies, localProxies);
        let message = 'This will overwrite your proxy configuration in production. If you have already launched your mini proceed with caution';
        // Changes always has at least one entry, >= 2 entries indicates something changed
        if (changes.length === 1) {
            message = `No changes found`;
        }
        else {
            renderInfo({
                headline: 'Changes that will be applied',
                body: [diffString],
            });
        }
        const shouldContinue = await renderConfirmationPrompt({
            defaultValue: false,
            message: [`${message}. Are you sure you want to continue?`],
        });
        if (!shouldContinue)
            return;
        const result = await proxiesSet({
            proxies: manifestProxiesToRemoteProxies(localProxies),
        });
        if (result.proxiesSet.userErrors.length > 0) {
            throw new AbortError('Proxy configuration invalid. Errors:', result.proxiesSet.userErrors.map(error => error.message).join('\n'), [
                ['Please fix the above issues in your', { bold: 'manifest.json' }],
                'Try again and if the issue continues, contact us.',
            ]);
        }
    }
    catch (error) {
        handleError(error);
    }
});
//# sourceMappingURL=apply.js.map
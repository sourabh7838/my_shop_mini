/// <reference types="node" resolution-mode="require"/>
import { exec } from 'child_process';
import { Options as OraOptions } from 'ora';
declare const _execAsync: typeof exec.__promisify__;
type Tail<T extends any[]> = T extends [infer _I, ...infer L] ? L : never;
type ExecOptions = Tail<Parameters<typeof _execAsync>>;
interface CmdOptions {
    cmd: string;
    loadingMessage?: string;
    successMessage?: string;
    errorMessage?: string;
    spinnerOptions?: Omit<OraOptions, 'text' | 'prefixText'>;
}
export declare function execAsync(cmdConfig: CmdOptions | string, ...args: ExecOptions): Promise<{
    stdout: string[];
    stderr: string[];
}>;
export {};

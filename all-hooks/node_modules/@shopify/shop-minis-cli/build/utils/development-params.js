import { createRequire } from 'node:module';
import path from 'node:path';
import { getMiniBasePath } from './path.js';
const ALLOWED_ENTRY_POINT_PARAMS = [
    'product_id',
    'shop_id',
    'product_variant_id',
    'external_id',
    'shop_domain',
    'order_id',
    'category_id',
];
const DEVELOPMENT_PARAMS_FILE_NAME = 'entry-point-params.json';
const DEVELOPMENT_PARAMS_FILE_PATH = path.join(getMiniBasePath(), DEVELOPMENT_PARAMS_FILE_NAME);
/**
 * Reads the content of the file entry-point-params.json in the rootpath of a Mini folder, which should be of the shape Record<string, string>.
 * Then, formats the object as an URL query string and returns it.
 *
 * Returns empty string if the file does not exist or if the format of its content is incorrect.
 */
export function getDevelopmentEntryPointParams() {
    try {
        const localRequire = createRequire(import.meta.url);
        delete localRequire.cache[localRequire.resolve(DEVELOPMENT_PARAMS_FILE_PATH)];
        const persistedParams = localRequire(DEVELOPMENT_PARAMS_FILE_PATH);
        const paramsAsEntries = Object.entries(persistedParams).filter(([key, value]) => ALLOWED_ENTRY_POINT_PARAMS.includes(key) && Boolean(value));
        return Object.fromEntries(paramsAsEntries);
    }
    catch (err) {
        if (err?.code !== 'MODULE_NOT_FOUND' && err?.code !== 'ENOENT') {
            console.log('\n ⚠️  Development entrypoints params ignored due to errors:\n');
            console.log(err);
            console.log('\n');
        }
        // do nothing, the development entrypoint params file is optional and might not exist.
        return {};
    }
}
export function getDevelopmentEntryPointParamsQueryString() {
    const paramsObject = getDevelopmentEntryPointParams();
    const paramsQueryString = new URLSearchParams(paramsObject).toString();
    return paramsQueryString ? `?${paramsQueryString}` : '';
}
//# sourceMappingURL=development-params.js.map
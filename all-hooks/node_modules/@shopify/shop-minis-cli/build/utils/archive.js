import { createWriteStream } from 'node:fs';
import archiver from 'archiver';
import { relativePath } from '@shopify/cli-kit/node/path';
import { glob } from '@shopify/cli-kit/node/fs';
import { outputDebug, outputContent, outputToken, } from '@shopify/cli-kit/node/output';
/**
 * Creates a tar.gz
 *
 * This is a copy of `zip` [from cli-kit](https://github.com/Shopify/cli/blob/0aa5eb4fe34519e10297977e640dc521f9ab1676/packages/cli-kit/src/public/node/archiver.ts#L31)
 *
 * Our version defaults to tar.gz, theirs is hard-coded to zip
 *
 * @param options - ZipOptions.
 */
export async function zip(options, format = 'tar') {
    const { inputDirectory, outputArchivePath, matchFilePattern = '**/*', ignore, } = options;
    outputDebug(outputContent `${format === 'zip' ? 'Zipping' : 'Creating tar.gz of'} ${outputToken.path(inputDirectory)} into ${outputToken.path(outputArchivePath)}`);
    const pathsToZip = await glob(matchFilePattern, {
        cwd: inputDirectory,
        absolute: true,
        dot: true,
        followSymbolicLinks: false,
        ignore,
    });
    return new Promise((resolve, reject) => {
        const archive = archiver(format, { gzip: true });
        const output = createWriteStream(outputArchivePath);
        output.on('close', () => resolve());
        archive.on('error', error => reject(error));
        archive.pipe(output);
        for (const filePath of pathsToZip) {
            const fileRelativePath = relativePath(inputDirectory, filePath);
            archive.file(filePath, { name: fileRelativePath });
        }
        archive.finalize();
    });
}
//# sourceMappingURL=archive.js.map
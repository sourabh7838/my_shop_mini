import _ from 'lodash';
export declare const getPackageManager: (() => Promise<"yarn" | "npm" | "pnpm" | "bun" | "unknown">) & _.MemoizedFunction;
interface UpgradeCommandOptions {
    version?: string;
    exact?: boolean;
}
/**
 * Install a package + update package.json and locks
 */
export declare const getUpgradePackageCommand: (packageName: string, { version, exact }?: UpgradeCommandOptions) => Promise<string>;
export declare const addOverride: (packageName: string, version: string) => Promise<void>;
export declare const execUpgradePackageCommand: (packageName: string, { version, exact }?: UpgradeCommandOptions) => Promise<void>;
/**
 * Install the latest versions that are compatible with the range in package.json
 * Yarn will upgrade in this range if it can and npm will stick with an existing compatible version
 */
export declare const getInstallCommand: () => Promise<"yarn install" | "npm install --legacy-peer-deps">;
export declare const execInstallCommand: () => Promise<void>;
/**
 * Get a package.json script command formatted according to the detected package manager
 */
export declare const getRunScriptCommand: (scriptName: string, scriptArgs?: string[]) => Promise<string>;
/**
 * Get the correct command to start a mini in dev mode.
 *
 * For some reason `formatPackageManagerCommand` messes this up for `npx shop-minis dev`
 */
export declare const getRunDevModeCommand: () => Promise<string>;
/**
 * Get a dependency bin command formatted according to the detected package manager
 */
export declare const getRunBinCommand: (scriptName: string, scriptArgs?: string[]) => Promise<string>;
/**
 * Gets the latest version of a package available in the public npm registry
 */
export declare const getPackageLatestVersionCommand: (packageName: string) => string;
/**
 * Gets the latest alpha version of a package available in the public npm registry
 */
export declare const getPackageAlphaVersionCommand: (packageName: string) => string;
export declare const getPackageLatestVersion: (packageName: string) => Promise<string>;
/**
 * Gets the dependency version of a package available in the public npm registry
 */
export declare const getPackageDependencyVersionCommand: (packageName: string, dependencyName: string) => string;
export declare const hardResetDependencies: () => Promise<[{
    stdout: string[];
    stderr: string[];
}, {
    stdout: string[];
    stderr: string[];
}]>;
export declare const getPackageVersion: (packageName: string) => Promise<string>;
export declare const getPackageDependencyVersion: (packageName: string, dependencyName: string) => Promise<string | undefined>;
interface PackageVersions {
    dependencies: Record<string, string>;
    devDependencies: Record<string, string>;
}
export declare const overridePackageDependencies: (directoryPath: string, versions: PackageVersions) => void;
export declare const overridePackageName: (directoryPath: string, name: string) => void;
export {};

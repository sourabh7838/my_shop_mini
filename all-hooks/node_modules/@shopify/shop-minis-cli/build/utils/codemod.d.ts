import jscodeshift from 'jscodeshift';
export type Root = ReturnType<typeof jscodeshift>;
export declare const j: jscodeshift.JSCodeshift;
/**
 * Find the first import declaration of a module
 *
 * Returns an object containing:
 * - `importDeclaration`: This is the whole import node. This is null if no import is found
 * - `specifier`: This is the specific import specifier node that matches the name/alias. Also null if not found
 *
 * If `importedAsName` is not provided, it will look for an import like:
 * ```
 * import {importedName} from 'importPath'
 * ```
 *
 * If `importedAsName` is provided, it will look for an import like:
 * ```
 * import {importedName as importedAsName} from 'importPath'
 * ```
 */
export declare const findImportOf: (root: import("jscodeshift/src/Collection.js").Collection<any>, importPath: string, importedName: string, importedAsName?: string) => {
    specifier: import("ast-types").namedTypes.ImportSpecifier | import("ast-types").namedTypes.ImportDefaultSpecifier | import("ast-types").namedTypes.ImportNamespaceSpecifier | null;
    importDeclaration: import("ast-types").namedTypes.ImportDeclaration;
};
/**
 * Ensure that an import of a module is present in the file
 *
 * If the import is not present, it will be added below other imports or
 * to the top of the file if no other imports are found
 *
 * Returns the specifier and import declaration nodes that were found, edited or created
 */
export declare const ensureImportOf: (root: import("jscodeshift/src/Collection.js").Collection<any>, importPath: string, importedName: string, importedAsName?: string) => {
    specifier: import("ast-types").namedTypes.ImportSpecifier | import("ast-types").namedTypes.ImportDefaultSpecifier | import("ast-types").namedTypes.ImportNamespaceSpecifier;
    importDeclaration: import("ast-types").namedTypes.ImportDeclaration;
};
/**
 * Find an object expression by its name like
 *
 * ```
 * const objName = {
 *   key: 'value',
 * }
 * ```
 *
 * Returns the object expression node if found, otherwise null
 *
 * If multiple are found, the first one is returned
 */
export declare const findObjectExpression: (root: import("jscodeshift/src/Collection.js").Collection<any>, objName: string) => import("ast-types").namedTypes.ObjectExpression | null;
/**
 * Find an object's property by it's key
 *
 * Returns the property node that was found or null
 */
export declare const findObjectProperty: ({ obj, key, }: {
    obj: jscodeshift.ObjectExpression;
    key: string;
}) => jscodeshift.Property | null;
/**
 * Return all the objects keys
 *
 * Only returns keys of types Identifier and StringLiteral eg
 *
 * const foo = { 'cool-key': 'value', otherKey: 'ok' }
 */
export declare const objectKeys: ({ obj, }: {
    obj: jscodeshift.ObjectExpression;
}) => string[];
/**
 * Ensure that an object has a property with a specific key
 *
 * If the property is not present, it will be added to the object
 *
 * If `defaultValue` is provided, the property will be set to that value if it does not exist
 *
 * If `overwrite` is also true, the property will be replaced with the `defaultValue`
 *
 * Returns the property node that was found or created
 */
export declare const ensureObjectProperty: ({ obj, key, defaultValue, overwrite, }: {
    obj: jscodeshift.ObjectExpression;
    key: string;
    defaultValue: jscodeshift.Property['value'];
    overwrite?: boolean | undefined;
}) => import("ast-types").namedTypes.Property;

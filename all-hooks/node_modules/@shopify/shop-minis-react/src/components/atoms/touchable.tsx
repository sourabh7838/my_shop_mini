import * as React from 'react'

import {motion, HTMLMotionProps, useAnimationControls} from 'motion/react'

export const Touchable = ({
  children,
  onClick,
  stopPropagation = false,
  ...props
}: HTMLMotionProps<'div'> & {
  onClick?: React.MouseEventHandler<HTMLDivElement>
  stopPropagation?: boolean
}) => {
  const ref = React.useRef<HTMLDivElement>(null)
  const controls = useAnimationControls()

  const handleClick = React.useCallback(
    (event: React.MouseEvent<HTMLDivElement>) => {
      if (stopPropagation) event.stopPropagation()
      onClick?.(event)
    },
    [stopPropagation, onClick]
  )

  // Handle animations manually when stopPropagation is true to prevent parent from receiving event
  React.useEffect(() => {
    if (!stopPropagation || !ref.current) return

    const element = ref.current

    const handlePointerDown = (event: PointerEvent) => {
      event.stopImmediatePropagation()
      event.stopPropagation()

      // Animate to pressed state
      controls.start({
        scale: 0.95,
        opacity: 0.7,
      })
    }

    const handlePointerUp = (event: PointerEvent) => {
      event.stopImmediatePropagation()
      event.stopPropagation()

      // Animate back to normal state
      controls.start({
        scale: 1,
        opacity: 1,
      })
    }

    // Capture pointer event before Motion
    element.addEventListener('pointerdown', handlePointerDown, true)
    element.addEventListener('pointerup', handlePointerUp, true)

    return () => {
      element.removeEventListener('pointerdown', handlePointerDown, true)
      element.removeEventListener('pointerup', handlePointerUp, true)
    }
  }, [stopPropagation, controls])

  return (
    <motion.div
      ref={ref}
      data-touchable="true"
      className="flex w-full"
      animate={stopPropagation ? controls : undefined}
      whileTap={stopPropagation ? undefined : {scale: 0.95, opacity: 0.7}}
      transition={{
        scale: {type: 'tween', duration: 0.08, ease: 'linear'},
        opacity: {type: 'tween', duration: 0.08, ease: 'linear'},
      }}
      onClick={handleClick}
      style={{
        touchAction: stopPropagation ? 'manipulation' : undefined,
      }}
      {...props} // TODO: We may need to filter out some props, as we only need motion props
    >
      {children}
    </motion.div>
  )
}

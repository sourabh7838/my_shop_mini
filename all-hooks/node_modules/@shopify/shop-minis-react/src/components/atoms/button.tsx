import * as React from 'react'

import {cva, type VariantProps} from 'class-variance-authority'
import {Slot as SlotPrimitive} from 'radix-ui'

import {cn} from '../../lib/utils'

import {Touchable} from './touchable'

const buttonVariants = cva(
  "flex w-full items-center justify-center gap-3 whitespace-nowrap rounded-xl text-base font-semibold disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-5 shrink-0 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        primary:
          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',
        secondary: 'bg-slate-900 text-white shadow-xs hover:bg-slate-800',
        tertiary:
          'bg-slate-100 text-slate-900 shadow-xs hover:bg-slate-200 dark:bg-slate-800 dark:text-slate-100 dark:hover:bg-slate-700',
        blurred:
          'bg-black/20 text-white shadow-xs hover:bg-black/30 backdrop-blur-md border border-white/20',
        text: 'bg-transparent text-foreground hover:bg-accent hover:text-accent-foreground',
        borderless: 'bg-transparent text-primary hover:text-primary/80',
        borderlessUnbranded:
          'bg-transparent text-foreground hover:text-foreground/80',
        outlined:
          'border border-border bg-background text-foreground shadow-xs hover:bg-accent hover:text-accent-foreground',
        dangerous:
          'bg-destructive text-white shadow-xs hover:bg-destructive/90',
        'outlined-dangerous':
          'border border-destructive bg-transparent text-destructive shadow-xs hover:bg-destructive/10',
      },
      size: {
        default: 'h-9 px-4 py-2 has-[>svg]:px-3',
        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
        icon: 'size-9',
      },
    },
    defaultVariants: {
      variant: 'primary',
      size: 'default',
    },
  }
)

function BaseButton({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? SlotPrimitive.Slot : 'button'

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({variant, size, className}))}
      {...props}
    />
  )
}

function Button({
  className,
  variant,
  size,
  onClick,
  stopPropagation = false,
  ...props
}: React.ComponentProps<'button'> &
  VariantProps<typeof buttonVariants> & {stopPropagation?: boolean}) {
  const handleClick = React.useCallback(
    (event: React.MouseEvent<any>) => {
      onClick?.(event)
    },
    [onClick]
  )

  return (
    <Touchable
      onClick={handleClick}
      stopPropagation={stopPropagation}
      className={size === 'icon' ? 'flex w-auto' : 'flex w-full'}
    >
      <BaseButton
        className={className}
        variant={variant}
        size={size}
        {...props}
      />
    </Touchable>
  )
}

export {Button, buttonVariants}

import * as React from 'react'

import {cva, type VariantProps} from 'class-variance-authority'
import {Star} from 'lucide-react'
import {Slot as SlotPrimitive} from 'radix-ui'

import {useShopNavigation} from '../../hooks/navigation/useShopNavigation'
import {cn} from '../../lib/utils'
import {type Shop} from '../../types/minisSDK.generated.d'
import {Touchable} from '../atoms/touchable'

const merchantCardVariants = cva(
  'relative w-full aspect-square overflow-hidden rounded-xl border border-grayscale-l20 bg-grayscale-l0 flex flex-col',
  {
    variants: {
      touchable: {
        true: 'cursor-pointer',
        false: '',
      },
    },
    defaultVariants: {
      touchable: true,
    },
  }
)

function formatReviewCount(count: number): string {
  if (count >= 1000000) {
    return `${Math.floor(count / 100000) / 10}M`
  }
  if (count >= 1000) {
    return `${Math.floor(count / 1000)}K`
  }
  return count.toString()
}

function normalizeRating(rating: number): number {
  return Math.round(rating * 10) / 10
}

export interface MerchantCardRootProps
  extends React.ComponentProps<'div'>,
    VariantProps<typeof merchantCardVariants> {
  touchable?: boolean
  asChild?: boolean
  onPress?: () => void
}

function MerchantCardRoot({
  className,
  touchable = true,
  asChild = false,
  onPress,
  ...props
}: MerchantCardRootProps) {
  const Comp = asChild ? SlotPrimitive.Slot : 'div'

  const content = (
    <Comp
      className={cn(merchantCardVariants({touchable}), className)}
      {...props}
    />
  )

  if (touchable && onPress) {
    return (
      <Touchable
        onClick={onPress}
        whileTap={{opacity: 0.7}}
        transition={{
          opacity: {type: 'tween', duration: 0.08, ease: 'easeInOut'},
        }}
      >
        {content}
      </Touchable>
    )
  }

  return content
}

function MerchantCardImageContainer({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="merchant-card-image-container"
      className={cn('relative overflow-hidden w-full flex-grow', className)}
      {...props}
    />
  )
}

function MerchantCardImage({
  className,
  src,
  alt,
  ...props
}: React.ComponentProps<'img'> & {
  src?: string
  alt?: string
}) {
  return src ? (
    <img
      data-slot="merchant-card-image"
      src={src}
      alt={alt}
      className={cn('w-full h-full object-cover', className)}
      {...props}
    />
  ) : (
    <div className="w-full h-full bg-grayscale-l10" />
  )
}

function MerchantCardLogo({
  className,
  src,
  alt,
  ...props
}: React.ComponentProps<'div'> & {
  src?: string
  alt?: string
}) {
  return (
    <div
      data-slot="merchant-card-logo"
      className={cn(
        'absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2',
        'w-14 h-14 rounded-xl',
        'flex items-center justify-center overflow-hidden',
        className
      )}
      {...props}
    >
      {src ? (
        <img src={src} alt={alt} className="w-full h-full object-cover" />
      ) : (
        <div className="w-full h-full bg-grayscale-l20" />
      )}
    </div>
  )
}

function MerchantCardInfo({className, ...props}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="merchant-card-info"
      className={cn('p-3 space-y-1 flex-shrink-0', className)}
      {...props}
    />
  )
}

function MerchantCardName({
  className,
  children,
  ...props
}: React.ComponentProps<'h3'>) {
  return (
    <h3
      data-slot="merchant-card-name"
      className={cn(
        'text-sm font-medium text-grayscale-d100',
        'truncate overflow-hidden whitespace-nowrap text-ellipsis',
        className
      )}
      {...props}
    >
      {children}
    </h3>
  )
}

function MerchantCardRating({
  className,
  rating,
  reviewCount,
  ...props
}: React.ComponentProps<'div'> & {
  rating?: number | null
  reviewCount?: number
}) {
  if (!rating || !reviewCount) return null

  return (
    <div
      data-slot="merchant-card-rating"
      className={cn(
        'flex items-center gap-1 text-sm text-grayscale-d100',
        className
      )}
      {...props}
    >
      <Star className="h-3.5 w-3.5 fill-current" />
      <>
        {normalizeRating(rating)} ({formatReviewCount(reviewCount)})
      </>
    </div>
  )
}

export interface MerchantCardProps {
  shop: Shop
  touchable?: boolean
}

// Composed MerchantCard component
function MerchantCard({shop, touchable = true}: MerchantCardProps) {
  const {navigateToShop} = useShopNavigation()

  const {
    id,
    name,
    logoImage,
    reviewAnalytics: {averageRating, reviewCount},
  } = shop

  const handlePress = React.useCallback(() => {
    if (!touchable) return
    navigateToShop({shopId: id})
  }, [navigateToShop, id, touchable])

  return (
    <MerchantCardRoot touchable={touchable} onPress={handlePress}>
      <MerchantCardImageContainer>
        {/* TODO: Add featured image */}
        <MerchantCardImage src={undefined} alt={`${name} featured image`} />
        <MerchantCardLogo src={logoImage?.url} alt={`${name} logo`} />
      </MerchantCardImageContainer>

      <MerchantCardInfo>
        <MerchantCardName>{name}</MerchantCardName>
        <MerchantCardRating rating={averageRating} reviewCount={reviewCount} />
      </MerchantCardInfo>
    </MerchantCardRoot>
  )
}

// Export with Object.assign pattern
export const MerchantCardPrimitive = Object.assign(MerchantCardRoot, {
  ImageContainer: MerchantCardImageContainer,
  Image: MerchantCardImage,
  Logo: MerchantCardLogo,
  Info: MerchantCardInfo,
  Name: MerchantCardName,
  Rating: MerchantCardRating,
})

export {
  // Composed component
  MerchantCard,
  // Primitive components for custom composition
  MerchantCardRoot,
  MerchantCardImageContainer,
  MerchantCardImage,
  MerchantCardLogo,
  MerchantCardInfo,
  MerchantCardName,
  MerchantCardRating,
}

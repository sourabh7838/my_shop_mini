class t extends Error {
  constructor({
    component: e,
    hook: n,
    func: i,
    callback: o,
    message: a = "Unknown Error"
  }) {
    let r = a;
    (e || n || i) && (e ? r = `<${e} />` : n ? r = n : i && (r = `${i}()`), o && (r = `${r} ${o}()`), r = `${r}: ${a}`), super(r), this.name = "MiniError";
  }
}
class E extends t {
  constructor(e) {
    super({ message: "Network Error", ...e }), this.name = "MiniNetworkError";
  }
}
class m extends t {
  constructor(e) {
    super({ message: "Entity Not Found", ...e }), this.name = "MiniEntityNotFoundError";
  }
}
const u = (s, e) => e ? e.networkError ? new E({
  ...s,
  message: e.networkError?.message
}) : e.code ? new t({
  ...s,
  message: `${e.code}${e.message ? `: ${e.message}` : ""}`
}) : new t({
  ...s,
  message: e?.message
}) : null;
export {
  m as MiniEntityNotFoundError,
  t as MiniError,
  E as MiniNetworkError,
  u as formatError
};
//# sourceMappingURL=errors.js.map

{"version":3,"file":"useAsyncStorage.js","sources":["../../../src/hooks/storage/useAsyncStorage.ts"],"sourcesContent":["import {useHandleAction} from '../../internal/useHandleAction'\nimport {useShopActions} from '../../internal/useShopActions'\nimport {\n  GetAsyncStorageItemParams,\n  SetAsyncStorageItemParams,\n  RemoveAsyncStorageItemParams,\n} from '../../types'\n\ninterface UseAsyncStorageReturns {\n  /**\n   * Get an item from the async storage.\n   */\n  getItem: (params: GetAsyncStorageItemParams) => Promise<string | null>\n  /**\n   * Set an item in the async storage.\n   */\n  setItem: (params: SetAsyncStorageItemParams) => Promise<void>\n  /**\n   * Remove an item from the async storage.\n   */\n  removeItem: (params: RemoveAsyncStorageItemParams) => Promise<void>\n  /**\n   * Get all keys in the async storage.\n   */\n  getAllKeys: () => Promise<string[]>\n  /**\n   * Clear all items from the async storage.\n   */\n  clear: () => Promise<void>\n}\n\nexport function useAsyncStorage(): UseAsyncStorageReturns {\n  const {\n    getPersistedItem,\n    setPersistedItem,\n    removePersistedItem,\n    getAllPersistedKeys,\n    clearPersistedItems,\n  } = useShopActions()\n\n  return {\n    getItem: useHandleAction(getPersistedItem),\n    setItem: useHandleAction(setPersistedItem),\n    removeItem: useHandleAction(removePersistedItem),\n    getAllKeys: useHandleAction(getAllPersistedKeys),\n    clear: useHandleAction(clearPersistedItems),\n  }\n}\n"],"names":["useAsyncStorage","getPersistedItem","setPersistedItem","removePersistedItem","getAllPersistedKeys","clearPersistedItems","useShopActions","useHandleAction"],"mappings":";;AA+BO,SAASA,IAA0C;AAClD,QAAA;AAAA,IACJ,kBAAAC;AAAA,IACA,kBAAAC;AAAA,IACA,qBAAAC;AAAA,IACA,qBAAAC;AAAA,IACA,qBAAAC;AAAA,MACEC,EAAe;AAEZ,SAAA;AAAA,IACL,SAASC,EAAgBN,CAAgB;AAAA,IACzC,SAASM,EAAgBL,CAAgB;AAAA,IACzC,YAAYK,EAAgBJ,CAAmB;AAAA,IAC/C,YAAYI,EAAgBH,CAAmB;AAAA,IAC/C,OAAOG,EAAgBF,CAAmB;AAAA,EAC5C;AACF;"}
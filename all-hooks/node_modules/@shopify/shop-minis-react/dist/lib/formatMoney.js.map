{"version":3,"file":"formatMoney.js","sources":["../../src/lib/formatMoney.ts"],"sourcesContent":["/**\n * Formats money amount with appropriate currency symbol\n * Uses browser's Intl.NumberFormat for consistent currency formatting\n */\nexport function formatMoney(amount: string, currencyCode: string): string {\n  try {\n    // Use en-US specifically for USD to get $ instead of US$\n    // For other currencies, use browser locale but fallback to en-US\n    const locale =\n      currencyCode === 'USD' ? 'en-US' : navigator.language || 'en-US'\n\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currencyCode,\n    }).format(Number(amount))\n  } catch (error) {\n    // Fallback if currency code is invalid or not supported\n    console.warn(`Invalid currency code: ${currencyCode}`, error)\n    return `${currencyCode} ${amount}`\n  }\n}\n"],"names":["formatMoney","amount","currencyCode","locale","error"],"mappings":"AAIgB,SAAAA,EAAYC,GAAgBC,GAA8B;AACpE,MAAA;AAGF,UAAMC,IACJD,MAAiB,QAAQ,UAAU,UAAU,YAAY;AAEpD,WAAA,IAAI,KAAK,aAAaC,GAAQ;AAAA,MACnC,OAAO;AAAA,MACP,UAAUD;AAAA,IACX,CAAA,EAAE,OAAO,OAAOD,CAAM,CAAC;AAAA,WACjBG,GAAO;AAEd,mBAAQ,KAAK,0BAA0BF,CAAY,IAAIE,CAAK,GACrD,GAAGF,CAAY,IAAID,CAAM;AAAA,EAAA;AAEpC;"}
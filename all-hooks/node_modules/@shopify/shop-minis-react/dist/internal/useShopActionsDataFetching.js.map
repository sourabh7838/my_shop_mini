{"version":3,"file":"useShopActionsDataFetching.js","sources":["../../src/internal/useShopActionsDataFetching.ts"],"sourcesContent":["import {useCallback, useEffect, useMemo, useState} from 'react'\n\nimport {\n  DataHookFetchPolicy,\n  DataHookReturnsBase,\n  ShopActionResult,\n} from '../types'\nimport {formatError, MiniError} from '../utils/errors'\n\nexport interface ShopActionsDataFetchingResult<R> extends DataHookReturnsBase {\n  data: R | null\n}\n\nexport const useShopActionsDataFetching = <\n  S = unknown,\n  P extends {fetchPolicy?: DataHookFetchPolicy} = {\n    fetchPolicy?: DataHookFetchPolicy\n  },\n>(\n  action: (params: P) => Promise<ShopActionResult<{data: S}>>,\n  params: P,\n  options: {\n    skip?: boolean\n    hook?: string\n    validator?: (data: S) => void\n  }\n): ShopActionsDataFetchingResult<S> => {\n  const [state, setState] = useState<{\n    data: S | null\n    loading: boolean\n    error: Error | null\n  }>({\n    data: null,\n    loading: true,\n    error: null,\n  })\n\n  const skip = options?.skip === true\n  const {validator, hook} = options\n  const runValidator = useCallback(\n    (dataToValidate: S) => {\n      try {\n        validator?.(dataToValidate)\n        return null\n      } catch (err) {\n        return (\n          err ??\n          new MiniError({\n            hook,\n            message: 'Validation failed',\n          })\n        )\n      }\n    },\n    [validator, hook]\n  )\n\n  // Params object is recreated on every render, so we need to memoize it.\n  // We don't know what's inside the params object, but we can stringify it.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const stableParams = useMemo(() => params, [JSON.stringify(params)])\n\n  // There's a lot of complexity here because each type of fetch has different side effects if we are trying to\n  // stay close to how Apollo client works. eg:\n  // - Initial fetch: set loading, set error, set data, reset on error (don't throw)\n  // - change params fetch: set loading, set error, set data, reset on error (don't throw)\n  // - refetch fetch: don't set loading, set error, update data, leave data as is was on error (also throw)\n  // - fetchMore fetch: don't set loading, don't set error, update data, leave data as is was on error (also throw)\n  const fetch = useCallback(\n    async (\n      extraParams?: Partial<P>,\n      {\n        setLoading = true,\n        setError = true,\n        resetOnError = true,\n        throwOnError = true,\n      }: {\n        setLoading?: boolean\n        setError?: boolean\n        resetOnError?: boolean\n        throwOnError?: boolean\n      } = {}\n    ) => {\n      let queryError: Error | null = null\n      let validationError: Error | null = null\n\n      setState(curState => ({\n        ...curState,\n        loading: setLoading ? true : curState.loading,\n      }))\n\n      try {\n        const result = await action({...stableParams, ...extraParams})\n\n        if (result.ok) {\n          validationError = runValidator(result.data.data)\n\n          setState(curState => ({\n            ...curState,\n            data: result.data.data,\n            loading: false,\n            error: validationError ?? null,\n          }))\n        } else {\n          throw result.error\n        }\n      } catch (err) {\n        queryError = formatError({hook}, err)\n      }\n\n      const error = validationError || queryError\n\n      if (error && (setError || resetOnError)) {\n        setState(curState => ({\n          data: resetOnError ? null : curState.data,\n          loading: false,\n          error,\n        }))\n      }\n\n      if (error && throwOnError) {\n        throw error\n      }\n    },\n    [action, stableParams, hook, runValidator]\n  )\n\n  const refetch = useCallback(async () => {\n    await fetch({fetchPolicy: 'network-only'} as Partial<P>, {\n      setLoading: false,\n      resetOnError: false,\n      throwOnError: true,\n    })\n  }, [fetch])\n\n  useEffect(() => {\n    if (skip) return\n\n    fetch(\n      {},\n      {\n        throwOnError: false,\n      }\n    )\n  }, [fetch, skip])\n\n  return {\n    data: state.data,\n    loading: state.loading,\n    error: state.error,\n    refetch,\n  }\n}\n"],"names":["useShopActionsDataFetching","action","params","options","state","setState","useState","skip","validator","hook","runValidator","useCallback","dataToValidate","err","MiniError","stableParams","useMemo","fetch","extraParams","setLoading","setError","resetOnError","throwOnError","queryError","validationError","curState","result","formatError","error","refetch","useEffect"],"mappings":";;AAaO,MAAMA,IAA6B,CAMxCC,GACAC,GACAC,MAKqC;AACrC,QAAM,CAACC,GAAOC,CAAQ,IAAIC,EAIvB;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,IACT,OAAO;AAAA,EAAA,CACR,GAEKC,IAAOJ,GAAS,SAAS,IACzB,EAAC,WAAAK,GAAW,MAAAC,EAAA,IAAQN,GACpBO,IAAeC;AAAA,IACnB,CAACC,MAAsB;AACjB,UAAA;AACF,eAAAJ,IAAYI,CAAc,GACnB;AAAA,eACAC,GAAK;AAEV,eAAAA,KACA,IAAIC,EAAU;AAAA,UACZ,MAAAL;AAAA,UACA,SAAS;AAAA,QAAA,CACV;AAAA,MAAA;AAAA,IAGP;AAAA,IACA,CAACD,GAAWC,CAAI;AAAA,EAClB,GAKMM,IAAeC,EAAQ,MAAMd,GAAQ,CAAC,KAAK,UAAUA,CAAM,CAAC,CAAC,GAQ7De,IAAQN;AAAA,IACZ,OACEO,GACA;AAAA,MACE,YAAAC,IAAa;AAAA,MACb,UAAAC,IAAW;AAAA,MACX,cAAAC,IAAe;AAAA,MACf,cAAAC,IAAe;AAAA,IACjB,IAKI,OACD;AACH,UAAIC,IAA2B,MAC3BC,IAAgC;AAEpC,MAAAnB,EAAS,CAAaoB,OAAA;AAAA,QACpB,GAAGA;AAAA,QACH,SAASN,IAAa,KAAOM,EAAS;AAAA,MAAA,EACtC;AAEE,UAAA;AACI,cAAAC,IAAS,MAAMzB,EAAO,EAAC,GAAGc,GAAc,GAAGG,GAAY;AAE7D,YAAIQ,EAAO;AACS,UAAAF,IAAAd,EAAagB,EAAO,KAAK,IAAI,GAE/CrB,EAAS,CAAaoB,OAAA;AAAA,YACpB,GAAGA;AAAA,YACH,MAAMC,EAAO,KAAK;AAAA,YAClB,SAAS;AAAA,YACT,OAAOF,KAAmB;AAAA,UAAA,EAC1B;AAAA;AAEF,gBAAME,EAAO;AAAA,eAERb,GAAK;AACZ,QAAAU,IAAaI,EAAY,EAAC,MAAAlB,EAAI,GAAGI,CAAG;AAAA,MAAA;AAGtC,YAAMe,IAAQJ,KAAmBD;AAUjC,UARIK,MAAUR,KAAYC,MACxBhB,EAAS,CAAaoB,OAAA;AAAA,QACpB,MAAMJ,IAAe,OAAOI,EAAS;AAAA,QACrC,SAAS;AAAA,QACT,OAAAG;AAAA,MAAA,EACA,GAGAA,KAASN;AACL,cAAAM;AAAA,IAEV;AAAA,IACA,CAAC3B,GAAQc,GAAcN,GAAMC,CAAY;AAAA,EAC3C,GAEMmB,IAAUlB,EAAY,YAAY;AACtC,UAAMM,EAAM,EAAC,aAAa,kBAA+B;AAAA,MACvD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,cAAc;AAAA,IAAA,CACf;AAAA,EAAA,GACA,CAACA,CAAK,CAAC;AAEV,SAAAa,EAAU,MAAM;AACd,IAAIvB,KAEJU;AAAA,MACE,CAAC;AAAA,MACD;AAAA,QACE,cAAc;AAAA,MAAA;AAAA,IAElB;AAAA,EAAA,GACC,CAACA,GAAOV,CAAI,CAAC,GAET;AAAA,IACL,MAAMH,EAAM;AAAA,IACZ,SAASA,EAAM;AAAA,IACf,OAAOA,EAAM;AAAA,IACb,SAAAyB;AAAA,EACF;AACF;"}
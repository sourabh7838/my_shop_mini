{"version":3,"file":"color.js","sources":["../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/motion-dom/dist/es/utils/mix/color.mjs"],"sourcesContent":["import { hex } from '../../value/types/color/hex.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\nimport { hslaToRgba } from '../../value/types/color/hsla-to-rgba.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { mixImmediate } from './immediate.mjs';\nimport { mixNumber } from './number.mjs';\nimport { warning } from '../../../../../motion-utils/dist/es/errors.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const expo = v * (to * to - fromExpo) + fromExpo;\n    return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    warning(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    if (!Boolean(type))\n        return false;\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    if (!fromRGBA || !toRGBA) {\n        return mixImmediate(from, to);\n    }\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n"],"names":["mixLinearColor","from","to","v","fromExpo","expo","colorTypes","hex","rgba","hsla","getColorType","type","asRGBA","color","warning","model","hslaToRgba","mixColor","fromRGBA","toRGBA","mixImmediate","blended","mixNumber"],"mappings":";;;;;;;AAWK,MAACA,IAAiB,CAACC,GAAMC,GAAIC,MAAM;AACpC,QAAMC,IAAWH,IAAOA,GAClBI,IAAOF,KAAKD,IAAKA,IAAKE,KAAYA;AACxC,SAAOC,IAAO,IAAI,IAAI,KAAK,KAAKA,CAAI;AACxC,GACMC,IAAa,CAACC,GAAKC,GAAMC,CAAI,GAC7BC,IAAe,CAACP,MAAMG,EAAW,KAAK,CAACK,MAASA,EAAK,KAAKR,CAAC,CAAC;AAClE,SAASS,EAAOC,GAAO;AACnB,QAAMF,IAAOD,EAAaG,CAAK;AAE/B,MADAC,EAAQ,EAAQH,GAAO,IAAIE,CAAK,sEAAsE,GAClG,CAASF;AACT,WAAO;AACX,MAAII,IAAQJ,EAAK,MAAME,CAAK;AAC5B,SAAIF,MAASF,MAETM,IAAQC,EAAWD,CAAK,IAErBA;AACX;AACK,MAACE,IAAW,CAAChB,GAAMC,MAAO;AAC3B,QAAMgB,IAAWN,EAAOX,CAAI,GACtBkB,IAASP,EAAOV,CAAE;AACxB,MAAI,CAACgB,KAAY,CAACC;AACd,WAAOC,EAAanB,GAAMC,CAAE;AAEhC,QAAMmB,IAAU,EAAE,GAAGH,EAAU;AAC/B,SAAO,CAACf,OACJkB,EAAQ,MAAMrB,EAAekB,EAAS,KAAKC,EAAO,KAAKhB,CAAC,GACxDkB,EAAQ,QAAQrB,EAAekB,EAAS,OAAOC,EAAO,OAAOhB,CAAC,GAC9DkB,EAAQ,OAAOrB,EAAekB,EAAS,MAAMC,EAAO,MAAMhB,CAAC,GAC3DkB,EAAQ,QAAQC,EAAUJ,EAAS,OAAOC,EAAO,OAAOhB,CAAC,GAClDK,EAAK,UAAUa,CAAO;AAErC;","x_google_ignoreList":[0]}
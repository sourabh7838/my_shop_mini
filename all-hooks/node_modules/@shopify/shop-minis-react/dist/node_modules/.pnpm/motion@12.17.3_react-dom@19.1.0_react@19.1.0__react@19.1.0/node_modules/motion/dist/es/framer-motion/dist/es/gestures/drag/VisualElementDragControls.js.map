{"version":3,"file":"VisualElementDragControls.js","sources":["../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, rebaseAxisConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { frame } from '../../../../../motion-dom/dist/es/frameloop/frame.mjs';\nimport { invariant } from '../../../../../motion-utils/dist/es/errors.mjs';\nimport { setDragLock } from '../../../../../motion-dom/dist/es/gestures/drag/state/set-active.mjs';\nimport { percent } from '../../../../../motion-dom/dist/es/value/types/numbers/units.mjs';\nimport { mixNumber } from '../../../../../motion-dom/dist/es/utils/mix/number.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => this.getAnimationState(axis) === \"paused\" &&\n            this.getAxisMotionValue(axis).animation?.play());\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : this.visualElement.projection?.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).animation?.pause());\n    }\n    getAnimationState(axis) {\n        return this.getAxisMotionValue(axis).animation?.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"names":["elementDragControls","VisualElementDragControls","visualElement","createBox","originEvent","snapToCursor","presenceContext","onSessionStart","event","dragSnapToOrigin","extractEventInfo","onStart","info","drag","dragPropagation","onDragStart","setDragLock","eachAxis","axis","current","percent","projection","measuredAxis","calcLength","frame","addValueToWillChange","animationState","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","onSessionEnd","resumeAnimation","PanSession","getContextWindow","isDragging","velocity","onDragEnd","_point","shouldDrag","axisValue","next","applyConstraints","dragConstraints","dragElastic","layout","prevConstraints","isRefObject","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","constraints","onMeasureDragConstraints","constraintsElement","invariant","constraintsBox","measurePageBox","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","convertBoundingBoxToBox","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","transition","bounceStiffness","bounceDamping","inertia","animateMotionValue","dragKey","props","externalMotionValue","point","min","max","mixNumber","boxProgress","latest","calcOrigin","transformTemplate","element","stopPointerListener","addPointerEvent","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","addDomEvent","stopLayoutUpdateListener","delta","hasLayoutChanged","motionValue","defaultElastic","direction","currentDirection","lockThreshold"],"mappings":";;;;;;;;;;;;;;;;;;;AAoBK,MAACA,IAAsB,oBAAI,QAAO;AAKvC,MAAMC,GAA0B;AAAA,EAC5B,YAAYC,GAAe;AACvB,SAAK,eAAe,MACpB,KAAK,aAAa,IAClB,KAAK,mBAAmB,MACxB,KAAK,cAAc,EAAE,GAAG,GAAG,GAAG,EAAG,GAIjC,KAAK,cAAc,IACnB,KAAK,wBAAwB,IAI7B,KAAK,UAAUC,EAAW,GAC1B,KAAK,gBAAgBD;AAAA,EAC7B;AAAA,EACI,MAAME,GAAa,EAAE,cAAAC,IAAe,GAAK,IAAK,CAAA,GAAI;AAI9C,UAAM,EAAE,iBAAAC,MAAoB,KAAK;AACjC,QAAIA,KAAmBA,EAAgB,cAAc;AACjD;AACJ,UAAMC,IAAiB,CAACC,MAAU;AAC9B,YAAM,EAAE,kBAAAC,EAAgB,IAAK,KAAK,SAAU;AAG5C,MAAAA,IAAmB,KAAK,mBAAmB,KAAK,cAAe,GAC3DJ,KACA,KAAK,aAAaK,EAAiBF,CAAK,EAAE,KAAK;AAAA,IAEtD,GACKG,IAAU,CAACH,GAAOI,MAAS;AAE7B,YAAM,EAAE,MAAAC,GAAM,iBAAAC,GAAiB,aAAAC,EAAW,IAAK,KAAK,SAAU;AAC9D,UAAIF,KAAQ,CAACC,MACL,KAAK,gBACL,KAAK,aAAc,GACvB,KAAK,eAAeE,EAAYH,CAAI,GAEhC,CAAC,KAAK;AACN;AAER,WAAK,aAAa,IAClB,KAAK,mBAAmB,MACxB,KAAK,mBAAoB,GACrB,KAAK,cAAc,eACnB,KAAK,cAAc,WAAW,qBAAqB,IACnD,KAAK,cAAc,WAAW,SAAS,SAK3CI,EAAS,CAACC,MAAS;AACf,YAAIC,IAAU,KAAK,mBAAmBD,CAAI,EAAE,IAAG,KAAM;AAIrD,YAAIE,EAAQ,KAAKD,CAAO,GAAG;AACvB,gBAAM,EAAE,YAAAE,MAAe,KAAK;AAC5B,cAAIA,KAAcA,EAAW,QAAQ;AACjC,kBAAMC,IAAeD,EAAW,OAAO,UAAUH,CAAI;AACrD,YAAII,MAEAH,IADeI,EAAWD,CAAY,KAClB,WAAWH,CAAO,IAAI;AAAA,UAEtE;AAAA,QACA;AACgB,aAAK,YAAYD,CAAI,IAAIC;AAAA,MACzC,CAAa,GAEGJ,KACAS,EAAM,WAAW,MAAMT,EAAYP,GAAOI,CAAI,CAAC,GAEnDa,EAAqB,KAAK,eAAe,WAAW;AACpD,YAAM,EAAE,gBAAAC,MAAmB,KAAK;AAChC,MAAAA,KAAkBA,EAAe,UAAU,aAAa,EAAI;AAAA,IAC/D,GACKC,IAAS,CAACnB,GAAOI,MAAS;AAE5B,YAAM,EAAE,iBAAAE,GAAiB,mBAAAc,GAAmB,iBAAAC,GAAiB,QAAAC,EAAS,IAAG,KAAK,SAAU;AAExF,UAAI,CAAChB,KAAmB,CAAC,KAAK;AAC1B;AACJ,YAAM,EAAE,QAAAiB,EAAM,IAAKnB;AAEnB,UAAIgB,KAAqB,KAAK,qBAAqB,MAAM;AACrD,aAAK,mBAAmBI,EAAoBD,CAAM,GAE9C,KAAK,qBAAqB,QAC1BF,KAAmBA,EAAgB,KAAK,gBAAgB;AAE5D;AAAA,MAChB;AAEY,WAAK,WAAW,KAAKjB,EAAK,OAAOmB,CAAM,GACvC,KAAK,WAAW,KAAKnB,EAAK,OAAOmB,CAAM,GAOvC,KAAK,cAAc,OAAQ,GAK3BD,KAAUA,EAAOtB,GAAOI,CAAI;AAAA,IAC/B,GACKqB,IAAe,CAACzB,GAAOI,MAAS,KAAK,KAAKJ,GAAOI,CAAI,GACrDsB,IAAkB,MAAMjB,EAAS,CAACC,MAAS,KAAK,kBAAkBA,CAAI,MAAM,YAC9E,KAAK,mBAAmBA,CAAI,EAAE,WAAW,KAAI,CAAE,GAC7C,EAAE,kBAAAT,EAAgB,IAAK,KAAK,SAAU;AAC5C,SAAK,aAAa,IAAI0B,EAAW/B,GAAa;AAAA,MAC1C,gBAAAG;AAAA,MACA,SAAAI;AAAA,MACA,QAAAgB;AAAA,MACA,cAAAM;AAAA,MACA,iBAAAC;AAAA,IACZ,GAAW;AAAA,MACC,oBAAoB,KAAK,cAAc,sBAAuB;AAAA,MAC9D,kBAAAzB;AAAA,MACA,eAAe2B,EAAiB,KAAK,aAAa;AAAA,IAC9D,CAAS;AAAA,EACT;AAAA,EACI,KAAK5B,GAAOI,GAAM;AACd,UAAMyB,IAAa,KAAK;AAExB,QADA,KAAK,OAAQ,GACT,CAACA;AACD;AACJ,UAAM,EAAE,UAAAC,EAAQ,IAAK1B;AACrB,SAAK,eAAe0B,CAAQ;AAC5B,UAAM,EAAE,WAAAC,EAAS,IAAK,KAAK,SAAU;AACrC,IAAIA,KACAf,EAAM,WAAW,MAAMe,EAAU/B,GAAOI,CAAI,CAAC;AAAA,EAEzD;AAAA,EACI,SAAS;AACL,SAAK,aAAa;AAClB,UAAM,EAAE,YAAAS,GAAY,gBAAAK,EAAgB,IAAG,KAAK;AAC5C,IAAIL,MACAA,EAAW,qBAAqB,KAEpC,KAAK,cAAc,KAAK,WAAW,IAAK,GACxC,KAAK,aAAa;AAClB,UAAM,EAAE,iBAAAP,EAAe,IAAK,KAAK,SAAU;AAC3C,IAAI,CAACA,KAAmB,KAAK,iBACzB,KAAK,aAAc,GACnB,KAAK,eAAe,OAExBY,KAAkBA,EAAe,UAAU,aAAa,EAAK;AAAA,EACrE;AAAA,EACI,WAAWR,GAAMsB,GAAQT,GAAQ;AAC7B,UAAM,EAAE,MAAAlB,EAAI,IAAK,KAAK,SAAU;AAEhC,QAAI,CAACkB,KAAU,CAACU,EAAWvB,GAAML,GAAM,KAAK,gBAAgB;AACxD;AACJ,UAAM6B,IAAY,KAAK,mBAAmBxB,CAAI;AAC9C,QAAIyB,IAAO,KAAK,YAAYzB,CAAI,IAAIa,EAAOb,CAAI;AAE/C,IAAI,KAAK,eAAe,KAAK,YAAYA,CAAI,MACzCyB,IAAOC,EAAiBD,GAAM,KAAK,YAAYzB,CAAI,GAAG,KAAK,QAAQA,CAAI,CAAC,IAE5EwB,EAAU,IAAIC,CAAI;AAAA,EAC1B;AAAA,EACI,qBAAqB;AACjB,UAAM,EAAE,iBAAAE,GAAiB,aAAAC,MAAgB,KAAK,SAAU,GAClDC,IAAS,KAAK,cAAc,cAC9B,CAAC,KAAK,cAAc,WAAW,SAC7B,KAAK,cAAc,WAAW,QAAQ,EAAK,IAC3C,KAAK,cAAc,YAAY,QAC/BC,IAAkB,KAAK;AAC7B,IAAIH,KAAmBI,EAAYJ,CAAe,IACzC,KAAK,gBACN,KAAK,cAAc,KAAK,sBAAuB,KAI/CA,KAAmBE,IACnB,KAAK,cAAcG,EAAwBH,EAAO,WAAWF,CAAe,IAG5E,KAAK,cAAc,IAG3B,KAAK,UAAUM,EAAmBL,CAAW,GAKzCE,MAAoB,KAAK,eACzBD,KACA,KAAK,eACL,CAAC,KAAK,yBACN9B,EAAS,CAACC,MAAS;AACf,MAAI,KAAK,gBAAgB,MACrB,KAAK,mBAAmBA,CAAI,MAC5B,KAAK,YAAYA,CAAI,IAAIkC,EAAsBL,EAAO,UAAU7B,CAAI,GAAG,KAAK,YAAYA,CAAI,CAAC;AAAA,IAEjH,CAAa;AAAA,EAEb;AAAA,EACI,wBAAwB;AACpB,UAAM,EAAE,iBAAiBmC,GAAa,0BAAAC,EAAwB,IAAK,KAAK,SAAU;AAClF,QAAI,CAACD,KAAe,CAACJ,EAAYI,CAAW;AACxC,aAAO;AACX,UAAME,IAAqBF,EAAY;AACvC,IAAAG,EAAUD,MAAuB,MAAM,wGAAwG;AAC/I,UAAM,EAAE,YAAAlC,MAAe,KAAK;AAE5B,QAAI,CAACA,KAAc,CAACA,EAAW;AAC3B,aAAO;AACX,UAAMoC,IAAiBC,EAAeH,GAAoBlC,EAAW,MAAM,KAAK,cAAc,uBAAuB;AACrH,QAAIsC,IAAsBC,EAAwBvC,EAAW,OAAO,WAAWoC,CAAc;AAK7F,QAAIH,GAA0B;AAC1B,YAAMO,IAAkBP,EAAyBQ,EAAwBH,CAAmB,CAAC;AAC7F,WAAK,wBAAwB,CAAC,CAACE,GAC3BA,MACAF,IAAsBI,EAAwBF,CAAe;AAAA,IAE7E;AACQ,WAAOF;AAAA,EACf;AAAA,EACI,eAAerB,GAAU;AACrB,UAAM,EAAE,MAAAzB,GAAM,cAAAmD,GAAc,aAAAlB,GAAa,gBAAAmB,GAAgB,kBAAAxD,GAAkB,qBAAAyD,EAAmB,IAAM,KAAK,SAAU,GAC7Gb,IAAc,KAAK,eAAe,CAAE,GACpCc,IAAqBlD,EAAS,CAACC,MAAS;AAC1C,UAAI,CAACuB,EAAWvB,GAAML,GAAM,KAAK,gBAAgB;AAC7C;AAEJ,UAAIuD,IAAcf,KAAeA,EAAYnC,CAAI,KAAM,CAAE;AACzD,MAAIT,MACA2D,IAAa,EAAE,KAAK,GAAG,KAAK,EAAG;AAOnC,YAAMC,IAAkBvB,IAAc,MAAM,KACtCwB,IAAgBxB,IAAc,KAAK,KACnCyB,IAAU;AAAA,QACZ,MAAM;AAAA,QACN,UAAUP,IAAe1B,EAASpB,CAAI,IAAI;AAAA,QAC1C,iBAAAmD;AAAA,QACA,eAAAC;AAAA,QACA,cAAc;AAAA,QACd,WAAW;AAAA,QACX,WAAW;AAAA,QACX,GAAGL;AAAA,QACH,GAAGG;AAAA,MACN;AAID,aAAO,KAAK,wBAAwBlD,GAAMqD,CAAO;AAAA,IAC7D,CAAS;AAED,WAAO,QAAQ,IAAIJ,CAAkB,EAAE,KAAKD,CAAmB;AAAA,EACvE;AAAA,EACI,wBAAwBhD,GAAMkD,GAAY;AACtC,UAAM1B,IAAY,KAAK,mBAAmBxB,CAAI;AAC9C,WAAAO,EAAqB,KAAK,eAAeP,CAAI,GACtCwB,EAAU,MAAM8B,EAAmBtD,GAAMwB,GAAW,GAAG0B,GAAY,KAAK,eAAe,EAAK,CAAC;AAAA,EAC5G;AAAA,EACI,gBAAgB;AACZ,IAAAnD,EAAS,CAACC,MAAS,KAAK,mBAAmBA,CAAI,EAAE,MAAM;AAAA,EAC/D;AAAA,EACI,iBAAiB;AACb,IAAAD,EAAS,CAACC,MAAS,KAAK,mBAAmBA,CAAI,EAAE,WAAW,OAAO;AAAA,EAC3E;AAAA,EACI,kBAAkBA,GAAM;AACpB,WAAO,KAAK,mBAAmBA,CAAI,EAAE,WAAW;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOI,mBAAmBA,GAAM;AACrB,UAAMuD,IAAU,QAAQvD,EAAK,YAAa,CAAA,IACpCwD,IAAQ,KAAK,cAAc,SAAU,GACrCC,IAAsBD,EAAMD,CAAO;AACzC,WAAOE,KAED,KAAK,cAAc,SAASzD,IAAOwD,EAAM,UACrCA,EAAM,QAAQxD,CAAI,IAClB,WAAc,CAAC;AAAA,EACjC;AAAA,EACI,aAAa0D,GAAO;AAChB,IAAA3D,EAAS,CAACC,MAAS;AACf,YAAM,EAAE,MAAAL,EAAI,IAAK,KAAK,SAAU;AAEhC,UAAI,CAAC4B,EAAWvB,GAAML,GAAM,KAAK,gBAAgB;AAC7C;AACJ,YAAM,EAAE,YAAAQ,MAAe,KAAK,eACtBqB,IAAY,KAAK,mBAAmBxB,CAAI;AAC9C,UAAIG,KAAcA,EAAW,QAAQ;AACjC,cAAM,EAAE,KAAAwD,GAAK,KAAAC,EAAK,IAAGzD,EAAW,OAAO,UAAUH,CAAI;AACrD,QAAAwB,EAAU,IAAIkC,EAAM1D,CAAI,IAAI6D,EAAUF,GAAKC,GAAK,GAAG,CAAC;AAAA,MACpE;AAAA,IACA,CAAS;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,iCAAiC;AAC7B,QAAI,CAAC,KAAK,cAAc;AACpB;AACJ,UAAM,EAAE,MAAAjE,GAAM,iBAAAgC,MAAoB,KAAK,SAAU,GAC3C,EAAE,YAAAxB,MAAe,KAAK;AAC5B,QAAI,CAAC4B,EAAYJ,CAAe,KAAK,CAACxB,KAAc,CAAC,KAAK;AACtD;AAKJ,SAAK,cAAe;AAKpB,UAAM2D,IAAc,EAAE,GAAG,GAAG,GAAG,EAAG;AAClC,IAAA/D,EAAS,CAACC,MAAS;AACf,YAAMwB,IAAY,KAAK,mBAAmBxB,CAAI;AAC9C,UAAIwB,KAAa,KAAK,gBAAgB,IAAO;AACzC,cAAMuC,IAASvC,EAAU,IAAK;AAC9B,QAAAsC,EAAY9D,CAAI,IAAIgE,EAAW,EAAE,KAAKD,GAAQ,KAAKA,EAAM,GAAI,KAAK,YAAY/D,CAAI,CAAC;AAAA,MACnG;AAAA,IACA,CAAS;AAID,UAAM,EAAE,mBAAAiE,EAAmB,IAAG,KAAK,cAAc,SAAU;AAC3D,SAAK,cAAc,QAAQ,MAAM,YAAYA,IACvCA,EAAkB,CAAE,GAAE,EAAE,IACxB,QACN9D,EAAW,QAAQA,EAAW,KAAK,aAAc,GACjDA,EAAW,aAAc,GACzB,KAAK,mBAAoB,GAKzBJ,EAAS,CAACC,MAAS;AACf,UAAI,CAACuB,EAAWvB,GAAML,GAAM,IAAI;AAC5B;AAIJ,YAAM6B,IAAY,KAAK,mBAAmBxB,CAAI,GACxC,EAAE,KAAA2D,GAAK,KAAAC,EAAG,IAAK,KAAK,YAAY5D,CAAI;AAC1C,MAAAwB,EAAU,IAAIqC,EAAUF,GAAKC,GAAKE,EAAY9D,CAAI,CAAC,CAAC;AAAA,IAChE,CAAS;AAAA,EACT;AAAA,EACI,eAAe;AACX,QAAI,CAAC,KAAK,cAAc;AACpB;AACJ,IAAAlB,EAAoB,IAAI,KAAK,eAAe,IAAI;AAChD,UAAMoF,IAAU,KAAK,cAAc,SAI7BC,IAAsBC,EAAgBF,GAAS,eAAe,CAAC5E,MAAU;AAC3E,YAAM,EAAE,MAAAK,GAAM,cAAA0E,IAAe,GAAI,IAAK,KAAK,SAAU;AACrD,MAAA1E,KAAQ0E,KAAgB,KAAK,MAAM/E,CAAK;AAAA,IACpD,CAAS,GACKgF,IAAyB,MAAM;AACjC,YAAM,EAAE,iBAAA3C,EAAe,IAAK,KAAK,SAAU;AAC3C,MAAII,EAAYJ,CAAe,KAAKA,EAAgB,YAChD,KAAK,cAAc,KAAK,sBAAuB;AAAA,IAEtD,GACK,EAAE,YAAAxB,MAAe,KAAK,eACtBoE,IAA4BpE,EAAW,iBAAiB,WAAWmE,CAAsB;AAC/F,IAAInE,KAAc,CAACA,EAAW,WAC1BA,EAAW,QAAQA,EAAW,KAAK,aAAc,GACjDA,EAAW,aAAc,IAE7BG,EAAM,KAAKgE,CAAsB;AAKjC,UAAME,IAAqBC,EAAY,QAAQ,UAAU,MAAM,KAAK,gCAAgC,GAK9FC,IAA2BvE,EAAW,iBAAiB,aAAc,CAAC,EAAE,OAAAwE,GAAO,kBAAAC,QAAuB;AACxG,MAAI,KAAK,cAAcA,MACnB7E,EAAS,CAACC,MAAS;AACf,cAAM6E,IAAc,KAAK,mBAAmB7E,CAAI;AAChD,QAAK6E,MAEL,KAAK,YAAY7E,CAAI,KAAK2E,EAAM3E,CAAI,EAAE,WACtC6E,EAAY,IAAIA,EAAY,IAAK,IAAGF,EAAM3E,CAAI,EAAE,SAAS;AAAA,MAC7E,CAAiB,GACD,KAAK,cAAc,OAAQ;AAAA,IAE3C,CAAW;AACH,WAAO,MAAM;AACT,MAAAwE,EAAoB,GACpBL,EAAqB,GACrBI,EAA2B,GAC3BG,KAA4BA,EAA0B;AAAA,IACzD;AAAA,EACT;AAAA,EACI,WAAW;AACP,UAAMlB,IAAQ,KAAK,cAAc,SAAU,GACrC,EAAE,MAAA7D,IAAO,IAAO,mBAAAe,IAAoB,IAAO,iBAAAd,IAAkB,IAAO,iBAAA+B,IAAkB,IAAO,aAAAC,IAAckD,GAAgB,cAAAhC,IAAe,GAAO,IAAGU;AAC1J,WAAO;AAAA,MACH,GAAGA;AAAA,MACH,MAAA7D;AAAA,MACA,mBAAAe;AAAA,MACA,iBAAAd;AAAA,MACA,iBAAA+B;AAAA,MACA,aAAAC;AAAA,MACA,cAAAkB;AAAA,IACH;AAAA,EACT;AACA;AACA,SAASvB,EAAWwD,GAAWpF,GAAMqF,GAAkB;AACnD,UAASrF,MAAS,MAAQA,MAASoF,OAC9BC,MAAqB,QAAQA,MAAqBD;AAC3D;AAQA,SAASjE,EAAoBD,GAAQoE,IAAgB,IAAI;AACrD,MAAIF,IAAY;AAChB,SAAI,KAAK,IAAIlE,EAAO,CAAC,IAAIoE,IACrBF,IAAY,MAEP,KAAK,IAAIlE,EAAO,CAAC,IAAIoE,MAC1BF,IAAY,MAETA;AACX;","x_google_ignoreList":[0]}
{"version":3,"file":"use-motion-ref.js","sources":["../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/motion/utils/use-motion-ref.mjs"],"sourcesContent":["import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        if (instance) {\n            visualState.onMount && visualState.onMount(instance);\n        }\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            }\n            else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n"],"names":["useMotionRef","visualState","visualElement","externalRef","useCallback","instance","isRefObject"],"mappings":";;AAOA,SAASA,EAAaC,GAAaC,GAAeC,GAAa;AAC3D,SAAOC;AAAA,IAAY,CAACC,MAAa;AAC7B,MAAIA,KACAJ,EAAY,WAAWA,EAAY,QAAQI,CAAQ,GAEnDH,MACIG,IACAH,EAAc,MAAMG,CAAQ,IAG5BH,EAAc,QAAS,IAG3BC,MACI,OAAOA,KAAgB,aACvBA,EAAYE,CAAQ,IAEfC,EAAYH,CAAW,MAC5BA,EAAY,UAAUE;AAAA,IAGjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMD,CAACH,CAAa;AAAA,EAAC;AACnB;","x_google_ignoreList":[0]}
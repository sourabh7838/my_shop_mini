{"version":3,"file":"index.js","sources":["../../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/motion-dom/dist/es/value/types/complex/index.mjs"],"sourcesContent":["import { color } from '../color/index.mjs';\nimport { colorRegex } from '../utils/color-regex.mjs';\nimport { floatRegex } from '../utils/float-regex.mjs';\nimport { sanitize } from '../utils/sanitize.mjs';\n\nfunction test(v) {\n    return (isNaN(v) &&\n        typeof v === \"string\" &&\n        (v.match(floatRegex)?.length || 0) +\n            (v.match(colorRegex)?.length || 0) >\n            0);\n}\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\";\n// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\nconst complexRegex = /var\\s*\\(\\s*--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)|#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\)|-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/giu;\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const values = [];\n    const indexes = {\n        color: [],\n        number: [],\n        var: [],\n    };\n    const types = [];\n    let i = 0;\n    const tokenised = originalValue.replace(complexRegex, (parsedValue) => {\n        if (color.test(parsedValue)) {\n            indexes.color.push(i);\n            types.push(COLOR_TOKEN);\n            values.push(color.parse(parsedValue));\n        }\n        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n            indexes.var.push(i);\n            types.push(VAR_TOKEN);\n            values.push(parsedValue);\n        }\n        else {\n            indexes.number.push(i);\n            types.push(NUMBER_TOKEN);\n            values.push(parseFloat(parsedValue));\n        }\n        ++i;\n        return SPLIT_TOKEN;\n    });\n    const split = tokenised.split(SPLIT_TOKEN);\n    return { values, split, indexes, types };\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { split, types } = analyseComplexValue(source);\n    const numSections = split.length;\n    return (v) => {\n        let output = \"\";\n        for (let i = 0; i < numSections; i++) {\n            output += split[i];\n            if (v[i] !== undefined) {\n                const type = types[i];\n                if (type === NUMBER_TOKEN) {\n                    output += sanitize(v[i]);\n                }\n                else if (type === COLOR_TOKEN) {\n                    output += color.transform(v[i]);\n                }\n                else {\n                    output += v[i];\n                }\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : color.test(v) ? color.getAnimatableNone(v) : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n"],"names":["test","v","floatRegex","colorRegex","NUMBER_TOKEN","COLOR_TOKEN","VAR_TOKEN","VAR_FUNCTION_TOKEN","SPLIT_TOKEN","complexRegex","analyseComplexValue","value","originalValue","values","indexes","types","i","split","parsedValue","color","parseComplexValue","createTransformer","source","numSections","output","type","sanitize","convertNumbersToZero","getAnimatableNone","parsed","complex"],"mappings":";;;;AAKA,SAASA,EAAKC,GAAG;AACb,SAAQ,MAAMA,CAAC,KACX,OAAOA,KAAM,aACZA,EAAE,MAAMC,CAAU,GAAG,UAAU,MAC3BD,EAAE,MAAME,CAAU,GAAG,UAAU,KAChC;AACZ;AACA,MAAMC,IAAe,UACfC,IAAc,SACdC,IAAY,OACZC,IAAqB,QACrBC,IAAc,OAEdC,IAAe;AACrB,SAASC,EAAoBC,GAAO;AAChC,QAAMC,IAAgBD,EAAM,SAAU,GAChCE,IAAS,CAAE,GACXC,IAAU;AAAA,IACZ,OAAO,CAAE;AAAA,IACT,QAAQ,CAAE;AAAA,IACV,KAAK,CAAE;AAAA,EACV,GACKC,IAAQ,CAAE;AAChB,MAAIC,IAAI;AAoBR,QAAMC,IAnBYL,EAAc,QAAQH,GAAc,CAACS,OAC/CC,EAAM,KAAKD,CAAW,KACtBJ,EAAQ,MAAM,KAAKE,CAAC,GACpBD,EAAM,KAAKV,CAAW,GACtBQ,EAAO,KAAKM,EAAM,MAAMD,CAAW,CAAC,KAE/BA,EAAY,WAAWX,CAAkB,KAC9CO,EAAQ,IAAI,KAAKE,CAAC,GAClBD,EAAM,KAAKT,CAAS,GACpBO,EAAO,KAAKK,CAAW,MAGvBJ,EAAQ,OAAO,KAAKE,CAAC,GACrBD,EAAM,KAAKX,CAAY,GACvBS,EAAO,KAAK,WAAWK,CAAW,CAAC,IAEvC,EAAEF,GACKR,EACV,EACuB,MAAMA,CAAW;AACzC,SAAO,EAAE,QAAAK,GAAQ,OAAAI,GAAO,SAAAH,GAAS,OAAAC,EAAO;AAC5C;AACA,SAASK,EAAkBnB,GAAG;AAC1B,SAAOS,EAAoBT,CAAC,EAAE;AAClC;AACA,SAASoB,EAAkBC,GAAQ;AAC/B,QAAM,EAAE,OAAAL,GAAO,OAAAF,MAAUL,EAAoBY,CAAM,GAC7CC,IAAcN,EAAM;AAC1B,SAAO,CAAChB,MAAM;AACV,QAAIuB,IAAS;AACb,aAASR,IAAI,GAAGA,IAAIO,GAAaP;AAE7B,UADAQ,KAAUP,EAAMD,CAAC,GACbf,EAAEe,CAAC,MAAM,QAAW;AACpB,cAAMS,IAAOV,EAAMC,CAAC;AACpB,QAAIS,MAASrB,IACToB,KAAUE,EAASzB,EAAEe,CAAC,CAAC,IAElBS,MAASpB,IACdmB,KAAUL,EAAM,UAAUlB,EAAEe,CAAC,CAAC,IAG9BQ,KAAUvB,EAAEe,CAAC;AAAA,MAEjC;AAEQ,WAAOQ;AAAA,EACV;AACL;AACA,MAAMG,IAAuB,CAAC1B,MAAM,OAAOA,KAAM,WAAW,IAAIkB,EAAM,KAAKlB,CAAC,IAAIkB,EAAM,kBAAkBlB,CAAC,IAAIA;AAC7G,SAAS2B,EAAkB3B,GAAG;AAC1B,QAAM4B,IAAST,EAAkBnB,CAAC;AAElC,SADoBoB,EAAkBpB,CAAC,EACpB4B,EAAO,IAAIF,CAAoB,CAAC;AACvD;AACK,MAACG,IAAU;AAAA,EACZ,MAAA9B;AAAA,EACA,OAAOoB;AAAA,EACP,mBAAAC;AAAA,EACA,mBAAAO;AACJ;","x_google_ignoreList":[0]}
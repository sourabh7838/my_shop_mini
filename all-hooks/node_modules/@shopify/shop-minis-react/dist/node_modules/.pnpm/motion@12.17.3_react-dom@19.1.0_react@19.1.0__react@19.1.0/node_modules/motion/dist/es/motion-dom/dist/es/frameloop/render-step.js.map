{"version":3,"file":"render-step.js","sources":["../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/motion-dom/dist/es/frameloop/render-step.mjs"],"sourcesContent":["import { statsBuffer } from '../stats/buffer.mjs';\n\nfunction createRenderStep(runNextFrame, stepName) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let thisFrame = new Set();\n    let nextFrame = new Set();\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    let latestFrameData = {\n        delta: 0.0,\n        timestamp: 0.0,\n        isProcessing: false,\n    };\n    let numCalls = 0;\n    function triggerCallback(callback) {\n        if (toKeepAlive.has(callback)) {\n            step.schedule(callback);\n            runNextFrame();\n        }\n        numCalls++;\n        callback(latestFrameData);\n    }\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (!queue.has(callback))\n                queue.add(callback);\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            nextFrame.delete(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            latestFrameData = frameData;\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [nextFrame, thisFrame];\n            // Execute this frame\n            thisFrame.forEach(triggerCallback);\n            /**\n             * If we're recording stats then\n             */\n            if (stepName && statsBuffer.value) {\n                statsBuffer.value.frameloop[stepName].push(numCalls);\n            }\n            numCalls = 0;\n            // Clear the frame so no callbacks remain. This is to avoid\n            // memory leaks should this render step not run for a while.\n            thisFrame.clear();\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n"],"names":["createRenderStep","runNextFrame","stepName","thisFrame","nextFrame","isProcessing","flushNextFrame","toKeepAlive","latestFrameData","triggerCallback","callback","step","keepAlive","immediate","queue","frameData"],"mappings":"AAEA,SAASA,EAAiBC,GAAcC,GAAU;AAK9C,MAAIC,IAAY,oBAAI,IAAK,GACrBC,IAAY,oBAAI,IAAK,GAKrBC,IAAe,IACfC,IAAiB;AAIrB,QAAMC,IAAc,oBAAI,QAAS;AACjC,MAAIC,IAAkB;AAAA,IAClB,OAAO;AAAA,IACP,WAAW;AAAA,IACX,cAAc;AAAA,EACjB;AAED,WAASC,EAAgBC,GAAU;AAC/B,IAAIH,EAAY,IAAIG,CAAQ,MACxBC,EAAK,SAASD,CAAQ,GACtBT,EAAc,IAGlBS,EAASF,CAAe;AAAA,EAChC;AACI,QAAMG,IAAO;AAAA;AAAA;AAAA;AAAA,IAIT,UAAU,CAACD,GAAUE,IAAY,IAAOC,IAAY,OAAU;AAE1D,YAAMC,IADoBD,KAAaR,IACLF,IAAYC;AAC9C,aAAIQ,KACAL,EAAY,IAAIG,CAAQ,GACvBI,EAAM,IAAIJ,CAAQ,KACnBI,EAAM,IAAIJ,CAAQ,GACfA;AAAA,IACV;AAAA;AAAA;AAAA;AAAA,IAID,QAAQ,CAACA,MAAa;AAClB,MAAAN,EAAU,OAAOM,CAAQ,GACzBH,EAAY,OAAOG,CAAQ;AAAA,IAC9B;AAAA;AAAA;AAAA;AAAA,IAID,SAAS,CAACK,MAAc;AAOpB,UANAP,IAAkBO,GAMdV,GAAc;AACd,QAAAC,IAAiB;AACjB;AAAA,MAChB;AACY,MAAAD,IAAe,IACf,CAACF,GAAWC,CAAS,IAAI,CAACA,GAAWD,CAAS,GAE9CA,EAAU,QAAQM,CAAe,GAUjCN,EAAU,MAAO,GACjBE,IAAe,IACXC,MACAA,IAAiB,IACjBK,EAAK,QAAQI,CAAS;AAAA,IAE7B;AAAA,EACJ;AACD,SAAOJ;AACX;","x_google_ignoreList":[0]}
import { isAnimationControls as o } from "../../../animation/utils/is-animation-controls.js";
import { createAnimationState as i } from "../../../render/utils/animation-state.js";
import { Feature as s } from "../Feature.js";
class u extends s {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(t) {
    super(t), t.animationState || (t.animationState = i(t));
  }
  updateAnimationControlsSubscription() {
    const { animate: t } = this.node.getProps();
    o(t) && (this.unmountControls = t.subscribe(this.node));
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate: t } = this.node.getProps(), { animate: n } = this.node.prevProps || {};
    t !== n && this.updateAnimationControlsSubscription();
  }
  unmount() {
    this.node.animationState.reset(), this.unmountControls?.();
  }
}
export {
  u as AnimationFeature
};
//# sourceMappingURL=index.js.map

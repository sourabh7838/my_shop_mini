import { measureViewportBox as s } from "../../projection/utils/measure.js";
import { DOMVisualElement as n } from "../dom/DOMVisualElement.js";
import { buildHTMLStyles as a } from "./utils/build-styles.js";
import { renderHTML as i } from "./utils/render.js";
import { scrapeMotionValuesFromProps as u } from "./utils/scrape-motion-values.js";
import { transformProps as p } from "../../../../../motion-dom/dist/es/render/utils/keys-transform.js";
import { defaultTransformValue as l, readTransformValue as f } from "../../../../../motion-dom/dist/es/render/dom/parse-transform.js";
import { isCSSVariableName as c } from "../../../../../motion-dom/dist/es/animation/utils/is-css-variable.js";
function d(m) {
  return window.getComputedStyle(m);
}
class x extends n {
  constructor() {
    super(...arguments), this.type = "html", this.renderInstance = i;
  }
  readValueFromInstance(e, r) {
    if (p.has(r))
      return this.projection?.isProjecting ? l(r) : f(e, r);
    {
      const t = d(e), o = (c(r) ? t.getPropertyValue(r) : t[r]) || 0;
      return typeof o == "string" ? o.trim() : o;
    }
  }
  measureInstanceViewportBox(e, { transformPagePoint: r }) {
    return s(e, r);
  }
  build(e, r, t) {
    a(e, r, t.transformTemplate);
  }
  scrapeMotionValuesFromProps(e, r, t) {
    return u(e, r, t);
  }
}
export {
  x as HTMLVisualElement,
  d as getComputedStyle
};
//# sourceMappingURL=HTMLVisualElement.js.map

import { useCallback as p } from "react";
import { isRefObject as i } from "../../utils/is-ref-object.js";
function b(r, u, f) {
  return p(
    (o) => {
      o && r.onMount && r.onMount(o), u && (o ? u.mount(o) : u.unmount()), f && (typeof f == "function" ? f(o) : i(f) && (f.current = o));
    },
    /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */
    [u]
  );
}
export {
  b as useMotionRef
};
//# sourceMappingURL=use-motion-ref.js.map

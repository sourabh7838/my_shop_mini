{"version":3,"file":"index.js","sources":["../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/motion-dom/dist/es/value/index.mjs"],"sourcesContent":["import { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\nimport { warnOnce } from '../../../../motion-utils/dist/es/warn-once.mjs';\nimport { SubscriptionManager } from '../../../../motion-utils/dist/es/subscription-manager.mjs';\nimport { velocityPerSecond } from '../../../../motion-utils/dist/es/velocity-per-second.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     */\n    constructor(init, options = {}) {\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = null;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev) {\n                this.events.change?.notify(this.current);\n                if (this.dependents) {\n                    for (const dependent of this.dependents) {\n                        dependent.dirty();\n                    }\n                }\n            }\n            // Update render subscribers\n            if (render) {\n                this.events.renderRequest?.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n        if (this.canTrackVelocity === null && current !== undefined) {\n            this.canTrackVelocity = isFloat(this.current);\n        }\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v, endAnimation = true) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        endAnimation && this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    dirty() {\n        this.events.change?.notify(this.current);\n    }\n    addDependent(dependent) {\n        if (!this.dependents) {\n            this.dependents = new Set();\n        }\n        this.dependents.add(dependent);\n    }\n    removeDependent(dependent) {\n        if (this.dependents) {\n            this.dependents.delete(dependent);\n        }\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.dependents?.clear();\n        this.events.destroy?.notify();\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n"],"names":["MAX_VELOCITY_DELTA","isFloat","value","MotionValue","init","options","v","render","currentTime","time","dependent","current","prevFrameValue","subscription","warnOnce","eventName","callback","SubscriptionManager","unsubscribe","frame","eventManagers","passiveEffect","stopPassiveEffect","prev","delta","endAnimation","velocityPerSecond","startAnimation","resolve","motionValue"],"mappings":"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","x_google_ignoreList":[0]}
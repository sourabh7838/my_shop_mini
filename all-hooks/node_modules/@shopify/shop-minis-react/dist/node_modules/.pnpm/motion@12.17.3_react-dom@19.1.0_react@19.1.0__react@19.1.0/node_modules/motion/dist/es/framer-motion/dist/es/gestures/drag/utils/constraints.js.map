{"version":3,"file":"constraints.js","sources":["../../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/gestures/drag/utils/constraints.mjs"],"sourcesContent":["import { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../../../../../motion-dom/dist/es/utils/mix/number.mjs';\nimport { progress } from '../../../../../../motion-utils/dist/es/progress.mjs';\nimport { clamp } from '../../../../../../motion-utils/dist/es/clamp.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n"],"names":["applyConstraints","point","min","max","elastic","mixNumber","calcRelativeAxisConstraints","axis","calcRelativeConstraints","layoutBox","top","left","bottom","right","calcViewportAxisConstraints","layoutAxis","constraintsAxis","calcViewportConstraints","constraintsBox","calcOrigin","source","target","origin","sourceLength","calcLength","targetLength","progress","clamp","rebaseAxisConstraints","layout","constraints","relativeConstraints","defaultElastic","resolveDragElastic","dragElastic","resolveAxisElastic","minLabel","maxLabel","resolvePointElastic","label"],"mappings":";;;;AAUA,SAASA,EAAiBC,GAAO,EAAE,KAAAC,GAAK,KAAAC,EAAG,GAAIC,GAAS;AACpD,SAAIF,MAAQ,UAAaD,IAAQC,IAE7BD,IAAQG,IACFC,EAAUH,GAAKD,GAAOG,EAAQ,GAAG,IACjC,KAAK,IAAIH,GAAOC,CAAG,IAEpBC,MAAQ,UAAaF,IAAQE,MAElCF,IAAQG,IACFC,EAAUF,GAAKF,GAAOG,EAAQ,GAAG,IACjC,KAAK,IAAIH,GAAOE,CAAG,IAEtBF;AACX;AAMA,SAASK,EAA4BC,GAAML,GAAKC,GAAK;AACjD,SAAO;AAAA,IACH,KAAKD,MAAQ,SAAYK,EAAK,MAAML,IAAM;AAAA,IAC1C,KAAKC,MAAQ,SACPI,EAAK,MAAMJ,KAAOI,EAAK,MAAMA,EAAK,OAClC;AAAA,EACT;AACL;AAKA,SAASC,EAAwBC,GAAW,EAAE,KAAAC,GAAK,MAAAC,GAAM,QAAAC,GAAQ,OAAAC,KAAS;AACtE,SAAO;AAAA,IACH,GAAGP,EAA4BG,EAAU,GAAGE,GAAME,CAAK;AAAA,IACvD,GAAGP,EAA4BG,EAAU,GAAGC,GAAKE,CAAM;AAAA,EAC1D;AACL;AAIA,SAASE,EAA4BC,GAAYC,GAAiB;AAC9D,MAAId,IAAMc,EAAgB,MAAMD,EAAW,KACvCZ,IAAMa,EAAgB,MAAMD,EAAW;AAG3C,SAAIC,EAAgB,MAAMA,EAAgB,MACtCD,EAAW,MAAMA,EAAW,QAC5B,CAACb,GAAKC,CAAG,IAAI,CAACA,GAAKD,CAAG,IAEnB,EAAE,KAAAA,GAAK,KAAAC,EAAK;AACvB;AAIA,SAASc,EAAwBR,GAAWS,GAAgB;AACxD,SAAO;AAAA,IACH,GAAGJ,EAA4BL,EAAU,GAAGS,EAAe,CAAC;AAAA,IAC5D,GAAGJ,EAA4BL,EAAU,GAAGS,EAAe,CAAC;AAAA,EAC/D;AACL;AAKA,SAASC,EAAWC,GAAQC,GAAQ;AAChC,MAAIC,IAAS;AACb,QAAMC,IAAeC,EAAWJ,CAAM,GAChCK,IAAeD,EAAWH,CAAM;AACtC,SAAII,IAAeF,IACfD,IAASI,EAASL,EAAO,KAAKA,EAAO,MAAME,GAAcH,EAAO,GAAG,IAE9DG,IAAeE,MACpBH,IAASI,EAASN,EAAO,KAAKA,EAAO,MAAMK,GAAcJ,EAAO,GAAG,IAEhEM,EAAM,GAAG,GAAGL,CAAM;AAC7B;AAIA,SAASM,EAAsBC,GAAQC,GAAa;AAChD,QAAMC,IAAsB,CAAE;AAC9B,SAAID,EAAY,QAAQ,WACpBC,EAAoB,MAAMD,EAAY,MAAMD,EAAO,MAEnDC,EAAY,QAAQ,WACpBC,EAAoB,MAAMD,EAAY,MAAMD,EAAO,MAEhDE;AACX;AACK,MAACC,IAAiB;AAIvB,SAASC,EAAmBC,IAAcF,GAAgB;AACtD,SAAIE,MAAgB,KAChBA,IAAc,IAETA,MAAgB,OACrBA,IAAcF,IAEX;AAAA,IACH,GAAGG,EAAmBD,GAAa,QAAQ,OAAO;AAAA,IAClD,GAAGC,EAAmBD,GAAa,OAAO,QAAQ;AAAA,EACrD;AACL;AACA,SAASC,EAAmBD,GAAaE,GAAUC,GAAU;AACzD,SAAO;AAAA,IACH,KAAKC,EAAoBJ,GAAaE,CAAQ;AAAA,IAC9C,KAAKE,EAAoBJ,GAAaG,CAAQ;AAAA,EACjD;AACL;AACA,SAASC,EAAoBJ,GAAaK,GAAO;AAC7C,SAAO,OAAOL,KAAgB,WACxBA,IACAA,EAAYK,CAAK,KAAK;AAChC;","x_google_ignoreList":[0]}
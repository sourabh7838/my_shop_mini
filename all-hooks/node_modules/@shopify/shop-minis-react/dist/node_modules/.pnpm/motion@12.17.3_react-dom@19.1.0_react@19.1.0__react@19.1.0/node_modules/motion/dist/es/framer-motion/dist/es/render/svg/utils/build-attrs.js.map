{"version":3,"file":"build-attrs.js","sources":["../../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/render/svg/utils/build-attrs.mjs"],"sourcesContent":["import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, isSVGTag, transformTemplate, styleProp) {\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style } = state;\n    /**\n     * However, we apply transforms as CSS transforms.\n     * So if we detect a transform, transformOrigin we take it from attrs and copy it into style.\n     */\n    if (attrs.transform) {\n        style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    if (style.transform || attrs.transformOrigin) {\n        style.transformOrigin = attrs.transformOrigin ?? \"50% 50%\";\n        delete attrs.transformOrigin;\n    }\n    if (style.transform) {\n        /**\n         * SVG's element transform-origin uses its own median as a reference.\n         * Therefore, transformBox becomes a fill-box\n         */\n        style.transformBox = styleProp?.transformBox ?? \"fill-box\";\n        delete attrs.transformBox;\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n"],"names":["buildSVGAttrs","state","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","transformTemplate","styleProp","buildHTMLStyles","attrs","style","buildSVGPath"],"mappings":";;AAMA,SAASA,EAAcC,GAAO;AAAA,EAAE,OAAAC;AAAA,EAAO,OAAAC;AAAA,EAAO,WAAAC;AAAA,EAAW,YAAAC;AAAA,EAAY,aAAAC,IAAc;AAAA,EAAG,YAAAC,IAAa;AAAA;AAAA,EAEnG,GAAGC;GAAUC,GAAUC,GAAmBC,GAAW;AAMjD,MALAC,EAAgBX,GAAOO,GAAQE,CAAiB,GAK5CD,GAAU;AACV,IAAIR,EAAM,MAAM,YACZA,EAAM,MAAM,UAAUA,EAAM,MAAM;AAEtC;AAAA,EACR;AACI,EAAAA,EAAM,QAAQA,EAAM,OACpBA,EAAM,QAAQ,CAAE;AAChB,QAAM,EAAE,OAAAY,GAAO,OAAAC,EAAK,IAAKb;AAKzB,EAAIY,EAAM,cACNC,EAAM,YAAYD,EAAM,WACxB,OAAOA,EAAM,aAEbC,EAAM,aAAaD,EAAM,qBACzBC,EAAM,kBAAkBD,EAAM,mBAAmB,WACjD,OAAOA,EAAM,kBAEbC,EAAM,cAKNA,EAAM,eAAeH,GAAW,gBAAgB,YAChD,OAAOE,EAAM,eAGbX,MAAU,WACVW,EAAM,IAAIX,IACVC,MAAU,WACVU,EAAM,IAAIV,IACVC,MAAc,WACdS,EAAM,QAAQT,IAEdC,MAAe,UACfU,EAAaF,GAAOR,GAAYC,GAAaC,GAAY,EAAK;AAEtE;","x_google_ignoreList":[0]}
{"version":3,"file":"MeasureLayout.js","sources":["../../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs"],"sourcesContent":["\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { frame } from '../../../../../../motion-dom/dist/es/frameloop/frame.mjs';\nimport { microtask } from '../../../../../../motion-dom/dist/es/frameloop/microtask.mjs';\n\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const { projection } = visualElement;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined ||\n            prevProps.isPresent !== isPresent) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n"],"names":["MeasureLayoutWithContext","Component","visualElement","layoutGroup","switchLayoutGroup","layoutId","projection","addScaleCorrector","defaultScaleCorrectors","globalProjectionState","prevProps","layoutDependency","drag","isPresent","frame","stack","microtask","promoteContext","safeToRemove","MeasureLayout","props","usePresence","useContext","LayoutGroupContext","jsx","SwitchLayoutGroupContext","correctBorderRadius","correctBoxShadow"],"mappings":";;;;;;;;;;;AAaA,MAAMA,UAAiCC,EAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7C,oBAAoB;AAChB,UAAM,EAAE,eAAAC,GAAe,aAAAC,GAAa,mBAAAC,GAAmB,UAAAC,EAAQ,IAAK,KAAK,OACnE,EAAE,YAAAC,EAAU,IAAKJ;AACvB,IAAAK,EAAkBC,CAAsB,GACpCF,MACIH,EAAY,SACZA,EAAY,MAAM,IAAIG,CAAU,GAChCF,KAAqBA,EAAkB,YAAYC,KACnDD,EAAkB,SAASE,CAAU,GAEzCA,EAAW,KAAK,UAAW,GAC3BA,EAAW,iBAAiB,qBAAqB,MAAM;AACnD,WAAK,aAAc;AAAA,IACnC,CAAa,GACDA,EAAW,WAAW;AAAA,MAClB,GAAGA,EAAW;AAAA,MACd,gBAAgB,MAAM,KAAK,aAAc;AAAA,IACzD,CAAa,IAELG,EAAsB,iBAAiB;AAAA,EAC/C;AAAA,EACI,wBAAwBC,GAAW;AAC/B,UAAM,EAAE,kBAAAC,GAAkB,eAAAT,GAAe,MAAAU,GAAM,WAAAC,EAAS,IAAK,KAAK,OAC5D,EAAE,YAAAP,EAAU,IAAKJ;AACvB,WAAKI,MASLA,EAAW,YAAYO,GACnBD,KACAF,EAAU,qBAAqBC,KAC/BA,MAAqB,UACrBD,EAAU,cAAcG,IACxBP,EAAW,WAAY,IAGvB,KAAK,aAAc,GAEnBI,EAAU,cAAcG,MACpBA,IACAP,EAAW,QAAS,IAEdA,EAAW,cAMjBQ,EAAM,WAAW,MAAM;AACnB,YAAMC,IAAQT,EAAW,SAAU;AACnC,OAAI,CAACS,KAAS,CAACA,EAAM,QAAQ,WACzB,KAAK,aAAc;AAAA,IAE3C,CAAiB,KAGF;AAAA,EACf;AAAA,EACI,qBAAqB;AACjB,UAAM,EAAE,YAAAT,EAAU,IAAK,KAAK,MAAM;AAClC,IAAIA,MACAA,EAAW,KAAK,UAAW,GAC3BU,EAAU,WAAW,MAAM;AACvB,MAAI,CAACV,EAAW,oBAAoBA,EAAW,OAAM,KACjD,KAAK,aAAc;AAAA,IAEvC,CAAa;AAAA,EAEb;AAAA,EACI,uBAAuB;AACnB,UAAM,EAAE,eAAAJ,GAAe,aAAAC,GAAa,mBAAmBc,EAAc,IAAM,KAAK,OAC1E,EAAE,YAAAX,EAAU,IAAKJ;AACvB,IAAII,MACAA,EAAW,0BAA2B,GAClCH,KAAeA,EAAY,SAC3BA,EAAY,MAAM,OAAOG,CAAU,GACnCW,KAAkBA,EAAe,cACjCA,EAAe,WAAWX,CAAU;AAAA,EAEpD;AAAA,EACI,eAAe;AACX,UAAM,EAAE,cAAAY,MAAiB,KAAK;AAC9B,IAAAA,KAAgBA,EAAc;AAAA,EACtC;AAAA,EACI,SAAS;AACL,WAAO;AAAA,EACf;AACA;AACA,SAASC,EAAcC,GAAO;AAC1B,QAAM,CAACP,GAAWK,CAAY,IAAIG,EAAa,GACzClB,IAAcmB,EAAWC,CAAkB;AACjD,SAAQC,EAAIxB,GAA0B,EAAE,GAAGoB,GAAO,aAAajB,GAAa,mBAAmBmB,EAAWG,CAAwB,GAAG,WAAWZ,GAAW,cAAcK,EAAY,CAAE;AAC3L;AACA,MAAMV,IAAyB;AAAA,EAC3B,cAAc;AAAA,IACV,GAAGkB;AAAA,IACH,SAAS;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACH;AAAA,EACJ;AAAA,EACD,qBAAqBA;AAAA,EACrB,sBAAsBA;AAAA,EACtB,wBAAwBA;AAAA,EACxB,yBAAyBA;AAAA,EACzB,WAAWC;AACf;","x_google_ignoreList":[0]}
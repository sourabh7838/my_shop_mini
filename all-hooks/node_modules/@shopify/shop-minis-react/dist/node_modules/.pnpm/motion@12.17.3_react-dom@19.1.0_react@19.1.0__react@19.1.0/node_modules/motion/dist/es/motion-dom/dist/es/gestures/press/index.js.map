{"version":3,"file":"index.js","sources":["../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/motion-dom/dist/es/gestures/press/index.mjs"],"sourcesContent":["import { isHTMLElement } from '../../utils/is-html-element.mjs';\nimport { isDragActive } from '../drag/state/is-active.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isPressing } from './utils/state.mjs';\n\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction isValidPressEvent(event) {\n    return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\nfunction press(targetOrSelector, onPressStart, options = {}) {\n    const [targets, eventOptions, cancelEvents] = setupGesture(targetOrSelector, options);\n    const startPress = (startEvent) => {\n        const target = startEvent.currentTarget;\n        if (!isValidPressEvent(startEvent))\n            return;\n        isPressing.add(target);\n        const onPressEnd = onPressStart(target, startEvent);\n        const onPointerEnd = (endEvent, success) => {\n            window.removeEventListener(\"pointerup\", onPointerUp);\n            window.removeEventListener(\"pointercancel\", onPointerCancel);\n            if (isPressing.has(target)) {\n                isPressing.delete(target);\n            }\n            if (!isValidPressEvent(endEvent)) {\n                return;\n            }\n            if (typeof onPressEnd === \"function\") {\n                onPressEnd(endEvent, { success });\n            }\n        };\n        const onPointerUp = (upEvent) => {\n            onPointerEnd(upEvent, target === window ||\n                target === document ||\n                options.useGlobalTarget ||\n                isNodeOrChild(target, upEvent.target));\n        };\n        const onPointerCancel = (cancelEvent) => {\n            onPointerEnd(cancelEvent, false);\n        };\n        window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n        window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n    };\n    targets.forEach((target) => {\n        const pointerDownTarget = options.useGlobalTarget ? window : target;\n        pointerDownTarget.addEventListener(\"pointerdown\", startPress, eventOptions);\n        if (isHTMLElement(target)) {\n            target.addEventListener(\"focus\", (event) => enableKeyboardPress(event, eventOptions));\n            if (!isElementKeyboardAccessible(target) &&\n                !target.hasAttribute(\"tabindex\")) {\n                target.tabIndex = 0;\n            }\n        }\n    });\n    return cancelEvents;\n}\n\nexport { press };\n"],"names":["isValidPressEvent","event","isPrimaryPointer","isDragActive","press","targetOrSelector","onPressStart","options","targets","eventOptions","cancelEvents","setupGesture","startPress","startEvent","target","isPressing","onPressEnd","onPointerEnd","endEvent","success","onPointerUp","onPointerCancel","upEvent","isNodeOrChild","cancelEvent","isHTMLElement","enableKeyboardPress","isElementKeyboardAccessible"],"mappings":";;;;;;;;AAaA,SAASA,EAAkBC,GAAO;AAC9B,SAAOC,EAAiBD,CAAK,KAAK,CAACE,EAAc;AACrD;AAoBA,SAASC,EAAMC,GAAkBC,GAAcC,IAAU,CAAA,GAAI;AACzD,QAAM,CAACC,GAASC,GAAcC,CAAY,IAAIC,EAAaN,GAAkBE,CAAO,GAC9EK,IAAa,CAACC,MAAe;AAC/B,UAAMC,IAASD,EAAW;AAC1B,QAAI,CAACb,EAAkBa,CAAU;AAC7B;AACJ,IAAAE,EAAW,IAAID,CAAM;AACrB,UAAME,IAAaV,EAAaQ,GAAQD,CAAU,GAC5CI,IAAe,CAACC,GAAUC,MAAY;AAMxC,MALA,OAAO,oBAAoB,aAAaC,CAAW,GACnD,OAAO,oBAAoB,iBAAiBC,CAAe,GACvDN,EAAW,IAAID,CAAM,KACrBC,EAAW,OAAOD,CAAM,GAEvBd,EAAkBkB,CAAQ,KAG3B,OAAOF,KAAe,cACtBA,EAAWE,GAAU,EAAE,SAAAC,GAAS;AAAA,IAEvC,GACKC,IAAc,CAACE,MAAY;AAC7B,MAAAL,EAAaK,GAASR,MAAW,UAC7BA,MAAW,YACXP,EAAQ,mBACRgB,EAAcT,GAAQQ,EAAQ,MAAM,CAAC;AAAA,IAC5C,GACKD,IAAkB,CAACG,MAAgB;AACrC,MAAAP,EAAaO,GAAa,EAAK;AAAA,IAClC;AACD,WAAO,iBAAiB,aAAaJ,GAAaX,CAAY,GAC9D,OAAO,iBAAiB,iBAAiBY,GAAiBZ,CAAY;AAAA,EACzE;AACD,SAAAD,EAAQ,QAAQ,CAACM,MAAW;AAExB,KAD0BP,EAAQ,kBAAkB,SAASO,GAC3C,iBAAiB,eAAeF,GAAYH,CAAY,GACtEgB,EAAcX,CAAM,MACpBA,EAAO,iBAAiB,SAAS,CAACb,MAAUyB,EAAoBzB,GAAOQ,CAAY,CAAC,GAChF,CAACkB,EAA4Bb,CAAM,KACnC,CAACA,EAAO,aAAa,UAAU,MAC/BA,EAAO,WAAW;AAAA,EAGlC,CAAK,GACMJ;AACX;","x_google_ignoreList":[0]}
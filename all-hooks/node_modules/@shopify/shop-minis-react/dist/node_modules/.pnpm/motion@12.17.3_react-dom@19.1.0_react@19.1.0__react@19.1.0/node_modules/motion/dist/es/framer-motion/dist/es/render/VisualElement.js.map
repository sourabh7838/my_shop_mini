{"version":3,"file":"VisualElement.js","sources":["../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/render/VisualElement.mjs"],"sourcesContent":["import { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { KeyframeResolver } from '../../../../motion-dom/dist/es/animation/keyframes/KeyframesResolver.mjs';\nimport { time } from '../../../../motion-dom/dist/es/frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../../../../motion-dom/dist/es/frameloop/frame.mjs';\nimport { isMotionValue } from '../../../../motion-dom/dist/es/value/utils/is-motion-value.mjs';\nimport { warnOnce } from '../../../../motion-utils/dist/es/warn-once.mjs';\nimport { transformProps } from '../../../../motion-dom/dist/es/render/utils/keys-transform.mjs';\nimport { motionValue } from '../../../../motion-dom/dist/es/value/index.mjs';\nimport { isNumericalString } from '../../../../motion-utils/dist/es/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../../../motion-utils/dist/es/is-zero-value-string.mjs';\nimport { findValueType } from '../../../../motion-dom/dist/es/value/types/utils/find.mjs';\nimport { complex } from '../../../../motion-dom/dist/es/value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../../../../motion-dom/dist/es/value/types/utils/animatable-none.mjs';\nimport { SubscriptionManager } from '../../../../motion-utils/dist/es/subscription-manager.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        if (valueIsTransform && this.onBindTransform) {\n            this.onBindTransform();\n        }\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.getBaseTargetFromProps(this.props, key) ??\n                this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, this.presenceContext?.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"],"names":["propEventHandlers","VisualElement","_props","_prevProps","_visualElement","parent","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","options","KeyframeResolver","now","time","frame","latestValues","renderState","isControllingVariants","isVariantNode","willChange","initialMotionValues","key","value","isMotionValue","instance","visualElementStore","hasReducedMotionListener","initPrefersReducedMotion","prefersReducedMotion","warnOnce","cancelFrame","remove","feature","valueIsTransform","transformProps","removeOnChange","latestValue","removeOnRenderRequest","removeSyncCheck","other","featureDefinitions","featureDefinition","isEnabled","FeatureConstructor","createBox","listenerName","listener","updateMotionValuesFromProps","name","child","closestVariantNode","existingValue","unsubscribe","defaultValue","motionValue","target","isNumericalString","isZeroValueString","findValueType","complex","getAnimatableNone","initial","valueFromInitial","variant","resolveVariantFromProps","eventName","callback","SubscriptionManager","args"],"mappings":"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","x_google_ignoreList":[0]}
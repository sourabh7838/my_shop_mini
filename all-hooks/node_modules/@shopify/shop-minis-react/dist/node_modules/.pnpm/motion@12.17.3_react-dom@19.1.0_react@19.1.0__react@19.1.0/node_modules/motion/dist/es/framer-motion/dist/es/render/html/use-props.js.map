{"version":3,"file":"use-props.js","sources":["../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/render/html/use-props.mjs"],"sourcesContent":["import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\nimport { isMotionValue } from '../../../../../motion-dom/dist/es/value/utils/is-motion-value.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\nfunction useHTMLProps(props, visualState) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n"],"names":["copyRawValuesOnly","target","source","props","key","isMotionValue","isForcedMotionValue","useInitialMotionValues","transformTemplate","visualState","useMemo","state","createHtmlRenderState","buildHTMLStyles","useStyle","styleProp","style","useHTMLProps","htmlProps"],"mappings":";;;;;AAMA,SAASA,EAAkBC,GAAQC,GAAQC,GAAO;AAC9C,aAAWC,KAAOF;AACd,IAAI,CAACG,EAAcH,EAAOE,CAAG,CAAC,KAAK,CAACE,EAAoBF,GAAKD,CAAK,MAC9DF,EAAOG,CAAG,IAAIF,EAAOE,CAAG;AAGpC;AACA,SAASG,EAAuB,EAAE,mBAAAC,EAAmB,GAAEC,GAAa;AAChE,SAAOC,EAAQ,MAAM;AACjB,UAAMC,IAAQC,EAAuB;AACrC,WAAAC,EAAgBF,GAAOF,GAAaD,CAAiB,GAC9C,OAAO,OAAO,CAAE,GAAEG,EAAM,MAAMA,EAAM,KAAK;AAAA,EACxD,GAAO,CAACF,CAAW,CAAC;AACpB;AACA,SAASK,EAASX,GAAOM,GAAa;AAClC,QAAMM,IAAYZ,EAAM,SAAS,CAAE,GAC7Ba,IAAQ,CAAE;AAIhB,SAAAhB,EAAkBgB,GAAOD,GAAWZ,CAAK,GACzC,OAAO,OAAOa,GAAOT,EAAuBJ,GAAOM,CAAW,CAAC,GACxDO;AACX;AACA,SAASC,EAAad,GAAOM,GAAa;AAEtC,QAAMS,IAAY,CAAE,GACdF,IAAQF,EAASX,GAAOM,CAAW;AACzC,SAAIN,EAAM,QAAQA,EAAM,iBAAiB,OAErCe,EAAU,YAAY,IAEtBF,EAAM,aACFA,EAAM,mBACFA,EAAM,qBACF,QAEZA,EAAM,cACFb,EAAM,SAAS,KACT,SACA,OAAOA,EAAM,SAAS,MAAM,MAAM,GAAG,KAE/CA,EAAM,aAAa,WAClBA,EAAM,SAASA,EAAM,cAAcA,EAAM,cAC1Ce,EAAU,WAAW,IAEzBA,EAAU,QAAQF,GACXE;AACX;","x_google_ignoreList":[0]}
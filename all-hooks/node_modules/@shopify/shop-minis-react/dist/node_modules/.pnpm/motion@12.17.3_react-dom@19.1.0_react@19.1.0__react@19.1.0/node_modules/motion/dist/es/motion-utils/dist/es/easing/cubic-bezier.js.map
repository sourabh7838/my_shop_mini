{"version":3,"file":"cubic-bezier.js","sources":["../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/motion-utils/dist/es/easing/cubic-bezier.mjs"],"sourcesContent":["import { noop } from '../noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from GaÃ«tan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n"],"names":["calcBezier","t","a1","a2","subdivisionPrecision","subdivisionMaxIterations","binarySubdivide","x","lowerBound","upperBound","mX1","mX2","currentX","currentT","i","cubicBezier","mY1","mY2","noop","getTForX","aX"],"mappings":";AAoBA,MAAMA,IAAa,CAACC,GAAGC,GAAIC,SAAU,IAAM,IAAMA,IAAK,IAAMD,KAAMD,KAAK,IAAME,IAAK,IAAMD,MAAOD,IAAI,IAAMC,KACrGD,GACEG,IAAuB,MACvBC,IAA2B;AACjC,SAASC,EAAgBC,GAAGC,GAAYC,GAAYC,GAAKC,GAAK;AAC1D,MAAIC,GACAC,GACAC,IAAI;AACR;AACI,IAAAD,IAAWL,KAAcC,IAAaD,KAAc,GACpDI,IAAWZ,EAAWa,GAAUH,GAAKC,CAAG,IAAIJ,GACxCK,IAAW,IACXH,IAAaI,IAGbL,IAAaK;AAAA,SAEZ,KAAK,IAAID,CAAQ,IAAIR,KAC1B,EAAEU,IAAIT;AACV,SAAOQ;AACX;AACA,SAASE,EAAYL,GAAKM,GAAKL,GAAKM,GAAK;AAErC,MAAIP,MAAQM,KAAOL,MAAQM;AACvB,WAAOC;AACX,QAAMC,IAAW,CAACC,MAAOd,EAAgBc,GAAI,GAAG,GAAGV,GAAKC,CAAG;AAE3D,SAAO,CAACV,MAAMA,MAAM,KAAKA,MAAM,IAAIA,IAAID,EAAWmB,EAASlB,CAAC,GAAGe,GAAKC,CAAG;AAC3E;","x_google_ignoreList":[0]}
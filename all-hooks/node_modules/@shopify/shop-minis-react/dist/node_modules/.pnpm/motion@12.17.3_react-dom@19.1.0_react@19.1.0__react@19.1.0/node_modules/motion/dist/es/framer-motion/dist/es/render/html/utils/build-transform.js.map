{"version":3,"file":"build-transform.js","sources":["../../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder } from '../../../../../../motion-dom/dist/es/render/utils/keys-transform.mjs';\nimport { getValueAsType } from '../../../../../../motion-dom/dist/es/value/types/utils/get-as-type.mjs';\nimport { numberValueTypes } from '../../../../../../motion-dom/dist/es/value/types/maps/number.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"names":["translateAlias","numTransforms","transformPropOrder","buildTransform","latestValues","transform","transformTemplate","transformString","transformIsDefault","i","key","value","valueIsDefault","valueAsType","getValueAsType","numberValueTypes","transformName"],"mappings":";;;AAIA,MAAMA,IAAiB;AAAA,EACnB,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,sBAAsB;AAC1B,GACMC,IAAgBC,EAAmB;AAOzC,SAASC,EAAeC,GAAcC,GAAWC,GAAmB;AAEhE,MAAIC,IAAkB,IAClBC,IAAqB;AAKzB,WAASC,IAAI,GAAGA,IAAIR,GAAeQ,KAAK;AACpC,UAAMC,IAAMR,EAAmBO,CAAC,GAC1BE,IAAQP,EAAaM,CAAG;AAC9B,QAAIC,MAAU;AACV;AACJ,QAAIC,IAAiB;AAOrB,QANI,OAAOD,KAAU,WACjBC,IAAiBD,OAAWD,EAAI,WAAW,OAAO,IAAI,IAAI,KAG1DE,IAAiB,WAAWD,CAAK,MAAM,GAEvC,CAACC,KAAkBN,GAAmB;AACtC,YAAMO,IAAcC,EAAeH,GAAOI,EAAiBL,CAAG,CAAC;AAC/D,UAAI,CAACE,GAAgB;AACjB,QAAAJ,IAAqB;AACrB,cAAMQ,IAAgBhB,EAAeU,CAAG,KAAKA;AAC7C,QAAAH,KAAmB,GAAGS,CAAa,IAAIH,CAAW;AAAA,MAClE;AACY,MAAIP,MACAD,EAAUK,CAAG,IAAIG;AAAA,IAEjC;AAAA,EACA;AACI,SAAAN,IAAkBA,EAAgB,KAAM,GAGpCD,IACAC,IAAkBD,EAAkBD,GAAWG,IAAqB,KAAKD,CAAe,IAEnFC,MACLD,IAAkB,SAEfA;AACX;","x_google_ignoreList":[0]}
import { isHTMLElement as i } from "../../../utils/is-html-element.js";
import { memo as c } from "../../../../../../motion-utils/dist/es/memo.js";
const l = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform"
  // TODO: Could be re-enabled now we have support for linear() easing
  // "background-color"
]), f = /* @__PURE__ */ c(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
function w(r) {
  const { motionValue: t, name: e, repeatDelay: o, repeatType: a, damping: n, type: p } = r;
  if (!i(t?.owner?.current))
    return !1;
  const { onUpdate: m, transformTemplate: s } = t.owner.getProps();
  return f() && e && l.has(e) && (e !== "transform" || !s) && /**
   * If we're outputting values to onUpdate then we can't use WAAPI as there's
   * no way to read the value from WAAPI every frame.
   */
  !m && !o && a !== "mirror" && n !== 0 && p !== "inertia";
}
export {
  w as supportsBrowserAnimation
};
//# sourceMappingURL=waapi.js.map

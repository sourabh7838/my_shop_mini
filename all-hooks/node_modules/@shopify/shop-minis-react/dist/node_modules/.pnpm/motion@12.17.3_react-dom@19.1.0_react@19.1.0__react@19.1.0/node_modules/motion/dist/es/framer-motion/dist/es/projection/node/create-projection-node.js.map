{"version":3,"file":"create-projection-node.js","sources":["../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcLength, calcRelativePosition, calcRelativeBox, calcBoxDelta, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { statsBuffer } from '../../../../../motion-dom/dist/es/stats/buffer.mjs';\nimport { SubscriptionManager } from '../../../../../motion-utils/dist/es/subscription-manager.mjs';\nimport { isSVGElement } from '../../../../../motion-dom/dist/es/utils/is-svg-element.mjs';\nimport { isSVGSVGElement } from '../../../../../motion-dom/dist/es/utils/is-svg-svg-element.mjs';\nimport { getValueTransition } from '../../../../../motion-dom/dist/es/animation/utils/get-value-transition.mjs';\nimport { cancelFrame, frameData, frameSteps, frame } from '../../../../../motion-dom/dist/es/frameloop/frame.mjs';\nimport { time } from '../../../../../motion-dom/dist/es/frameloop/sync-time.mjs';\nimport { clamp } from '../../../../../motion-utils/dist/es/clamp.mjs';\nimport { microtask } from '../../../../../motion-dom/dist/es/frameloop/microtask.mjs';\nimport { activeAnimations } from '../../../../../motion-dom/dist/es/stats/animation-count.mjs';\nimport { motionValue } from '../../../../../motion-dom/dist/es/value/index.mjs';\nimport { mixNumber } from '../../../../../motion-dom/dist/es/utils/mix/number.mjs';\nimport { noop } from '../../../../../motion-utils/dist/es/noop.mjs';\n\nconst metrics = {\n    nodes: 0,\n    calculatedTargetDeltas: 0,\n    calculatedProjections: 0,\n};\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent?.()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (statsBuffer.value) {\n                    metrics.nodes =\n                        metrics.calculatedTargetDeltas =\n                            metrics.calculatedProjections =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (statsBuffer.addProjectionMetrics) {\n                    statsBuffer.addProjectionMetrics(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance) && !isSVGSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (this.root.hasTreeAnimated && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const hasTargetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout);\n                    /*\n                     * Note: Disabled to fix relative animations always triggering new\n                     * layout animations. If this causes further issues, we can try\n                     * a different approach to detecting relative target changes.\n                     */\n                    // || hasRelativeLayoutChanged\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\n                    if (this.options.layoutRoot ||\n                        this.resumeFrom ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (hasTargetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                        /**\n                         * Set animation origin after starting animation to avoid layout jump\n                         * caused by stopping previous layout animation\n                         */\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            this.eventHandlers.clear();\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n            if (this.snapshot &&\n                !calcLength(this.snapshot.measuredBox.x) &&\n                !calcLength(this.snapshot.measuredBox.y)) {\n                this.snapshot = undefined;\n            }\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement && this.instance) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                this.instance &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = this.scroll?.wasRoot || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if (this.scroll?.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                this.parent?.isProjectionDirty ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || this.parent?.isProjectionDirty) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedProjections++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.visualElement?.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation?.stop();\n            this.resumingFrom?.currentAnimation?.stop();\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                activeAnimations.layout++;\n                this.motionValue || (this.motionValue = motionValue(0));\n                this.currentAnimation = animateSingleValue(this.motionValue, [0, 1000], {\n                    ...options,\n                    velocity: 0,\n                    isSync: true,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onStop: () => {\n                        activeAnimations.layout--;\n                    },\n                    onComplete: () => {\n                        activeAnimations.layout--;\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.lead || this : this;\n        }\n        getPrevLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity ??\n                            this.latestValues.opacity ??\n                            1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    // If this is a CSS variable, set it directly on the instance.\n                    // Replacing this function from creating styles to setting them\n                    // would be a good place to remove per frame object creation\n                    if (isCSSVariable) {\n                        this.options.visualElement.renderState.vars[key] = corrected;\n                    }\n                    else {\n                        styles[key] = corrected;\n                    }\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp?.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => node.currentAnimation?.stop());\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    const snapshot = node.resumeFrom?.snapshot || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeLayoutChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeLayoutChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeLayoutChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (statsBuffer.value) {\n        metrics.nodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    return node !== node.root && node.scroll?.wasRoot;\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"names":["transformAxes","hiddenVisibility","animationTarget","id","resetDistortingTransform","key","visualElement","values","sharedAnimationValues","latestValues","cancelTreeOptimisedTransformAnimations","projectionNode","appearId","getOptimisedAppearId","layout","layoutId","frame","parent","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","i","FlatTree","name","handler","SubscriptionManager","args","subscriptionManager","instance","isSVGElement","isSVGSVGElement","cancelDelay","resizeUnblockUpdate","delay","globalProjectionState","finishAnimation","delta","hasLayoutChanged","hasRelativeLayoutChanged","newLayout","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","hasTargetChanged","boxEqualsRounded","hasOnlyRelativeTargetChanged","animationOptions","getValueTransition","stack","cancelFrame","resetSkewAndRotation","shouldNotifyListeners","node","transformTemplate","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","time","frameData","clamp","frameSteps","microtask","clearSnapshot","removeLeadSnapshots","calcLength","prevLayout","createBox","phase","needsMeasurement","isRoot","isResetRequested","hasProjection","isDeltaZero","transformTemplateValue","transformTemplateHasChanged","hasTransform","removeTransform","pageBox","layoutBox","roundBox","box","checkNodeWasScrollRoot","scroll","translateAxis","boxWithoutScroll","copyBoxInto","options","transformOnly","withTransforms","transformBox","boxWithoutTransform","hasScale","sourceBox","nodeBox","removeBoxTransforms","forceRecalculation","lead","isShared","relativeParent","calcRelativePosition","calcRelativeBox","applyBoxDelta","has2DTranslate","canSkip","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","target","copyAxisDeltaInto","calcBoxDelta","axisDeltaEquals","notifyAll","createDelta","snapshot","snapshotLatestValues","mixedValues","targetDelta","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","latest","progress","mixAxisDelta","mixBox","boxEquals","mixValues","motionValue","animateSingleValue","targetWithTransforms","shouldAnimatePositionOnly","xLength","yLength","NodeStack","config","needsReset","transition","preserveFollowOpacity","hasDistortingTransform","resetValues","styleProp","styles","resolveMotionValue","emptyStyles","valuesToRender","buildProjectionTransform","x","y","scaleCorrectors","correct","applyTo","isCSSVariable","corrected","num","measuredLayout","animationType","eachAxis","axis","axisSnapshot","length","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onExitComplete","output","p","mixNumber","mixAxis","from","to","userAgentContains","string","roundPoint","noop","roundAxis","isNear","aspectRatio"],"mappings":"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","x_google_ignoreList":[0]}
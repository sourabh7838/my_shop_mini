{"version":3,"file":"find.js","sources":["../../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/motion-dom/dist/es/animation/generators/spring/find.mjs"],"sourcesContent":["import { springDefaults } from './defaults.mjs';\nimport { warning } from '../../../../../../motion-utils/dist/es/errors.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../../../../motion-utils/dist/es/time-conversion.mjs';\nimport { clamp } from '../../../../../../motion-utils/dist/es/clamp.mjs';\n\nconst safeMin = 0.001;\nfunction findSpring({ duration = springDefaults.duration, bounce = springDefaults.bounce, velocity = springDefaults.velocity, mass = springDefaults.mass, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(springDefaults.maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(springDefaults.minDamping, springDefaults.maxDamping, dampingRatio);\n    duration = clamp(springDefaults.minDuration, springDefaults.maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: springDefaults.stiffness,\n            damping: springDefaults.damping,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring };\n"],"names":["safeMin","findSpring","duration","springDefaults","bounce","velocity","mass","envelope","derivative","warning","secondsToMilliseconds","dampingRatio","clamp","millisecondsToSeconds","undampedFreq","exponentialDecay","delta","a","b","calcAngularFreq","c","d","e","f","g","initialGuess","approximateRoot","stiffness","rootIterations","result"],"mappings":";;;;AAKA,MAAMA,IAAU;AAChB,SAASC,EAAW,EAAE,UAAAC,IAAWC,EAAe,UAAU,QAAAC,IAASD,EAAe,QAAQ,UAAAE,IAAWF,EAAe,UAAU,MAAAG,IAAOH,EAAe,KAAI,GAAK;AACzJ,MAAII,GACAC;AACJ,EAAAC,EAAQP,KAAYQ,EAAsBP,EAAe,WAAW,GAAG,4CAA4C;AACnH,MAAIQ,IAAe,IAAIP;AAIvB,EAAAO,IAAeC,EAAMT,EAAe,YAAYA,EAAe,YAAYQ,CAAY,GACvFT,IAAWU,EAAMT,EAAe,aAAaA,EAAe,aAAaU,EAAsBX,CAAQ,CAAC,GACpGS,IAAe,KAIfJ,IAAW,CAACO,MAAiB;AACzB,UAAMC,IAAmBD,IAAeH,GAClCK,IAAQD,IAAmBb,GAC3Be,IAAIF,IAAmBV,GACvBa,IAAIC,EAAgBL,GAAcH,CAAY,GAC9CS,IAAI,KAAK,IAAI,CAACJ,CAAK;AACzB,WAAOhB,IAAWiB,IAAIC,IAAKE;AAAA,EAC9B,GACDZ,IAAa,CAACM,MAAiB;AAE3B,UAAME,IADmBF,IAAeH,IACPT,GAC3BmB,IAAIL,IAAQX,IAAWA,GACvBiB,IAAI,KAAK,IAAIX,GAAc,CAAC,IAAI,KAAK,IAAIG,GAAc,CAAC,IAAIZ,GAC5DqB,IAAI,KAAK,IAAI,CAACP,CAAK,GACnBQ,IAAIL,EAAgB,KAAK,IAAIL,GAAc,CAAC,GAAGH,CAAY;AAEjE,YADe,CAACJ,EAASO,CAAY,IAAId,IAAU,IAAI,KAAK,OACzCqB,IAAIC,KAAKC,KAAMC;AAAA,EACrC,MAMDjB,IAAW,CAACO,MAAiB;AACzB,UAAMG,IAAI,KAAK,IAAI,CAACH,IAAeZ,CAAQ,GACrCgB,KAAKJ,IAAeT,KAAYH,IAAW;AACjD,WAAO,QAAWe,IAAIC;AAAA,EACzB,GACDV,IAAa,CAACM,MAAiB;AAC3B,UAAMG,IAAI,KAAK,IAAI,CAACH,IAAeZ,CAAQ,GACrCgB,KAAKb,IAAWS,MAAiBZ,IAAWA;AAClD,WAAOe,IAAIC;AAAA,EACd;AAEL,QAAMO,IAAe,IAAIvB,GACnBY,IAAeY,EAAgBnB,GAAUC,GAAYiB,CAAY;AAEvE,MADAvB,IAAWQ,EAAsBR,CAAQ,GACrC,MAAMY,CAAY;AAClB,WAAO;AAAA,MACH,WAAWX,EAAe;AAAA,MAC1B,SAASA,EAAe;AAAA,MACxB,UAAAD;AAAA,IACH;AAEA;AACD,UAAMyB,IAAY,KAAK,IAAIb,GAAc,CAAC,IAAIR;AAC9C,WAAO;AAAA,MACH,WAAAqB;AAAA,MACA,SAAShB,IAAe,IAAI,KAAK,KAAKL,IAAOqB,CAAS;AAAA,MACtD,UAAAzB;AAAA,IACH;AAAA,EACT;AACA;AACA,MAAM0B,IAAiB;AACvB,SAASF,EAAgBnB,GAAUC,GAAYiB,GAAc;AACzD,MAAII,IAASJ;AACb,WAAS,IAAI,GAAG,IAAIG,GAAgB;AAChC,IAAAC,IAASA,IAAStB,EAASsB,CAAM,IAAIrB,EAAWqB,CAAM;AAE1D,SAAOA;AACX;AACA,SAASV,EAAgBL,GAAcH,GAAc;AACjD,SAAOG,IAAe,KAAK,KAAK,IAAIH,IAAeA,CAAY;AACnE;","x_google_ignoreList":[0]}
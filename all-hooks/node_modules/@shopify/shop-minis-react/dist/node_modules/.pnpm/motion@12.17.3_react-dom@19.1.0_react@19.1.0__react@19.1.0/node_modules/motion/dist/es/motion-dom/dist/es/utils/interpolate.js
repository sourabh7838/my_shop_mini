import { mix as h } from "./mix/index.js";
import { invariant as x } from "../../../../motion-utils/dist/es/errors.js";
import { clamp as M } from "../../../../motion-utils/dist/es/clamp.js";
import { MotionGlobalConfig as b } from "../../../../motion-utils/dist/es/global-config.js";
import { noop as y } from "../../../../motion-utils/dist/es/noop.js";
import { pipe as A } from "../../../../motion-utils/dist/es/pipe.js";
import { progress as F } from "../../../../motion-utils/dist/es/progress.js";
function R(r, e, f) {
  const t = [], c = f || b.mix || h, o = r.length - 1;
  for (let n = 0; n < o; n++) {
    let i = c(r[n], r[n + 1]);
    if (e) {
      const a = Array.isArray(e) ? e[n] || y : e;
      i = A(a, i);
    }
    t.push(i);
  }
  return t;
}
function I(r, e, { clamp: f = !0, ease: t, mixer: c } = {}) {
  const o = r.length;
  if (x(o === e.length, "Both input and output ranges must be the same length"), o === 1)
    return () => e[0];
  if (o === 2 && e[0] === e[1])
    return () => e[1];
  const n = r[0] === r[1];
  r[0] > r[o - 1] && (r = [...r].reverse(), e = [...e].reverse());
  const i = R(e, t, c), a = i.length, l = (s) => {
    if (n && s < r[0])
      return e[0];
    let m = 0;
    if (a > 1)
      for (; m < r.length - 2 && !(s < r[m + 1]); m++)
        ;
    const g = F(r[m], r[m + 1], s);
    return i[m](g);
  };
  return f ? (s) => l(M(r[0], r[o - 1], s)) : l;
}
export {
  I as interpolate
};
//# sourceMappingURL=interpolate.js.map

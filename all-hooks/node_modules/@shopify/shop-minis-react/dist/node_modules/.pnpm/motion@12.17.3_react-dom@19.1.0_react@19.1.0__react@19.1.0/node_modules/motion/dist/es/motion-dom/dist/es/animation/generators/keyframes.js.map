{"version":3,"file":"keyframes.js","sources":["../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/motion-dom/dist/es/animation/generators/keyframes.mjs"],"sourcesContent":["import { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../keyframes/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../keyframes/offsets/time.mjs';\nimport { easeInOut } from '../../../../../motion-utils/dist/es/easing/ease.mjs';\nimport { isEasingArray } from '../../../../../motion-utils/dist/es/easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../../../../motion-utils/dist/es/easing/utils/map.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n"],"names":["defaultEasing","values","easing","easeInOut","keyframes","duration","keyframeValues","times","ease","easingFunctions","isEasingArray","easingDefinitionToFunction","state","absoluteTimes","convertOffsetToTimes","defaultOffset","mapTimeToKeyframe","interpolate","t"],"mappings":";;;;;;AAOA,SAASA,EAAcC,GAAQC,GAAQ;AACnC,SAAOD,EAAO,IAAI,MAAMC,KAAUC,CAAS,EAAE,OAAO,GAAGF,EAAO,SAAS,CAAC;AAC5E;AACA,SAASG,EAAU,EAAE,UAAAC,IAAW,KAAK,WAAWC,GAAgB,OAAAC,GAAO,MAAAC,IAAO,eAAgB;AAK1F,QAAMC,IAAkBC,EAAcF,CAAI,IACpCA,EAAK,IAAIG,CAA0B,IACnCA,EAA2BH,CAAI,GAK/BI,IAAQ;AAAA,IACV,MAAM;AAAA,IACN,OAAON,EAAe,CAAC;AAAA,EAC1B,GAIKO,IAAgBC;AAAA;AAAA;AAAA,IAGtBP,KAASA,EAAM,WAAWD,EAAe,SACnCC,IACAQ,EAAcT,CAAc;AAAA,IAAGD;AAAA,EAAQ,GACvCW,IAAoBC,EAAYJ,GAAeP,GAAgB;AAAA,IACjE,MAAM,MAAM,QAAQG,CAAe,IAC7BA,IACAT,EAAcM,GAAgBG,CAAe;AAAA,EAC3D,CAAK;AACD,SAAO;AAAA,IACH,oBAAoBJ;AAAA,IACpB,MAAM,CAACa,OACHN,EAAM,QAAQI,EAAkBE,CAAC,GACjCN,EAAM,OAAOM,KAAKb,GACXO;AAAA,EAEd;AACL;","x_google_ignoreList":[0]}
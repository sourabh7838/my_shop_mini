import { VisualElement as r } from "../VisualElement.js";
import { DOMKeyframesResolver as o } from "../../../../../motion-dom/dist/es/animation/keyframes/DOMKeyframesResolver.js";
import { isMotionValue as s } from "../../../../../motion-dom/dist/es/value/utils/is-motion-value.js";
class a extends r {
  constructor() {
    super(...arguments), this.KeyframeResolver = o;
  }
  sortInstanceNodePosition(e, t) {
    return e.compareDocumentPosition(t) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(e, t) {
    return e.style ? e.style[t] : void 0;
  }
  removeValueFromRenderState(e, { vars: t, style: i }) {
    delete t[e], delete i[e];
  }
  handleChildMotionValue() {
    this.childSubscription && (this.childSubscription(), delete this.childSubscription);
    const { children: e } = this.props;
    s(e) && (this.childSubscription = e.on("change", (t) => {
      this.current && (this.current.textContent = `${t}`);
    }));
  }
}
export {
  a as DOMVisualElement
};
//# sourceMappingURL=DOMVisualElement.js.map

{"version":3,"file":"stack.js","sources":["../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/projection/shared/stack.mjs"],"sourcesContent":["import { addUniqueItem, removeItem } from '../../../../../motion-utils/dist/es/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n"],"names":["NodeStack","node","addUniqueItem","removeItem","prevLead","indexOfNode","member","preserveFollowOpacity","crossfade","options","resumingFrom"],"mappings":";AAEA,MAAMA,EAAU;AAAA,EACZ,cAAc;AACV,SAAK,UAAU,CAAE;AAAA,EACzB;AAAA,EACI,IAAIC,GAAM;AACN,IAAAC,EAAc,KAAK,SAASD,CAAI,GAChCA,EAAK,eAAgB;AAAA,EAC7B;AAAA,EACI,OAAOA,GAAM;AAKT,QAJAE,EAAW,KAAK,SAASF,CAAI,GACzBA,MAAS,KAAK,aACd,KAAK,WAAW,SAEhBA,MAAS,KAAK,MAAM;AACpB,YAAMG,IAAW,KAAK,QAAQ,KAAK,QAAQ,SAAS,CAAC;AACrD,MAAIA,KACA,KAAK,QAAQA,CAAQ;AAAA,IAErC;AAAA,EACA;AAAA,EACI,SAASH,GAAM;AACX,UAAMI,IAAc,KAAK,QAAQ,UAAU,CAACC,MAAWL,MAASK,CAAM;AACtE,QAAID,MAAgB;AAChB,aAAO;AAIX,QAAID;AACJ,aAAS,IAAIC,GAAa,KAAK,GAAG,KAAK;AACnC,YAAMC,IAAS,KAAK,QAAQ,CAAC;AAC7B,UAAIA,EAAO,cAAc,IAAO;AAC5B,QAAAF,IAAWE;AACX;AAAA,MAChB;AAAA,IACA;AACQ,WAAIF,KACA,KAAK,QAAQA,CAAQ,GACd,MAGA;AAAA,EAEnB;AAAA,EACI,QAAQH,GAAMM,GAAuB;AACjC,UAAMH,IAAW,KAAK;AACtB,QAAIH,MAASG,MAEb,KAAK,WAAWA,GAChB,KAAK,OAAOH,GACZA,EAAK,KAAM,GACPG,IAAU;AACV,MAAAA,EAAS,YAAYA,EAAS,eAAgB,GAC9CH,EAAK,eAAgB,GACrBA,EAAK,aAAaG,GACdG,MACAN,EAAK,WAAW,kBAAkB,KAElCG,EAAS,aACTH,EAAK,WAAWG,EAAS,UACzBH,EAAK,SAAS,eACVG,EAAS,mBAAmBA,EAAS,eAEzCH,EAAK,QAAQA,EAAK,KAAK,eACvBA,EAAK,gBAAgB;AAEzB,YAAM,EAAE,WAAAO,MAAcP,EAAK;AAC3B,MAAIO,MAAc,MACdJ,EAAS,KAAM;AAAA,IAc/B;AAAA,EACA;AAAA,EACI,wBAAwB;AACpB,SAAK,QAAQ,QAAQ,CAACH,MAAS;AAC3B,YAAM,EAAE,SAAAQ,GAAS,cAAAC,EAAY,IAAKT;AAClC,MAAAQ,EAAQ,kBAAkBA,EAAQ,eAAgB,GAC9CC,KACAA,EAAa,QAAQ,kBACjBA,EAAa,QAAQ,eAAgB;AAAA,IAEzD,CAAS;AAAA,EACT;AAAA,EACI,iBAAiB;AACb,SAAK,QAAQ,QAAQ,CAACT,MAAS;AAC3B,MAAAA,EAAK,YAAYA,EAAK,eAAe,EAAK;AAAA,IACtD,CAAS;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKI,qBAAqB;AACjB,IAAI,KAAK,QAAQ,KAAK,KAAK,aACvB,KAAK,KAAK,WAAW;AAAA,EAEjC;AACA;","x_google_ignoreList":[0]}
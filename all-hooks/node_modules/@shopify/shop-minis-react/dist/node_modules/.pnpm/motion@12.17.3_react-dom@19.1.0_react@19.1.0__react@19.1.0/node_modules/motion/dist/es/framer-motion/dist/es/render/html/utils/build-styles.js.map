{"version":3,"file":"build-styles.js","sources":["../../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/render/html/utils/build-styles.mjs"],"sourcesContent":["import { buildTransform } from './build-transform.mjs';\nimport { transformProps } from '../../../../../../motion-dom/dist/es/render/utils/keys-transform.mjs';\nimport { isCSSVariableName } from '../../../../../../motion-dom/dist/es/animation/utils/is-css-variable.mjs';\nimport { getValueAsType } from '../../../../../../motion-dom/dist/es/value/types/utils/get-as-type.mjs';\nimport { numberValueTypes } from '../../../../../../motion-dom/dist/es/value/types/maps/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n"],"names":["buildHTMLStyles","state","latestValues","transformTemplate","style","vars","transformOrigin","hasTransform","hasTransformOrigin","key","value","transformProps","isCSSVariableName","valueAsType","getValueAsType","numberValueTypes","buildTransform","originX","originY","originZ"],"mappings":";;;;;AAMA,SAASA,EAAgBC,GAAOC,GAAcC,GAAmB;AAC7D,QAAM,EAAE,OAAAC,GAAO,MAAAC,GAAM,iBAAAC,EAAiB,IAAGL;AAEzC,MAAIM,IAAe,IACfC,IAAqB;AAOzB,aAAWC,KAAOP,GAAc;AAC5B,UAAMQ,IAAQR,EAAaO,CAAG;AAC9B,QAAIE,EAAe,IAAIF,CAAG,GAAG;AAEzB,MAAAF,IAAe;AACf;AAAA,IACZ,WACiBK,EAAkBH,CAAG,GAAG;AAC7B,MAAAJ,EAAKI,CAAG,IAAIC;AACZ;AAAA,IACZ,OACa;AAED,YAAMG,IAAcC,EAAeJ,GAAOK,EAAiBN,CAAG,CAAC;AAC/D,MAAIA,EAAI,WAAW,QAAQ,KAEvBD,IAAqB,IACrBF,EAAgBG,CAAG,IACfI,KAGJT,EAAMK,CAAG,IAAII;AAAA,IAE7B;AAAA,EACA;AAiBI,MAhBKX,EAAa,cACVK,KAAgBJ,IAChBC,EAAM,YAAYY,EAAed,GAAcD,EAAM,WAAWE,CAAiB,IAE5EC,EAAM,cAKXA,EAAM,YAAY,UAOtBI,GAAoB;AACpB,UAAM,EAAE,SAAAS,IAAU,OAAO,SAAAC,IAAU,OAAO,SAAAC,IAAU,EAAC,IAAMb;AAC3D,IAAAF,EAAM,kBAAkB,GAAGa,CAAO,IAAIC,CAAO,IAAIC,CAAO;AAAA,EAChE;AACA;","x_google_ignoreList":[0]}
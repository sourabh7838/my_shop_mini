{"version":3,"file":"motion-values.js","sources":["../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/render/utils/motion-values.mjs"],"sourcesContent":["import { isMotionValue } from '../../../../../motion-dom/dist/es/value/utils/is-motion-value.mjs';\nimport { motionValue } from '../../../../../motion-dom/dist/es/value/index.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n"],"names":["updateMotionValuesFromProps","element","next","prev","key","nextValue","prevValue","isMotionValue","motionValue","existingValue","latestValue"],"mappings":";;AAGA,SAASA,EAA4BC,GAASC,GAAMC,GAAM;AACtD,aAAWC,KAAOF,GAAM;AACpB,UAAMG,IAAYH,EAAKE,CAAG,GACpBE,IAAYH,EAAKC,CAAG;AAC1B,QAAIG,EAAcF,CAAS;AAKvB,MAAAJ,EAAQ,SAASG,GAAKC,CAAS;AAAA,aAE1BE,EAAcD,CAAS;AAK5B,MAAAL,EAAQ,SAASG,GAAKI,EAAYH,GAAW,EAAE,OAAOJ,EAAO,CAAE,CAAC;AAAA,aAE3DK,MAAcD;AAMnB,UAAIJ,EAAQ,SAASG,CAAG,GAAG;AACvB,cAAMK,IAAgBR,EAAQ,SAASG,CAAG;AAC1C,QAAIK,EAAc,cAAc,KAC5BA,EAAc,KAAKJ,CAAS,IAEtBI,EAAc,eACpBA,EAAc,IAAIJ,CAAS;AAAA,MAE/C,OACiB;AACD,cAAMK,IAAcT,EAAQ,eAAeG,CAAG;AAC9C,QAAAH,EAAQ,SAASG,GAAKI,EAAYE,MAAgB,SAAYA,IAAcL,GAAW,EAAE,OAAOJ,EAAS,CAAA,CAAC;AAAA,MAC1H;AAAA,EAEA;AAEI,aAAWG,KAAOD;AACd,IAAID,EAAKE,CAAG,MAAM,UACdH,EAAQ,YAAYG,CAAG;AAE/B,SAAOF;AACX;","x_google_ignoreList":[0]}
{"version":3,"file":"scale-box-shadow.js","sources":["../../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs"],"sourcesContent":["import { complex } from '../../../../../motion-dom/dist/es/value/types/complex/index.mjs';\nimport { mixNumber } from '../../../../../motion-dom/dist/es/utils/mix/number.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n"],"names":["correctBoxShadow","latest","treeScale","projectionDelta","original","shadow","complex","template","offset","xScale","yScale","averageScale","mixNumber"],"mappings":";;AAGK,MAACA,IAAmB;AAAA,EACrB,SAAS,CAACC,GAAQ,EAAE,WAAAC,GAAW,iBAAAC,EAAe,MAAO;AACjD,UAAMC,IAAWH,GACXI,IAASC,EAAQ,MAAML,CAAM;AAEnC,QAAII,EAAO,SAAS;AAChB,aAAOD;AACX,UAAMG,IAAWD,EAAQ,kBAAkBL,CAAM,GAC3CO,IAAS,OAAOH,EAAO,CAAC,KAAM,WAAW,IAAI,GAE7CI,IAASN,EAAgB,EAAE,QAAQD,EAAU,GAC7CQ,IAASP,EAAgB,EAAE,QAAQD,EAAU;AACnD,IAAAG,EAAO,IAAIG,CAAM,KAAKC,GACtBJ,EAAO,IAAIG,CAAM,KAAKE;AAOtB,UAAMC,IAAeC,EAAUH,GAAQC,GAAQ,GAAG;AAElD,WAAI,OAAOL,EAAO,IAAIG,CAAM,KAAM,aAC9BH,EAAO,IAAIG,CAAM,KAAKG,IAEtB,OAAON,EAAO,IAAIG,CAAM,KAAM,aAC9BH,EAAO,IAAIG,CAAM,KAAKG,IACnBJ,EAASF,CAAM;AAAA,EACzB;AACL;","x_google_ignoreList":[0]}
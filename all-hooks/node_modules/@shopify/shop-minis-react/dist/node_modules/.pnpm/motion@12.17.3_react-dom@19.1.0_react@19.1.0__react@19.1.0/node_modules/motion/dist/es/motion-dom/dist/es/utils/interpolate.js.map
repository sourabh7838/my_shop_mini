{"version":3,"file":"interpolate.js","sources":["../../../../../../../../../../../../node_modules/.pnpm/motion@12.17.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/motion/dist/es/motion-dom/dist/es/utils/interpolate.mjs"],"sourcesContent":["import { mix } from './mix/index.mjs';\nimport { invariant } from '../../../../motion-utils/dist/es/errors.mjs';\nimport { clamp } from '../../../../motion-utils/dist/es/clamp.mjs';\nimport { MotionGlobalConfig } from '../../../../motion-utils/dist/es/global-config.mjs';\nimport { noop } from '../../../../motion-utils/dist/es/noop.mjs';\nimport { pipe } from '../../../../motion-utils/dist/es/pipe.mjs';\nimport { progress } from '../../../../motion-utils/dist/es/progress.mjs';\n\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || MotionGlobalConfig.mix || mix;\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revisit this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    if (inputLength === 2 && output[0] === output[1])\n        return () => output[1];\n    const isZeroDeltaRange = input[0] === input[1];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        if (isZeroDeltaRange && v < input[0])\n            return output[0];\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n"],"names":["createMixers","output","ease","customMixer","mixers","mixerFactory","MotionGlobalConfig","mix","numMixers","i","mixer","easingFunction","noop","pipe","interpolate","input","isClamp","inputLength","invariant","isZeroDeltaRange","interpolator","v","progressInRange","progress","clamp"],"mappings":";;;;;;;AAQA,SAASA,EAAaC,GAAQC,GAAMC,GAAa;AAC7C,QAAMC,IAAS,CAAE,GACXC,IAAeF,KAAeG,EAAmB,OAAOC,GACxDC,IAAYP,EAAO,SAAS;AAClC,WAASQ,IAAI,GAAGA,IAAID,GAAWC,KAAK;AAChC,QAAIC,IAAQL,EAAaJ,EAAOQ,CAAC,GAAGR,EAAOQ,IAAI,CAAC,CAAC;AACjD,QAAIP,GAAM;AACN,YAAMS,IAAiB,MAAM,QAAQT,CAAI,IAAIA,EAAKO,CAAC,KAAKG,IAAOV;AAC/D,MAAAQ,IAAQG,EAAKF,GAAgBD,CAAK;AAAA,IAC9C;AACQ,IAAAN,EAAO,KAAKM,CAAK;AAAA,EACzB;AACI,SAAON;AACX;AAoBA,SAASU,EAAYC,GAAOd,GAAQ,EAAE,OAAOe,IAAU,IAAM,MAAAd,GAAM,OAAAQ,EAAO,IAAG,IAAI;AAC7E,QAAMO,IAAcF,EAAM;AAM1B,MALAG,EAAUD,MAAgBhB,EAAO,QAAQ,sDAAsD,GAK3FgB,MAAgB;AAChB,WAAO,MAAMhB,EAAO,CAAC;AACzB,MAAIgB,MAAgB,KAAKhB,EAAO,CAAC,MAAMA,EAAO,CAAC;AAC3C,WAAO,MAAMA,EAAO,CAAC;AACzB,QAAMkB,IAAmBJ,EAAM,CAAC,MAAMA,EAAM,CAAC;AAE7C,EAAIA,EAAM,CAAC,IAAIA,EAAME,IAAc,CAAC,MAChCF,IAAQ,CAAC,GAAGA,CAAK,EAAE,QAAS,GAC5Bd,IAAS,CAAC,GAAGA,CAAM,EAAE,QAAS;AAElC,QAAMG,IAASJ,EAAaC,GAAQC,GAAMQ,CAAK,GACzCF,IAAYJ,EAAO,QACnBgB,IAAe,CAACC,MAAM;AACxB,QAAIF,KAAoBE,IAAIN,EAAM,CAAC;AAC/B,aAAOd,EAAO,CAAC;AACnB,QAAIQ,IAAI;AACR,QAAID,IAAY;AACZ,aAAOC,IAAIM,EAAM,SAAS,KAClB,EAAAM,IAAIN,EAAMN,IAAI,CAAC,IADMA;AACzB;AAIR,UAAMa,IAAkBC,EAASR,EAAMN,CAAC,GAAGM,EAAMN,IAAI,CAAC,GAAGY,CAAC;AAC1D,WAAOjB,EAAOK,CAAC,EAAEa,CAAe;AAAA,EACnC;AACD,SAAON,IACD,CAACK,MAAMD,EAAaI,EAAMT,EAAM,CAAC,GAAGA,EAAME,IAAc,CAAC,GAAGI,CAAC,CAAC,IAC9DD;AACV;","x_google_ignoreList":[0]}
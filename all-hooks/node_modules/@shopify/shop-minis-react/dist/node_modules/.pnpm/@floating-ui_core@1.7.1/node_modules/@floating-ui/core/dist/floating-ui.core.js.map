{"version":3,"file":"floating-ui.core.js","sources":["../../../../../../../../node_modules/.pnpm/@floating-ui+core@1.7.1/node_modules/@floating-ui/core/dist/floating-ui.core.mjs"],"sourcesContent":["import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          const ignoreCrossAxisOverflow = checkCrossAxis === 'alignment' ? initialSideAxis !== getSideAxis(nextPlacement) : false;\n          if (!ignoreCrossAxisOverflow ||\n          // We leave the current main axis only if every placement on that axis\n          // overflows the main axis.\n          overflowsData.every(d => d.overflows[0] > 0 && getSideAxis(d.placement) === initialSideAxis)) {\n            // Try next placement and re-run the lifecycle.\n            return {\n              data: {\n                index: nextIndex,\n                overflows: overflowsData\n              },\n              reset: {\n                placement: nextPlacement\n              }\n            };\n          }\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n"],"names":["computeCoordsFromPlacement","_ref","placement","rtl","reference","floating","sideAxis","getSideAxis","alignmentAxis","getAlignmentAxis","alignLength","getAxisLength","side","getSide","isVertical","commonX","commonY","commonAlign","coords","getAlignment","computePosition","config","strategy","middleware","platform","validMiddleware","rects","x","y","statefulPlacement","middlewareData","resetCount","i","name","fn","nextX","nextY","data","reset","detectOverflow","state","options","_await$platform$isEle","elements","boundary","rootBoundary","elementContext","altBoundary","padding","evaluate","paddingObject","getPaddingObject","element","clippingClientRect","rectToClientRect","rect","offsetParent","offsetScale","elementClientRect","arrow","axis","length","arrowDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","min","maxPadding","min$1","max","center","offset","clamp","shouldAddOffset","alignmentOffset","flip","_middlewareData$arrow","_middlewareData$flip","initialPlacement","checkMainAxis","checkCrossAxis","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","detectOverflowOptions","initialSideAxis","isBasePlacement","fallbackPlacements","getOppositePlacement","getExpandedPlacements","hasFallbackAxisSideDirection","getOppositeAxisPlacements","placements","overflow","overflows","overflowsData","sides","getAlignmentSides","_middlewareData$flip2","_overflowsData$filter","nextIndex","nextPlacement","d","resetPlacement","a","b","_overflowsData$filter2","currentSideAxis","acc","getSideOffsets","isAnySideFullyClipped","hide","offsets","convertValueToCoords","alignment","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","crossAxis","_middlewareData$offse","diffCoords","shift","limiter","getOppositeAxis","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse2","isOriginSide","size","_state$middlewareData","_state$middlewareData2","apply","width","height","heightSide","widthSide","maximumClippingHeight","maximumClippingWidth","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","xMin","xMax","yMin","yMax","nextDimensions"],"mappings":"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","x_google_ignoreList":[0]}
{"version":3,"file":"index.js","sources":["../../../../../../node_modules/.pnpm/url-parse@1.5.10/node_modules/url-parse/index.js"],"sourcesContent":["'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , controlOrWhitespace = /^[\\x00-\\x20\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/\n  , CRHTLF = /[\\n\\r\\t]/g\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , port = /:\\d+$/\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i\n  , windowsDriveLetter = /^[a-zA-Z]:/;\n\n/**\n * Remove control characters and whitespace from the beginning of a string.\n *\n * @param {Object|String} str String to trim.\n * @returns {String} A new string representing `str` stripped of control\n *     characters and whitespace from its beginning.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(controlOrWhitespace, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address, url) {     // Sanitize what is left of the address\n    return isSpecial(url.protocol) ? address.replace(/\\\\/g, '/') : address;\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d*)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * Check whether a protocol scheme is special.\n *\n * @param {String} The protocol scheme of the URL\n * @return {Boolean} `true` if the protocol scheme is special, else `false`\n * @private\n */\nfunction isSpecial(scheme) {\n  return (\n    scheme === 'file:' ||\n    scheme === 'ftp:' ||\n    scheme === 'http:' ||\n    scheme === 'https:' ||\n    scheme === 'ws:' ||\n    scheme === 'wss:'\n  );\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @param {Object} location\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address, location) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n  location = location || {};\n\n  var match = protocolre.exec(address);\n  var protocol = match[1] ? match[1].toLowerCase() : '';\n  var forwardSlashes = !!match[2];\n  var otherSlashes = !!match[3];\n  var slashesCount = 0;\n  var rest;\n\n  if (forwardSlashes) {\n    if (otherSlashes) {\n      rest = match[2] + match[3] + match[4];\n      slashesCount = match[2].length + match[3].length;\n    } else {\n      rest = match[2] + match[4];\n      slashesCount = match[2].length;\n    }\n  } else {\n    if (otherSlashes) {\n      rest = match[3] + match[4];\n      slashesCount = match[3].length;\n    } else {\n      rest = match[4]\n    }\n  }\n\n  if (protocol === 'file:') {\n    if (slashesCount >= 2) {\n      rest = rest.slice(2);\n    }\n  } else if (isSpecial(protocol)) {\n    rest = match[4];\n  } else if (protocol) {\n    if (forwardSlashes) {\n      rest = rest.slice(2);\n    }\n  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {\n    rest = match[4];\n  }\n\n  return {\n    protocol: protocol,\n    slashes: forwardSlashes || isSpecial(protocol),\n    slashesCount: slashesCount,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '', location);\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (\n    extracted.protocol === 'file:' && (\n      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||\n    (!extracted.slashes &&\n      (extracted.protocol ||\n        extracted.slashesCount < 2 ||\n        !isSpecial(url.protocol)))\n  ) {\n    instructions[3] = [/(.*)/, 'pathname'];\n  }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address, url);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      index = parse === '@'\n        ? address.lastIndexOf(parse)\n        : address.indexOf(parse);\n\n      if (~index) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n\n  if (url.auth) {\n    index = url.auth.indexOf(':');\n\n    if (~index) {\n      url.username = url.auth.slice(0, index);\n      url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n      url.password = url.auth.slice(index + 1);\n      url.password = encodeURIComponent(decodeURIComponent(url.password))\n    } else {\n      url.username = encodeURIComponent(decodeURIComponent(url.auth));\n    }\n\n    url.auth = url.password ? url.username +':'+ url.password : url.username;\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (port.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    case 'username':\n    case 'password':\n      url[part] = encodeURIComponent(value);\n      break;\n\n    case 'auth':\n      var index = value.indexOf(':');\n\n      if (~index) {\n        url.username = value.slice(0, index);\n        url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n        url.password = value.slice(index + 1);\n        url.password = encodeURIComponent(decodeURIComponent(url.password));\n      } else {\n        url.username = encodeURIComponent(decodeURIComponent(value));\n      }\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.auth = url.password ? url.username +':'+ url.password : url.username;\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , host = url.host\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result =\n    protocol +\n    ((url.protocol && url.slashes) || isSpecial(url.protocol) ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  } else if (url.password) {\n    result += ':'+ url.password;\n    result += '@';\n  } else if (\n    url.protocol !== 'file:' &&\n    isSpecial(url.protocol) &&\n    !host &&\n    url.pathname !== '/'\n  ) {\n    //\n    // Add back the empty userinfo, otherwise the original invalid URL\n    // might be transformed into a valid one with `url.pathname` as host.\n    //\n    result += '@';\n  }\n\n  //\n  // Trailing colon is removed from `url.host` when it is parsed. If it still\n  // ends with a colon, then add back the trailing colon that was removed. This\n  // prevents an invalid URL from being transformed into a valid one.\n  //\n  if (host[host.length - 1] === ':' || (port.test(url.hostname) && !url.port)) {\n    host += ':';\n  }\n\n  result += host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n"],"names":["required","require$$0","qs","require$$1","controlOrWhitespace","CRHTLF","slashes","port","protocolre","windowsDriveLetter","trimLeft","str","rules","address","url","isSpecial","ignore","lolcation","loc","globalVar","global","location","finaldestination","type","key","Url","scheme","extractProtocol","match","protocol","forwardSlashes","otherSlashes","slashesCount","rest","resolve","relative","base","path","i","last","unshift","up","parser","extracted","parse","instruction","index","instructions","set","part","value","fn","char","ins","toString","stringify","query","host","result","urlParse"],"mappings":"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","x_google_ignoreList":[0]}
import * as l from "react";
import { composeRefs as y } from "../../../../../@radix-ui_react-compose-refs@1.1.2_@types_react@19.1.6_react@19.1.0/node_modules/@radix-ui/react-compose-refs/dist/index.js";
import { jsx as p, Fragment as S } from "react/jsx-runtime";
// @__NO_SIDE_EFFECTS__
function g(e) {
  const t = /* @__PURE__ */ E(e), r = l.forwardRef((o, n) => {
    const { children: i, ...a } = o, s = l.Children.toArray(i), c = s.find(C);
    if (c) {
      const f = c.props.children, m = s.map((u) => u === c ? l.Children.count(f) > 1 ? l.Children.only(null) : l.isValidElement(f) ? f.props.children : null : u);
      return /* @__PURE__ */ p(t, { ...a, ref: n, children: l.isValidElement(f) ? l.cloneElement(f, void 0, m) : null });
    }
    return /* @__PURE__ */ p(t, { ...a, ref: n, children: i });
  });
  return r.displayName = `${e}.Slot`, r;
}
var x = /* @__PURE__ */ g("Slot");
// @__NO_SIDE_EFFECTS__
function E(e) {
  const t = l.forwardRef((r, o) => {
    const { children: n, ...i } = r;
    if (l.isValidElement(n)) {
      const a = b(n), s = R(i, n.props);
      return n.type !== l.Fragment && (s.ref = o ? y(o, a) : a), l.cloneElement(n, s);
    }
    return l.Children.count(n) > 1 ? l.Children.only(null) : null;
  });
  return t.displayName = `${e}.SlotClone`, t;
}
var d = Symbol("radix.slottable");
// @__NO_SIDE_EFFECTS__
function I(e) {
  const t = ({ children: r }) => /* @__PURE__ */ p(S, { children: r });
  return t.displayName = `${e}.Slottable`, t.__radixId = d, t;
}
function C(e) {
  return l.isValidElement(e) && typeof e.type == "function" && "__radixId" in e.type && e.type.__radixId === d;
}
function R(e, t) {
  const r = { ...t };
  for (const o in t) {
    const n = e[o], i = t[o];
    /^on[A-Z]/.test(o) ? n && i ? r[o] = (...s) => {
      const c = i(...s);
      return n(...s), c;
    } : n && (r[o] = n) : o === "style" ? r[o] = { ...n, ...i } : o === "className" && (r[o] = [n, i].filter(Boolean).join(" "));
  }
  return { ...e, ...r };
}
function b(e) {
  let t = Object.getOwnPropertyDescriptor(e.props, "ref")?.get, r = t && "isReactWarning" in t && t.isReactWarning;
  return r ? e.ref : (t = Object.getOwnPropertyDescriptor(e, "ref")?.get, r = t && "isReactWarning" in t && t.isReactWarning, r ? e.props.ref : e.props.ref || e.ref);
}
export {
  x as Root,
  x as Slot,
  g as createSlot,
  I as createSlottable
};
//# sourceMappingURL=index.js.map

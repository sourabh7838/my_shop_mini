{"version":3,"file":"ConcurrentOutput.test.js","sourceRoot":"","sources":["../../../../../src/private/node/ui/components/ConcurrentOutput.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import {ConcurrentOutput, useConcurrentOutputContext} from './ConcurrentOutput.js'\nimport {render} from '../../testing/ui.js'\nimport {AbortController, AbortSignal} from '../../../../public/node/abort.js'\nimport {unstyled} from '../../../../public/node/output.js'\nimport React from 'react'\nimport {describe, expect, test} from 'vitest'\nimport {Writable} from 'stream'\n\n/**\n * ConcurrentOutput tests are unreliable unless we await a promise that resolves after the process has written to stdout.\n */\nclass Synchronizer {\n  resolve: () => void\n  promise: Promise<void>\n\n  constructor() {\n    this.resolve = () => {}\n    this.promise = new Promise<void>((resolve, _reject) => {\n      this.resolve = resolve\n    })\n  }\n}\n\ndescribe('ConcurrentOutput', () => {\n  test('renders a stream of concurrent outputs from sub-processes', async () => {\n    // Given\n    const backendSync = new Synchronizer()\n    const frontendSync = new Synchronizer()\n\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n\n        backendSync.resolve()\n      },\n    }\n\n    const frontendProcess = {\n      prefix: 'frontend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        await backendSync.promise\n\n        stdout.write('first frontend message')\n        stdout.write('second frontend message')\n        stdout.write('third frontend message')\n\n        frontendSync.resolve()\n      },\n    }\n    // When\n\n    const renderInstance = render(\n      <ConcurrentOutput processes={[backendProcess, frontendProcess]} abortSignal={new AbortController().signal} />,\n    )\n\n    await frontendSync.promise\n\n    // Then\n    expect(unstyled(renderInstance.lastFrame()!.replace(/\\d/g, '0'))).toMatchInlineSnapshot(`\n      \"00:00:00 │  backend │ first backend message\n      00:00:00 │  backend │ second backend message\n      00:00:00 │  backend │ third backend message\n      00:00:00 │ frontend │ first frontend message\n      00:00:00 │ frontend │ second frontend message\n      00:00:00 │ frontend │ third frontend message\n      \"\n    `)\n  })\n\n  test('strips ansi codes from the output by default', async () => {\n    const output = 'foo'\n\n    // Given\n    const processSync = new Synchronizer()\n    const processes = [\n      {\n        prefix: '1',\n        action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n          stdout.write(`\\u001b[32m${output}\\u001b[39m`)\n          processSync.resolve()\n        },\n      },\n    ]\n\n    // When\n    const renderInstance = render(<ConcurrentOutput processes={processes} abortSignal={new AbortController().signal} />)\n    await processSync.promise\n\n    // Then\n    const logColumns = renderInstance.lastFrame()!.split('│')\n    expect(logColumns.length).toBe(3)\n    expect(logColumns[2]?.trim()).toEqual(output)\n  })\n\n  test('does not strip ansi codes from the output when stripAnsi is false', async () => {\n    const output = '\\u001b[32mfoo\\u001b[39m'\n\n    // Given\n    const processSync = new Synchronizer()\n    const processes = [\n      {\n        prefix: '1',\n        action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          useConcurrentOutputContext({stripAnsi: false}, () => {\n            stdout.write(output)\n          })\n          processSync.resolve()\n        },\n      },\n    ]\n\n    // When\n    const renderInstance = render(<ConcurrentOutput processes={processes} abortSignal={new AbortController().signal} />)\n    await processSync.promise\n\n    // Then\n    const logColumns = renderInstance.lastFrame()!.split('│')\n    expect(logColumns.length).toBe(3)\n    expect(logColumns[2]?.trim()).toEqual(output)\n  })\n\n  test('renders custom prefixes on log lines', async () => {\n    // Given\n    const processSync = new Synchronizer()\n    const extensionName = 'my-extension'\n    const processes = [\n      {\n        prefix: '1',\n        action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          useConcurrentOutputContext({outputPrefix: extensionName}, () => {\n            stdout.write('foo bar')\n          })\n          processSync.resolve()\n        },\n      },\n    ]\n\n    // When\n    const renderInstance = render(\n      <ConcurrentOutput\n        processes={processes}\n        // Ensure it's not truncated\n        prefixColumnSize={extensionName.length}\n        abortSignal={new AbortController().signal}\n      />,\n    )\n\n    await processSync.promise\n\n    // Then\n    const logColumns = unstyled(renderInstance.lastFrame()!).split('│')\n    expect(logColumns.length).toBe(3)\n    expect(logColumns[1]?.trim()).toEqual(extensionName)\n  })\n\n  test('renders prefix column width based on prefixColumnSize', async () => {\n    // Given\n    const processSync1 = new Synchronizer()\n    const processSync2 = new Synchronizer()\n\n    const columnSize = 5\n    const processes = [\n      {\n        prefix: '1234567890',\n        action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n          stdout.write('foo')\n          processSync1.resolve()\n        },\n      },\n      {\n        prefix: '1',\n        action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n          stdout.write('bar')\n          processSync2.resolve()\n        },\n      },\n    ]\n\n    // When\n    const renderInstance = render(\n      <ConcurrentOutput\n        processes={processes}\n        prefixColumnSize={columnSize}\n        abortSignal={new AbortController().signal}\n      />,\n    )\n    await Promise.all([processSync1.promise, processSync2.promise])\n\n    // Then\n    const logLines = unstyled(renderInstance.lastFrame()!).split('\\n').filter(Boolean)\n    expect(logLines.length).toBe(2)\n    logLines.forEach((line) => {\n      const logColumns = line.split('│')\n      expect(logColumns.length).toBe(3)\n      // Including spacing\n      expect(logColumns[1]?.length).toBe(columnSize + 2)\n    })\n  })\n\n  test('renders prefix column width based on processes by default', async () => {\n    // Given\n    const processSync = new Synchronizer()\n    const processes = [\n      {\n        prefix: '1',\n        action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n          stdout.write('foo')\n          processSync.resolve()\n        },\n      },\n      {prefix: '12', action: async () => {}},\n      {prefix: '123', action: async () => {}},\n      {prefix: '1234', action: async () => {}},\n    ]\n\n    // When\n    const renderInstance = render(<ConcurrentOutput processes={processes} abortSignal={new AbortController().signal} />)\n    await processSync.promise\n\n    // Then\n    const logColumns = unstyled(renderInstance.lastFrame()!).split('│')\n    expect(logColumns.length).toBe(3)\n    // 4 is largest prefix, plus spacing\n    expect(logColumns[1]?.length).toBe(4 + 2)\n  })\n\n  test('does not render prefix column larger than max', async () => {\n    // Given\n    const processSync = new Synchronizer()\n    const processes = [\n      {\n        prefix: '1',\n        action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n          stdout.write('foo')\n          processSync.resolve()\n        },\n      },\n      {prefix: new Array(26).join('0'), action: async () => {}},\n    ]\n\n    // When\n    const renderInstance = render(<ConcurrentOutput processes={processes} abortSignal={new AbortController().signal} />)\n    await processSync.promise\n\n    // Then\n    const logColumns = unstyled(renderInstance.lastFrame()!).split('│')\n    expect(logColumns.length).toBe(3)\n    // 25 is largest column allowed, plus spacing\n    expect(logColumns[1]?.length).toBe(25 + 2)\n  })\n\n  test('rejects with the error thrown inside one of the processes', async () => {\n    // Given\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n\n        throw new Error('something went wrong')\n      },\n    }\n\n    // When\n\n    const renderInstance = render(\n      <ConcurrentOutput processes={[backendProcess]} abortSignal={new AbortController().signal} />,\n    )\n\n    const renderPromise = renderInstance.waitUntilExit()\n\n    await expect(renderPromise).rejects.toThrowError('something went wrong')\n    expect(renderPromise.isRejected()).toBe(true)\n  })\n\n  test(\"doesn't reject when an error is thrown inside one of the processes and keepRunningAfterProcessesResolve is true\", async () => {\n    // Given\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n\n        throw new Error('something went wrong')\n      },\n    }\n\n    // When\n\n    const renderInstance = render(\n      <ConcurrentOutput\n        processes={[backendProcess]}\n        abortSignal={new AbortController().signal}\n        keepRunningAfterProcessesResolve\n      />,\n    )\n\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    expect(renderInstance.waitUntilExit().isRejected()).toBe(false)\n  })\n\n  test('render promise resolves when all processes resolve by default', async () => {\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n      },\n    }\n\n    // When\n    const renderInstance = render(\n      <ConcurrentOutput processes={[backendProcess]} abortSignal={new AbortController().signal} />,\n    )\n\n    const renderPromise = renderInstance.waitUntilExit()\n\n    await renderPromise\n    expect(renderPromise.isFulfilled()).toBe(true)\n  })\n\n  test(\"render promise doesn't resolve when all processes resolve and keepRunningAfterProcessesResolve is true\", async () => {\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n      },\n    }\n\n    // When\n    const renderInstance = render(\n      <ConcurrentOutput\n        keepRunningAfterProcessesResolve\n        processes={[backendProcess]}\n        abortSignal={new AbortController().signal}\n      />,\n    )\n\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    expect(renderInstance.waitUntilExit().isFulfilled()).toBe(false)\n  })\n})\n"]}
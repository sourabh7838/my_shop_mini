{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../src/private/node/api.ts"],"names":[],"mappings":"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","sourcesContent":["import {sanitizedHeadersOutput} from './api/headers.js'\nimport {sanitizeURL} from './api/urls.js'\nimport {outputDebug} from '@shopify/cli-kit/node/output'\nimport {Headers} from 'form-data'\nimport {ClientError} from 'graphql-request'\nimport {performance} from 'perf_hooks'\n\nexport type API = 'admin' | 'storefront-renderer' | 'partners' | 'business-platform' | 'app-management'\n\nexport const allAPIs: API[] = ['admin', 'storefront-renderer', 'partners', 'business-platform', 'app-management']\n\nconst DEFAULT_RETRY_DELAY_MS = 1000\nconst DEFAULT_RETRY_LIMIT = 10\n\ninterface RequestOptions<T> {\n  request: () => Promise<T>\n  url: string\n}\n\nconst interestingResponseHeaders = new Set([\n  'cache-control',\n  'content-type',\n  'etag',\n  'x-request-id',\n  'server-timing',\n  'retry-after',\n])\n\nfunction responseHeaderIsInteresting(header: string): boolean {\n  return interestingResponseHeaders.has(header)\n}\n\ntype VerboseResponse<T> = {\n  duration: number\n  sanitizedHeaders: string\n  sanitizedUrl: string\n  requestId?: string\n} & (\n  | {status: 'ok'; response: T}\n  | {status: 'client-error'; clientError: ClientError}\n  | {status: 'unknown-error'; error: unknown}\n  | {status: 'can-retry'; clientError: ClientError; delayMs: number | undefined}\n)\n\nasync function makeVerboseRequest<T extends {headers: Headers; status: number}>({\n  request,\n  url,\n}: RequestOptions<T>): Promise<VerboseResponse<T>> {\n  const t0 = performance.now()\n  let duration = 0\n  const responseHeaders: {[key: string]: string} = {}\n  const sanitizedUrl = sanitizeURL(url)\n  let response: T = {} as T\n  try {\n    response = await request()\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    response.headers.forEach((value: any, key: any) => {\n      if (responseHeaderIsInteresting(key)) responseHeaders[key] = value\n    })\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (err) {\n    const t1 = performance.now()\n    duration = Math.round(t1 - t0)\n\n    if (err instanceof ClientError) {\n      if (err.response.headers) {\n        for (const [key, value] of err.response.headers as Iterable<[string, string]>) {\n          if (responseHeaderIsInteresting(key)) responseHeaders[key] = value\n        }\n      }\n      const sanitizedHeaders = sanitizedHeadersOutput(responseHeaders)\n\n      if (errorsIncludeStatus429(err)) {\n        let delayMs: number | undefined\n\n        try {\n          delayMs = responseHeaders['retry-after'] ? Number.parseInt(responseHeaders['retry-after'], 10) : undefined\n          // eslint-disable-next-line no-catch-all/no-catch-all\n        } catch {\n          // ignore errors in extracting retry-after header\n        }\n        return {\n          status: 'can-retry',\n          clientError: err,\n          duration,\n          sanitizedHeaders,\n          sanitizedUrl,\n          requestId: responseHeaders['x-request-id'],\n          delayMs,\n        }\n      }\n\n      return {\n        status: 'client-error',\n        clientError: err,\n        duration,\n        sanitizedHeaders,\n        sanitizedUrl,\n        requestId: responseHeaders['x-request-id'],\n      }\n    }\n    return {\n      status: 'unknown-error',\n      error: err,\n      duration,\n      sanitizedHeaders: sanitizedHeadersOutput(responseHeaders),\n      sanitizedUrl,\n      requestId: responseHeaders['x-request-id'],\n    }\n  }\n  const t1 = performance.now()\n  duration = Math.round(t1 - t0)\n  return {\n    status: 'ok',\n    response,\n    duration,\n    sanitizedHeaders: sanitizedHeadersOutput(responseHeaders),\n    sanitizedUrl,\n    requestId: responseHeaders['x-request-id'],\n  }\n}\n\nfunction errorsIncludeStatus429(error: ClientError): boolean {\n  if (error.response.status === 429) {\n    return true\n  }\n\n  // GraphQL returns a 401 with a string error message when auth fails\n  // Therefore error.response.errros can be a string or GraphQLError[]\n  if (typeof error.response.errors === 'string') {\n    return false\n  }\n  return error.response.errors?.some((error) => error.extensions?.code === '429') ?? false\n}\n\nexport async function simpleRequestWithDebugLog<T extends {headers: Headers; status: number}>(\n  {request, url}: RequestOptions<T>,\n  errorHandler?: (error: unknown, requestId: string | undefined) => unknown,\n): Promise<T> {\n  const result = await makeVerboseRequest({request, url})\n\n  outputDebug(`Request to ${result.sanitizedUrl} completed in ${result.duration} ms\nWith response headers:\n${result.sanitizedHeaders}\n    `)\n\n  switch (result.status) {\n    case 'ok': {\n      return result.response\n    }\n    case 'client-error': {\n      if (errorHandler) {\n        throw errorHandler(result.clientError, result.requestId)\n      } else {\n        throw result.clientError\n      }\n    }\n    case 'unknown-error': {\n      if (errorHandler) {\n        throw errorHandler(result.error, result.requestId)\n      } else {\n        throw result.error\n      }\n    }\n    case 'can-retry': {\n      if (errorHandler) {\n        throw errorHandler(result.clientError, result.requestId)\n      } else {\n        throw result.clientError\n      }\n    }\n  }\n}\n\nexport async function retryAwareRequest<T extends {headers: Headers; status: number}>(\n  {request, url}: RequestOptions<T>,\n  errorHandler?: (error: unknown, requestId: string | undefined) => unknown,\n  retryOptions: {\n    limitRetriesTo?: number\n    defaultDelayMs?: number\n    scheduleDelay: (fn: () => void, delay: number) => void\n  } = {\n    scheduleDelay: setTimeout,\n  },\n): Promise<T> {\n  let retriesUsed = 0\n  const limitRetriesTo = retryOptions.limitRetriesTo ?? DEFAULT_RETRY_LIMIT\n\n  let result = await makeVerboseRequest({request, url})\n\n  outputDebug(`Request to ${result.sanitizedUrl} completed in ${result.duration} ms\nWith response headers:\n${result.sanitizedHeaders}\n    `)\n\n  while (true) {\n    if (result.status === 'ok') {\n      if (retriesUsed > 0) {\n        outputDebug(`Request to ${result.sanitizedUrl} succeeded after ${retriesUsed} retries`)\n      }\n      return result.response\n    } else if (result.status === 'client-error') {\n      if (errorHandler) {\n        throw errorHandler(result.clientError, result.requestId)\n      } else {\n        throw result.clientError\n      }\n    } else if (result.status === 'unknown-error') {\n      if (errorHandler) {\n        throw errorHandler(result.error, result.requestId)\n      } else {\n        throw result.error\n      }\n    }\n\n    if (limitRetriesTo <= retriesUsed) {\n      outputDebug(`${limitRetriesTo} retries exhausted for request to ${result.sanitizedUrl}`)\n      if (errorHandler) {\n        throw errorHandler(result.clientError, result.requestId)\n      } else {\n        throw result.clientError\n      }\n    }\n    retriesUsed += 1\n\n    // prefer to wait based on a header if given; the caller's preference if not; and a default if neither.\n    const retryDelayMs = result.delayMs ?? retryOptions.defaultDelayMs ?? DEFAULT_RETRY_DELAY_MS\n    outputDebug(`Scheduling retry request #${retriesUsed} to ${result.sanitizedUrl} in ${retryDelayMs} ms`)\n\n    // eslint-disable-next-line no-await-in-loop\n    result = await new Promise<VerboseResponse<T>>((resolve) => {\n      retryOptions.scheduleDelay(() => {\n        resolve(makeVerboseRequest({request, url}))\n      }, retryDelayMs)\n    })\n  }\n}\n"]}
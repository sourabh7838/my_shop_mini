{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/public/node/themes/types.ts"],"names":[],"mappings":"AAuNA,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,8BAAiB,CAAA;IACjB,8BAAiB,CAAA;AACnB,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB","sourcesContent":["import {AdminSession} from '../session.js'\n\n/**\n * {@link Key} represents the unique identifier of a file in a theme.\n */\nexport type Key = string\n\nexport type ThemeFSEventName = 'add' | 'change' | 'unlink'\n\ntype ThemeFSEvent =\n  | {\n      type: 'unlink'\n      payload: {fileKey: Key; onSync?: (fn: () => void) => void}\n    }\n  | {\n      type: 'add' | 'change'\n      payload: {\n        fileKey: Key\n        onContent: (fn: (content: string) => void) => void\n        onSync: (fn: () => void) => void\n      }\n    }\n\nexport type ThemeFSEventPayload<T extends ThemeFSEventName = 'add'> = (ThemeFSEvent & {type: T})['payload']\n\nexport interface ThemeFileSystemOptions {\n  filters?: {ignore?: string[]; only?: string[]}\n  notify?: string\n  noDelete?: boolean\n}\n\n/**\n * Represents a theme on the file system.\n */\nexport interface VirtualFileSystem {\n  /**\n   * The root path of the theme.\n   */\n  root: string\n\n  /**\n   * Local files.\n   */\n  files: Map<Key, ThemeAsset>\n\n  /**\n   * File keys that have been modified in memory and are not uploaded yet.\n   */\n  unsyncedFileKeys: Set<Key>\n\n  /**\n   * Promise that resolves when all the initial files are found.\n   */\n  ready: () => Promise<void>\n\n  /**\n   * Removes a file from the local disk and updates the file system\n   *\n   * @param fileKey - The key of the file to remove\n   */\n  delete: (fileKey: Key) => Promise<void>\n\n  /**\n   * Writes a file to the local disk and updates the file system\n   *\n   * @param asset - The ThemeAsset representing the file to write\n   */\n  write: (asset: ThemeAsset) => Promise<void>\n\n  /**\n   * Reads a file from the local disk and updates the file system\n   * Returns a ThemeAsset representing the file that was read\n   * Returns undefined if the file does not exist\n   *\n   * @param fileKey - The key of the file to read\n   */\n  read: (fileKey: Key) => Promise<string | Buffer | undefined>\n\n  /**\n   * Add callbacks to run after certain events are fired.\n   */\n  addEventListener: <T extends ThemeFSEventName>(eventName: T, cb: (params: ThemeFSEventPayload<T>) => void) => void\n}\n\n/**\n * Represents a theme on the file system.\n */\nexport interface ThemeFileSystem extends VirtualFileSystem {\n  /**\n   * Starts a file watcher for the theme directory.\n   *\n   * @param themeId - The ID of the theme being watched.\n   * @param adminSession - The admin session for API communication.\n   * @returns A Promise that resolves to an FSWatcher instance.\n   */\n  startWatcher: (themeId: string, adminSession: AdminSession) => Promise<void>\n\n  /**\n   * Applies filters to ignore files from .shopifyignore file, --ignore and --only flags.\n   */\n  applyIgnoreFilters: <T extends {key: string}>(files: T[]) => T[]\n}\n\n/**\n * Represents a theme on the file system.\n */\nexport interface ThemeExtensionFileSystem extends VirtualFileSystem {\n  /**\n   * Starts a file watcher for the theme extension directory.\n   */\n  startWatcher: () => Promise<void>\n}\n\n/**\n * Represents a theme.\n */\nexport interface Theme {\n  /**\n   * The remote ID of the theme.\n   */\n  id: number\n\n  /**\n   * The remote name of the theme.\n   */\n  name: string\n\n  /**\n   * A boolean determining whether or not the theme was created at runtime.\n   */\n  createdAtRuntime: boolean\n\n  /**\n   * A boolean determining if the theme is processing at the theme library.\n   */\n  processing: boolean\n\n  /**\n   * The remote role of the theme.\n   */\n  role: string\n\n  /**\n   * A public URL where Shopify can access the theme code.\n   */\n  src?: string\n}\n\n/**\n * Represents the remote checksum for a file in a theme.\n */\nexport interface Checksum {\n  /**\n   * Identifier of the theme file.\n   */\n  key: Key\n\n  /**\n   * Represents the checksum value of the theme file.\n   */\n  checksum: string\n}\n\n/**\n * Represents a theme or theme extension asset.\n */\nexport interface ThemeAsset extends Checksum {\n  /**\n   * A base64-encoded image.\n   */\n  attachment?: string\n\n  /**\n   * The text content of the asset, such as the HTML and Liquid markup of a template file.\n   */\n  value?: string\n\n  /**\n   * File stats at time of last modification. For attachments, this is the size of the base64 string.\n   */\n  stats?: {mtime: number; size: number}\n}\n\n/**\n * Represents a single result for an upload or delete operation on a single file\n * Each result includes the unique identifier for the file, the type of the operation,\n * the success status of the operation, any errors that occurred, and the asset value of the file.\n */\nexport interface Result {\n  /**\n   * The unique identifier for the file being uploaded.\n   */\n  key: string\n\n  /**\n   * The operation associated with the result.\n   */\n  operation: Operation\n\n  /**\n   * Indicates whether the upload operation for this file was successful.\n   */\n  success: boolean\n\n  /**\n   * Error message that was generated during the upload operation for this file.\n   */\n  errors?: {asset?: string[]}\n\n  /**\n   * The asset that was uploaded as part of the upload operation for this file.\n   */\n  asset?: Omit<ThemeAsset, 'stats'>\n}\n\nexport enum Operation {\n  Delete = 'DELETE',\n  Upload = 'UPLOAD',\n}\n"]}
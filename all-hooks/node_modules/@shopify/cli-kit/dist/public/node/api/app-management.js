import { graphqlRequestDoc } from './graphql.js';
import { appManagementFqdn } from '../context/fqdn.js';
import { setNextDeprecationDate } from '../../../private/node/context/deprecations-store.js';
import Bottleneck from 'bottleneck';
// API Rate limiter for partners API (Limit is 10 requests per second)
// Jobs are launched every 150ms to add an extra 50ms margin per request.
// Only 10 requests can be executed concurrently.
const limiter = new Bottleneck({
    minTime: 150,
    maxConcurrent: 10,
});
async function setupRequest(orgId, token) {
    const api = 'App Management';
    const fqdn = await appManagementFqdn();
    const url = `https://${fqdn}/app_management/unstable/organizations/${orgId}/graphql.json`;
    return {
        token,
        api,
        url,
        responseOptions: { onResponse: handleDeprecations },
    };
}
/**
 * Executes an org-scoped GraphQL query against the App Management API. Uses typed documents.
 *
 * @param orgId - The organization ID.
 * @param query - GraphQL query to execute.
 * @param token - Partners token.
 * @param variables - GraphQL variables to pass to the query.
 * @returns The response of the query of generic type <T>.
 */
export async function appManagementRequestDoc(orgId, query, token, variables) {
    const result = limiter.schedule(async () => graphqlRequestDoc({
        ...(await setupRequest(orgId, token)),
        query,
        variables,
    }));
    return result;
}
/**
 * Sets the next deprecation date from [GraphQL response extensions](https://www.apollographql.com/docs/resources/graphql-glossary/#extensions)
 * if `response.extensions.deprecations` objects contain a `supportedUntilDate` (ISO 8601-formatted string).
 *
 * @param response - The response of the query.
 */
export function handleDeprecations(response) {
    if (!response.extensions)
        return;
    const deprecationDates = [];
    for (const deprecation of response.extensions.deprecations) {
        if (deprecation.supportedUntilDate) {
            deprecationDates.push(new Date(deprecation.supportedUntilDate));
        }
    }
    setNextDeprecationDate(deprecationDates);
}
//# sourceMappingURL=app-management.js.map
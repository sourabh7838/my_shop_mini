import { graphqlRequest, graphqlRequestDoc } from './graphql.js';
import { handleDeprecations } from './partners.js';
import { businessPlatformFqdn } from '../context/fqdn.js';
/**
 * Sets up the request to the Business Platform Destinations API.
 *
 * @param token - Business Platform token.
 */
async function setupRequest(token) {
    const api = 'BusinessPlatform';
    const fqdn = await businessPlatformFqdn();
    const url = `https://${fqdn}/destinations/api/2020-07/graphql`;
    return {
        token,
        api,
        url,
        responseOptions: { onResponse: handleDeprecations },
    };
}
/**
 * Executes a GraphQL query against the Business Platform Destinations API.
 *
 * @param query - GraphQL query to execute.
 * @param token - Business Platform token.
 * @param variables - GraphQL variables to pass to the query.
 * @returns The response of the query of generic type <T>.
 */
export async function businessPlatformRequest(query, token, variables) {
    return graphqlRequest({
        ...(await setupRequest(token)),
        query,
        variables,
    });
}
/**
 * Executes a GraphQL query against the Business Platform Destinations API. Uses typed documents.
 *
 * @param query - GraphQL query to execute.
 * @param token - Business Platform token.
 * @param variables - GraphQL variables to pass to the query.
 * @returns The response of the query of generic type <TResult>.
 */
export async function businessPlatformRequestDoc(query, token, variables) {
    return graphqlRequestDoc({
        ...(await setupRequest(token)),
        query,
        variables,
    });
}
/**
 * Sets up the request to the Business Platform Organizations API.
 *
 * @param token - Business Platform token.
 * @param organizationId - Organization ID as a numeric (non-GID) value.
 */
async function setupOrganizationsRequest(token, organizationId) {
    const api = 'BusinessPlatform';
    const fqdn = await businessPlatformFqdn();
    const url = `https://${fqdn}/organizations/api/unstable/organization/${organizationId}/graphql`;
    return {
        token,
        api,
        url,
        responseOptions: { onResponse: handleDeprecations },
    };
}
/**
 * Executes a GraphQL query against the Business Platform Organizations API.
 *
 * @param query - GraphQL query to execute.
 * @param token - Business Platform token.
 * @param organizationId - Organization ID as a numeric (non-GID) value.
 * @param variables - GraphQL variables to pass to the query.
 * @returns The response of the query of generic type <T>.
 */
export async function businessPlatformOrganizationsRequest(query, token, organizationId, variables) {
    return graphqlRequest({
        query,
        ...(await setupOrganizationsRequest(token, organizationId)),
        variables,
    });
}
/**
 * Executes a GraphQL query against the Business Platform Organizations API. Uses typed documents.
 *
 * @param query - GraphQL query to execute.
 * @param token - Business Platform token.
 * @param organizationId - Organization ID as a numeric value.
 * @param variables - GraphQL variables to pass to the query.
 * @returns The response of the query of generic type <T>.
 */
export async function businessPlatformOrganizationsRequestDoc(query, token, organizationId, variables) {
    return graphqlRequestDoc({
        query,
        ...(await setupOrganizationsRequest(token, organizationId)),
        variables,
    });
}
//# sourceMappingURL=business-platform.js.map
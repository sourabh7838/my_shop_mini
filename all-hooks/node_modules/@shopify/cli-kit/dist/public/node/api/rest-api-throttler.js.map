{"version":3,"file":"rest-api-throttler.js","sourceRoot":"","sources":["../../../../src/public/node/api/rest-api-throttler.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,WAAW,EAAC,MAAM,gCAAgC,CAAA;AAE1D,MAAM,+BAA+B,GAAG,CAAC,CAAA;AACzC,MAAM,oBAAoB,GAAG,CAAC,CAAA;AAE9B,MAAM,oCAAoC,GAAG,IAAI,CAAA;AACjD,MAAM,gCAAgC,GAAG,IAAI,CAAA;AAE7C,MAAM,aAAa,GAAG,OAAO,CAAA;AAE7B;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAI,OAAgB;IAChD,OAAO,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;QACzC,MAAM,cAAc,GAAG,GAAG,EAAE;YAC1B,eAAe,CAAC,aAAa,CAAC,CAAC,cAAc,IAAI,CAAC,CAAA;YAClD,OAAO,CAAC,OAAO,EAAE,CAAC,CAAA;QACpB,CAAC,CAAA;QAED;;;;;;;WAOG;QACH,MAAM,gBAAgB,GAAG,GAAG,EAAE;YAC5B,IAAI,kBAAkB,EAAE,EAAE;gBACxB,UAAU,CAAC,GAAG,EAAE;oBACd,yBAAyB,CAAC,cAAc,CAAC,CAAA;gBAC3C,CAAC,EAAE,gCAAgC,CAAC,CAAA;aACrC;iBAAM;gBACL,yBAAyB,CAAC,cAAc,CAAC,CAAA;aAC1C;QACH,CAAC,CAAA;QAED;;;;;;;;WAQG;QACH,MAAM,yBAAyB,GAAG,CAAC,OAAmB,EAAE,EAAE;YACxD,IAAI,kBAAkB,EAAE,EAAE;gBACxB,UAAU,CAAC,GAAG,EAAE;oBACd,yBAAyB,CAAC,gBAAgB,CAAC,CAAA;gBAC7C,CAAC,EAAE,oCAAoC,CAAC,CAAA;aACzC;iBAAM;gBACL,OAAO,EAAE,CAAA;aACV;QACH,CAAC,CAAA;QAED;;WAEG;QACH,yBAAyB,CAAC,gBAAgB,CAAC,CAAA;IAC7C,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;QACd,eAAe,CAAC,aAAa,CAAC,CAAC,cAAc,IAAI,CAAC,CAAA;IACpD,CAAC,CAAC,CAAA;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,8BAA8B,CAAC,QAAsB;IACnE,MAAM,SAAS,GAAG,+BAA+B,CAAC,QAAQ,CAAC,CAAA;IAE3D,IAAI,CAAC,SAAS,EAAE;QACd,OAAM;KACP;IAED,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,SAAS,CAAA;IAE/B,iBAAiB,EAAE,CAAC,YAAY,GAAG,EAAC,IAAI,EAAE,KAAK,EAAC,CAAA;AAClD,CAAC;AAED,SAAS,kBAAkB;IACzB,OAAO,eAAe,CAAC,aAAa,CAAC,CAAC,cAAc,GAAG,+BAA+B,CAAA;AACxF,CAAC;AAED,SAAS,kBAAkB;IACzB,MAAM,EAAC,IAAI,EAAE,KAAK,EAAC,GAAG,iBAAiB,EAAE,CAAC,YAAY,CAAA;IACtD,OAAO,IAAI,IAAI,KAAK,GAAG,oBAAoB,CAAA;AAC7C,CAAC;AAED,SAAS,iBAAiB;IACxB,OAAO,eAAe,CAAC,aAAa,CAAC,CAAC,iBAAiB,CAAA;AACzD,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,SAAS,eAAe,CAAC,OAAe;IACtC,MAAM,eAAe,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAA;IACjD,IAAI,eAAe,KAAK,SAAS,EAAE;QACjC,MAAM,aAAa,GAAG;YACpB,cAAc,EAAE,CAAC;YACjB,iBAAiB,EAAE;gBACjB,YAAY,EAAE,EAAC,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC;aACnC;SACF,CAAA;QACD,gBAAgB,CAAC,OAAO,CAAC,GAAG,aAAa,CAAA;QACzC,OAAO,aAAa,CAAA;KACrB;SAAM;QACL,OAAO,eAAe,CAAA;KACvB;AACH,CAAC;AAgBD,MAAM,gBAAgB,GAElB,EAAE,CAAA;AAEN,SAAS,+BAA+B,CAAC,QAAsB;IAC7D,MAAM,aAAa,GAAG,MAAM,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAA;IACrD,MAAM,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC,CAAA;IAE7C,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,CAAC,CAAA;KACT;IAED,OAAO,UAAU,CAAA;AACnB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,QAAsB,EACtB,SAAsC;IAEtC,MAAM,UAAU,GAAG,+BAA+B,CAAC,QAAQ,CAAC,CAAA;IAC5D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;QACtC,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,SAAS,EAAE,CAAC,CAAA;QACtB,CAAC,EAAE,UAAU,CAAC,CAAA;IAChB,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,SAAS,+BAA+B,CAAC,QAAsB;IAC7D,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,EAAE,+BAA+B,CAAC,CAAA;IAEtE,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,YAAY;SAC/B,KAAK,CAAC,GAAG,CAAC;SACV,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SAC9B,MAAM,CAAC,OAAO,CAAC,CAAA;IAElB,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;QACnB,OAAM;KACP;IAED,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;AACtB,CAAC;AAED,SAAS,MAAM,CAAC,QAAsB,EAAE,IAAY;IAClD,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAA;IAChC,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;IAE5B,IAAI,MAAM,EAAE,MAAM,KAAK,CAAC,EAAE;QACxB,OAAO,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;KACvB;IAED,OAAO,EAAE,CAAA;AACX,CAAC;AAED,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;IACtB,MAAM,EAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAA;IAC/D,IAAI,QAAsB,CAAA;IAE1B,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG;YACT,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,EAAE;SACZ,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,IAAI,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC9D,QAAQ;YACR,QAAQ,CAAC,OAAO,GAAG;gBACjB,aAAa,EAAE,CAAC,KAAK,CAAC;aACvB,CAAA;YAED,OAAO;YACP,MAAM,eAAe,GAAG,+BAA+B,CAAC,QAAQ,CAAC,CAAA;YAEjE,OAAO;YACP,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACpE,QAAQ;YACR,QAAQ,CAAC,OAAO,GAAG;gBACjB,aAAa,EAAE,EAAE;aAClB,CAAA;YAED,OAAO;YACP,MAAM,eAAe,GAAG,+BAA+B,CAAC,QAAQ,CAAC,CAAA;YAEjE,OAAO;YACP,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC9D,QAAQ;YACR,QAAQ,CAAC,OAAO,GAAG;gBACjB,aAAa,EAAE,CAAC,SAAS,CAAC;aAC3B,CAAA;YAED,OAAO;YACP,MAAM,eAAe,GAAG,+BAA+B,CAAC,QAAQ,CAAC,CAAA;YAEjE,OAAO;YACP,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC9D,QAAQ;YACR,QAAQ,CAAC,OAAO,GAAG,EAAE,CAAA;YAErB,OAAO;YACP,MAAM,eAAe,GAAG,+BAA+B,CAAC,QAAQ,CAAC,CAAA;YAEjE,OAAO;YACP,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,IAAI,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YAC1E,QAAQ;YACR,QAAQ,CAAC,OAAO,GAAG;gBACjB,+BAA+B,EAAE,CAAC,OAAO,CAAC;aAC3C,CAAA;YAED,OAAO;YACP,MAAM,SAAS,GAAG,+BAA+B,CAAC,QAAQ,CAAC,CAAA;YAC3D,oEAAoE;YACpE,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,SAAU,CAAA;YAEhC,OAAO;YACP,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YACrB,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QACxB,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC5E,QAAQ;YACR,QAAQ,CAAC,OAAO,GAAG;gBACjB,+BAA+B,EAAE,CAAC,SAAS,CAAC;aAC7C,CAAA;YAED,OAAO;YACP,MAAM,SAAS,GAAG,+BAA+B,CAAC,QAAQ,CAAC,CAAA;YAE3D,OAAO;YACP,MAAM,CAAC,SAAS,CAAC,CAAC,aAAa,EAAE,CAAA;QACnC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC9F,QAAQ;YACR,QAAQ,CAAC,OAAO,GAAG;gBACjB,+BAA+B,EAAE,CAAC,KAAK,CAAC;aACzC,CAAA;YAED,OAAO;YACP,MAAM,SAAS,GAAG,+BAA+B,CAAC,QAAQ,CAAC,CAAA;YAE3D,OAAO;YACP,MAAM,CAAC,SAAS,CAAC,CAAC,aAAa,EAAE,CAAA;QACnC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;CACH","sourcesContent":["import {RestResponse} from './admin.js'\nimport {tryParseInt} from '@shopify/cli-kit/common/string'\n\nconst MAX_NUMBER_OF_PARALLEL_REQUESTS = 5\nconst MARGIN_TO_RATE_LIMIT = 5\n\nconst DELAY_FOR_TOO_MANY_PARALLEL_REQUESTS = 1000\nconst DELAY_FOR_TOO_CLOSE_TO_API_LIMIT = 4000\n\nconst THEME_CONTEXT = 'theme'\n\n/**\n * Throttles a provided action, limiting the number of globally parallel requests, or by the last seen API limit\n * headers.\n *\n * @param request - A function performing a request.\n * @returns - The result of the request, once it eventually runs.\n */\nexport async function throttle<T>(request: () => T): Promise<T> {\n  return new Promise<T>((resolve, _reject) => {\n    const performRequest = () => {\n      throttlingState(THEME_CONTEXT).requestCounter += 1\n      resolve(request())\n    }\n\n    /**\n     * Performs the request taking into account the\n     * limit of parallel requests only when the API limit has not\n     * been reached.\n     *\n     * Otherwise, performs the request to get the updated API limit\n     * headers, so throttler parameters get updates.\n     */\n    const throttleByHeader = () => {\n      if (isReachingApiLimit()) {\n        setTimeout(() => {\n          throttleByParallelCounter(performRequest)\n        }, DELAY_FOR_TOO_CLOSE_TO_API_LIMIT)\n      } else {\n        throttleByParallelCounter(performRequest)\n      }\n    }\n\n    /**\n     * Performs the command only when the the limit\n     * of parallel request has not been reached.\n     *\n     * Otherwise, defers the execution to the throttle by rate-limit function,\n     * still respecting the limit of parallel requests.\n     *\n     * @param command - The action to execute.\n     */\n    const throttleByParallelCounter = (command: () => void) => {\n      if (hasTooManyRequests()) {\n        setTimeout(() => {\n          throttleByParallelCounter(throttleByHeader)\n        }, DELAY_FOR_TOO_MANY_PARALLEL_REQUESTS)\n      } else {\n        command()\n      }\n    }\n\n    /**\n     * Start throttling by counter to get the API limit headers.\n     */\n    throttleByParallelCounter(throttleByHeader)\n  }).finally(() => {\n    throttlingState(THEME_CONTEXT).requestCounter -= 1\n  })\n}\n\n/**\n * Keep track of the latest API call limit data from a response.\n *\n * @param response - The response object.\n */\nexport function updateApiCallLimitFromResponse(response: RestResponse): void {\n  const callLimit = extractApiCallLimitFromResponse(response)\n\n  if (!callLimit) {\n    return\n  }\n\n  const [used, limit] = callLimit\n\n  latestRequestInfo().apiCallLimit = {used, limit}\n}\n\nfunction hasTooManyRequests() {\n  return throttlingState(THEME_CONTEXT).requestCounter > MAX_NUMBER_OF_PARALLEL_REQUESTS\n}\n\nfunction isReachingApiLimit() {\n  const {used, limit} = latestRequestInfo().apiCallLimit\n  return used >= limit - MARGIN_TO_RATE_LIMIT\n}\n\nfunction latestRequestInfo() {\n  return throttlingState(THEME_CONTEXT).latestRequestInfo\n}\n\n/**\n * Even considering the Stateless modules convention,\n * tracking information about the latest request is\n * critical to optimize the request throttler efficiently.\n *\n * Thus, in this case, this module deliberately avoids\n * IO cost and uses the `_throttlingState` instance for\n * that purpose.\n *\n * A context option is used if multiple APIs are using these capabilities.\n *\n * @param context - The context which we're tracking throttle state within.\n */\nfunction throttlingState(context: string): ThrottlingState {\n  const stateForContext = _throttlingState[context]\n  if (stateForContext === undefined) {\n    const startingState = {\n      requestCounter: 0,\n      latestRequestInfo: {\n        apiCallLimit: {used: 0, limit: 40},\n      },\n    }\n    _throttlingState[context] = startingState\n    return startingState\n  } else {\n    return stateForContext\n  }\n}\n\ninterface ThrottlingState {\n  /**\n   * Number of parallel requests.\n   */\n  requestCounter: number\n\n  /**\n   * Latest request information.\n   */\n  latestRequestInfo: {\n    apiCallLimit: {used: number; limit: number}\n  }\n}\n\nconst _throttlingState: {\n  [context: string]: ThrottlingState\n} = {}\n\nfunction extractRetryDelayMsFromResponse(response: RestResponse): number {\n  const retryAfterStr = header(response, 'retry-after')\n  const retryAfter = tryParseInt(retryAfterStr)\n\n  if (!retryAfter) {\n    return 0\n  }\n\n  return retryAfter\n}\n\n/**\n * Retries an operation after a delay specified in the response headers.\n *\n * @param response - The response object.\n * @param operation - The operation to retry.\n * @returns - The response of the operation.\n */\nexport async function delayAwareRetry(\n  response: RestResponse,\n  operation: () => Promise<RestResponse>,\n): Promise<RestResponse> {\n  const retryDelay = extractRetryDelayMsFromResponse(response)\n  return new Promise((resolve, _reject) => {\n    setTimeout(() => {\n      resolve(operation())\n    }, retryDelay)\n  })\n}\n\nfunction extractApiCallLimitFromResponse(response: RestResponse): [number, number] | undefined {\n  const apiCallLimit = header(response, 'x-shopify-shop-api-call-limit')\n\n  const [used, limit] = apiCallLimit\n    .split('/')\n    .map((num) => tryParseInt(num))\n    .filter(Boolean)\n\n  if (!used || !limit) {\n    return\n  }\n\n  return [used, limit]\n}\n\nfunction header(response: RestResponse, name: string): string {\n  const headers = response.headers\n  const header = headers[name]\n\n  if (header?.length === 1) {\n    return header[0] ?? ''\n  }\n\n  return ''\n}\n\nif (import.meta.vitest) {\n  const {describe, test, expect, beforeEach} = import.meta.vitest\n  let response: RestResponse\n\n  beforeEach(() => {\n    response = {\n      json: {},\n      status: 200,\n      headers: {},\n    }\n  })\n\n  describe('retryAfter', () => {\n    test('when the \"retry-after\" header value is valid', async () => {\n      // Given\n      response.headers = {\n        'retry-after': ['2.0'],\n      }\n\n      // When\n      const retryAfterDelay = extractRetryDelayMsFromResponse(response)\n\n      // Then\n      expect(retryAfterDelay).toBe(2)\n    })\n\n    test('when the \"retry-after\" header value is not present', async () => {\n      // Given\n      response.headers = {\n        'retry-after': [],\n      }\n\n      // When\n      const retryAfterDelay = extractRetryDelayMsFromResponse(response)\n\n      // Then\n      expect(retryAfterDelay).toBe(0)\n    })\n\n    test('when the \"retry-after\" header value is valid', async () => {\n      // Given\n      response.headers = {\n        'retry-after': ['invalid'],\n      }\n\n      // When\n      const retryAfterDelay = extractRetryDelayMsFromResponse(response)\n\n      // Then\n      expect(retryAfterDelay).toBe(0)\n    })\n\n    test('when the \"retry-after\" header is not present', async () => {\n      // Given\n      response.headers = {}\n\n      // When\n      const retryAfterDelay = extractRetryDelayMsFromResponse(response)\n\n      // Then\n      expect(retryAfterDelay).toBe(0)\n    })\n  })\n\n  describe('apiCallLimit', () => {\n    test('when the \"x-shopify-shop-api-call-limit\" header is valid', async () => {\n      // Given\n      response.headers = {\n        'x-shopify-shop-api-call-limit': ['10/40'],\n      }\n\n      // When\n      const callLimit = extractApiCallLimitFromResponse(response)\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const [used, limit] = callLimit!\n\n      // Then\n      expect(used).toBe(10)\n      expect(limit).toBe(40)\n    })\n\n    test('when the \"x-shopify-shop-api-call-limit\" header is invalid', async () => {\n      // Given\n      response.headers = {\n        'x-shopify-shop-api-call-limit': ['foo/bar'],\n      }\n\n      // When\n      const callLimit = extractApiCallLimitFromResponse(response)\n\n      // Then\n      expect(callLimit).toBeUndefined()\n    })\n\n    test('when the \"x-shopify-shop-api-call-limit\" header is not formatted as expected', async () => {\n      // Given\n      response.headers = {\n        'x-shopify-shop-api-call-limit': ['/10'],\n      }\n\n      // When\n      const callLimit = extractApiCallLimitFromResponse(response)\n\n      // Then\n      expect(callLimit).toBeUndefined()\n    })\n  })\n}\n"]}
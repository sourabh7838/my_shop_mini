import { buildHeaders, httpsAgent } from '../../../private/node/api/headers.js';
import { debugLogRequestInfo, errorHandler } from '../../../private/node/api/graphql.js';
import { addPublicMetadata, runWithTimer } from '../metadata.js';
import { retryAwareRequest } from '../../../private/node/api.js';
import { GraphQLClient, resolveRequestDocument } from 'graphql-request';
/**
 * Handles execution of a GraphQL query.
 *
 * @param options - GraphQL request options.
 */
async function performGraphQLRequest(options) {
    const { token, addedHeaders, queryAsString, variables, api, url, responseOptions } = options;
    const headers = {
        ...addedHeaders,
        ...buildHeaders(token),
    };
    debugLogRequestInfo(api, queryAsString, url, variables, headers);
    const clientOptions = { agent: await httpsAgent(), headers };
    const client = new GraphQLClient(url, clientOptions);
    return runWithTimer('cmd_all_timing_network_ms')(async () => {
        const response = await retryAwareRequest({ request: () => client.rawRequest(queryAsString, variables), url }, responseOptions?.handleErrors === false ? undefined : errorHandler(api));
        if (responseOptions?.onResponse) {
            responseOptions.onResponse(response);
        }
        try {
            const requestId = response.headers.get('x-request-id');
            await addPublicMetadata(async () => {
                return {
                    cmd_all_last_graphql_request_id: requestId ?? undefined,
                };
            });
            // eslint-disable-next-line no-catch-all/no-catch-all
        }
        catch {
            // no problem if unable to get request ID.
        }
        return response.data;
    });
}
/**
 * Executes a GraphQL query to an endpoint.
 *
 * @param options - GraphQL request options.
 * @returns The response of the query of generic type <T>.
 */
export async function graphqlRequest(options) {
    return performGraphQLRequest({
        ...options,
        queryAsString: options.query,
    });
}
/**
 * Executes a GraphQL query to an endpoint. Uses typed documents.
 *
 * @param options - GraphQL request options.
 * @returns The response of the query of generic type <TResult>.
 */
export async function graphqlRequestDoc(options) {
    return performGraphQLRequest({
        ...options,
        queryAsString: resolveRequestDocument(options.query).query,
    });
}
//# sourceMappingURL=graphql.js.map